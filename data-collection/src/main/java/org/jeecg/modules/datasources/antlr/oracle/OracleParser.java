// Generated from /Users/ye/work/hz/waterfall/data-collection/src/main/java/org/jeecg/modules/datasources/antlr/oracle/OracleParser.g4 by ANTLR 4.9.1
package org.jeecg.modules.datasources.antlr.oracle;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class OracleParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.9.1", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		ABORT=1, ABS=2, ACCESS=3, ACCESSED=4, ACCOUNT=5, ACL=6, ACOS=7, ACTION=8, 
		ACTIONS=9, ACTIVATE=10, ACTIVE=11, ACTIVE_COMPONENT=12, ACTIVE_DATA=13, 
		ACTIVE_FUNCTION=14, ACTIVE_TAG=15, ACTIVITY=16, ADAPTIVE_PLAN=17, ADD=18, 
		ADD_COLUMN=19, ADD_GROUP=20, ADD_MONTHS=21, ADJ_DATE=22, ADMIN=23, ADMINISTER=24, 
		ADMINISTRATOR=25, ADVANCED=26, ADVISE=27, ADVISOR=28, AFD_DISKSTRING=29, 
		AFTER=30, AGENT=31, AGGREGATE=32, A_LETTER=33, ALIAS=34, ALL=35, ALLOCATE=36, 
		ALLOW=37, ALL_ROWS=38, ALTER=39, ALWAYS=40, ANALYZE=41, ANCILLARY=42, 
		AND=43, AND_EQUAL=44, ANOMALY=45, ANSI_REARCH=46, ANTIJOIN=47, ANY=48, 
		ANYSCHEMA=49, APPEND=50, APPENDCHILDXML=51, APPEND_VALUES=52, APPLICATION=53, 
		APPLY=54, APPROX_COUNT_DISTINCT=55, ARCHIVAL=56, ARCHIVE=57, ARCHIVED=58, 
		ARCHIVELOG=59, ARRAY=60, AS=61, ASC=62, ASCII=63, ASCIISTR=64, ASIN=65, 
		ASIS=66, ASSEMBLY=67, ASSIGN=68, ASSOCIATE=69, ASYNC=70, ASYNCHRONOUS=71, 
		ATAN2=72, ATAN=73, AT=74, ATTRIBUTE=75, ATTRIBUTES=76, AUDIT=77, AUTHENTICATED=78, 
		AUTHENTICATION=79, AUTHID=80, AUTHORIZATION=81, AUTOALLOCATE=82, AUTO=83, 
		AUTOBACKUP=84, AUTOEXTEND=85, AUTO_LOGIN=86, AUTOMATIC=87, AUTONOMOUS_TRANSACTION=88, 
		AUTO_REOPTIMIZE=89, AVAILABILITY=90, AVRO=91, BACKGROUND=92, BACKUP=93, 
		BACKUPSET=94, BASIC=95, BASICFILE=96, BATCH=97, BATCHSIZE=98, BATCH_TABLE_ACCESS_BY_ROWID=99, 
		BECOME=100, BEFORE=101, BEGIN=102, BEGINNING=103, BEGIN_OUTLINE_DATA=104, 
		BEHALF=105, BEQUEATH=106, BETWEEN=107, BFILE=108, BFILENAME=109, BIGFILE=110, 
		BINARY=111, BINARY_DOUBLE=112, BINARY_DOUBLE_INFINITY=113, BINARY_DOUBLE_NAN=114, 
		BINARY_FLOAT=115, BINARY_FLOAT_INFINITY=116, BINARY_FLOAT_NAN=117, BINARY_INTEGER=118, 
		BIND_AWARE=119, BINDING=120, BIN_TO_NUM=121, BITAND=122, BITMAP_AND=123, 
		BITMAP=124, BITMAPS=125, BITMAP_TREE=126, BITS=127, BLOB=128, BLOCK=129, 
		BLOCK_RANGE=130, BLOCKS=131, BLOCKSIZE=132, BODY=133, BOOLEAN=134, BOTH=135, 
		BOUND=136, BRANCH=137, BREADTH=138, BROADCAST=139, BSON=140, BUFFER=141, 
		BUFFER_CACHE=142, BUFFER_POOL=143, BUILD=144, BULK=145, BY=146, BYPASS_RECURSIVE_CHECK=147, 
		BYPASS_UJVC=148, BYTE=149, CACHE=150, CACHE_CB=151, CACHE_INSTANCES=152, 
		CACHE_TEMP_TABLE=153, CACHING=154, CALCULATED=155, CALLBACK=156, CALL=157, 
		CANCEL=158, CANONICAL=159, CAPACITY=160, CARDINALITY=161, CASCADE=162, 
		CASE=163, CAST=164, CATEGORY=165, CDBDEFAULT=166, CEIL=167, CELL_FLASH_CACHE=168, 
		CERTIFICATE=169, CFILE=170, CHAINED=171, CHANGE=172, CHANGETRACKING=173, 
		CHANGE_DUPKEY_ERROR_INDEX=174, CHARACTER=175, CHAR=176, CHAR_CS=177, CHARTOROWID=178, 
		CHECK_ACL_REWRITE=179, CHECK=180, CHECKPOINT=181, CHILD=182, CHOOSE=183, 
		CHR=184, CHUNK=185, CLASS=186, CLASSIFIER=187, CLEANUP=188, CLEAR=189, 
		C_LETTER=190, CLIENT=191, CLOB=192, CLONE=193, CLOSE_CACHED_OPEN_CURSORS=194, 
		CLOSE=195, CLUSTER_BY_ROWID=196, CLUSTER=197, CLUSTER_DETAILS=198, CLUSTER_DISTANCE=199, 
		CLUSTER_ID=200, CLUSTERING=201, CLUSTERING_FACTOR=202, CLUSTER_PROBABILITY=203, 
		CLUSTER_SET=204, COALESCE=205, COALESCE_SQ=206, COARSE=207, CO_AUTH_IND=208, 
		COLD=209, COLLECT=210, COLUMNAR=211, COLUMN_AUTH_INDICATOR=212, COLUMN=213, 
		COLUMNS=214, COLUMN_STATS=215, COLUMN_VALUE=216, COMMENT=217, COMMIT=218, 
		COMMITTED=219, COMMON_DATA=220, COMPACT=221, COMPATIBILITY=222, COMPILE=223, 
		COMPLETE=224, COMPLIANCE=225, COMPONENT=226, COMPONENTS=227, COMPOSE=228, 
		COMPOSITE=229, COMPOSITE_LIMIT=230, COMPOUND=231, COMPRESS=232, COMPUTE=233, 
		CONCAT=234, CON_DBID_TO_ID=235, CONDITIONAL=236, CONDITION=237, CONFIRM=238, 
		CONFORMING=239, CON_GUID_TO_ID=240, CON_ID=241, CON_NAME_TO_ID=242, CONNECT_BY_CB_WHR_ONLY=243, 
		CONNECT_BY_COMBINE_SW=244, CONNECT_BY_COST_BASED=245, CONNECT_BY_ELIM_DUPS=246, 
		CONNECT_BY_FILTERING=247, CONNECT_BY_ISCYCLE=248, CONNECT_BY_ISLEAF=249, 
		CONNECT_BY_ROOT=250, CONNECT=251, CONNECT_TIME=252, CONSIDER=253, CONSISTENT=254, 
		CONSTANT=255, CONST=256, CONSTRAINT=257, CONSTRAINTS=258, CONSTRUCTOR=259, 
		CONTAINER=260, CONTAINER_DATA=261, CONTAINERS=262, CONTENT=263, CONTENTS=264, 
		CONTEXT=265, CONTINUE=266, CONTROLFILE=267, CON_UID_TO_ID=268, CONVERT=269, 
		COOKIE=270, COPY=271, CORR_K=272, CORR_S=273, CORRUPTION=274, CORRUPT_XID_ALL=275, 
		CORRUPT_XID=276, COS=277, COSH=278, COST=279, COST_XML_QUERY_REWRITE=280, 
		COUNT=281, COVAR_POP=282, COVAR_SAMP=283, CPU_COSTING=284, CPU_PER_CALL=285, 
		CPU_PER_SESSION=286, CRASH=287, CREATE=288, CREATE_FILE_DEST=289, CREATE_STORED_OUTLINES=290, 
		CREATION=291, CREDENTIAL=292, CRITICAL=293, CROSS=294, CROSSEDITION=295, 
		CSCONVERT=296, CUBE_AJ=297, CUBE=298, CUBE_GB=299, CUBE_SJ=300, CUME_DISTM=301, 
		CURRENT=302, CURRENT_DATE=303, CURRENT_SCHEMA=304, CURRENT_TIME=305, CURRENT_TIMESTAMP=306, 
		CURRENT_USER=307, CURRENTV=308, CURSOR=309, CURSOR_SHARING_EXACT=310, 
		CURSOR_SPECIFIC_SEGMENT=311, CUSTOMDATUM=312, CV=313, CYCLE=314, DANGLING=315, 
		DATABASE=316, DATA=317, DATAFILE=318, DATAFILES=319, DATAGUARDCONFIG=320, 
		DATAMOVEMENT=321, DATAOBJNO=322, DATAOBJ_TO_MAT_PARTITION=323, DATAOBJ_TO_PARTITION=324, 
		DATAPUMP=325, DATA_SECURITY_REWRITE_LIMIT=326, DATE=327, DATE_MODE=328, 
		DAY=329, DAYS=330, DBA=331, DBA_RECYCLEBIN=332, DBMS_STATS=333, DB_ROLE_CHANGE=334, 
		DBTIMEZONE=335, DB_UNIQUE_NAME=336, DB_VERSION=337, DDL=338, DEALLOCATE=339, 
		DEBUG=340, DEBUGGER=341, DEC=342, DECIMAL=343, DECLARE=344, DECOMPOSE=345, 
		DECORRELATE=346, DECR=347, DECREMENT=348, DECRYPT=349, DEDUPLICATE=350, 
		DEFAULT=351, DEFAULTS=352, DEFERRABLE=353, DEFERRED=354, DEFINED=355, 
		DEFINE=356, DEFINER=357, DEGREE=358, DELAY=359, DELEGATE=360, DELETE_ALL=361, 
		DELETE=362, DELETEXML=363, DEMAND=364, DENSE_RANKM=365, DEPENDENT=366, 
		DEPTH=367, DEQUEUE=368, DEREF=369, DEREF_NO_REWRITE=370, DESC=371, DESTROY=372, 
		DETACHED=373, DETERMINES=374, DETERMINISTIC=375, DICTIONARY=376, DIMENSION=377, 
		DIMENSIONS=378, DIRECT_LOAD=379, DIRECTORY=380, DIRECT_PATH=381, DISABLE_ALL=382, 
		DISABLE=383, DISABLE_PARALLEL_DML=384, DISABLE_PRESET=385, DISABLE_RPKE=386, 
		DISALLOW=387, DISASSOCIATE=388, DISCARD=389, DISCONNECT=390, DISK=391, 
		DISKGROUP=392, DISKGROUP_PLUS=393, DISKS=394, DISMOUNT=395, DISTINCT=396, 
		DISTINGUISHED=397, DISTRIBUTED=398, DISTRIBUTE=399, DML=400, DML_UPDATE=401, 
		DOCFIDELITY=402, DOCUMENT=403, DOMAIN_INDEX_FILTER=404, DOMAIN_INDEX_NO_SORT=405, 
		DOMAIN_INDEX_SORT=406, DOUBLE=407, DOWNGRADE=408, DRIVING_SITE=409, DROP_COLUMN=410, 
		DROP=411, DROP_GROUP=412, DSINTERVAL_UNCONSTRAINED=413, DST_UPGRADE_INSERT_CONV=414, 
		DUMP=415, DUMPSET=416, DUPLICATE=417, DV=418, DYNAMIC=419, DYNAMIC_SAMPLING=420, 
		DYNAMIC_SAMPLING_EST_CDN=421, EACH=422, EDITIONABLE=423, EDITION=424, 
		EDITIONING=425, EDITIONS=426, ELEMENT=427, ELIM_GROUPBY=428, ELIMINATE_JOIN=429, 
		ELIMINATE_OBY=430, ELIMINATE_OUTER_JOIN=431, ELSE=432, ELSIF=433, EM=434, 
		EMPTY_BLOB=435, EMPTY_CLOB=436, EMPTY=437, ENABLE_ALL=438, ENABLE=439, 
		ENABLE_PARALLEL_DML=440, ENABLE_PRESET=441, ENCODING=442, ENCRYPT=443, 
		ENCRYPTION=444, END=445, END_OUTLINE_DATA=446, ENFORCED=447, ENFORCE=448, 
		ENQUEUE=449, ENTERPRISE=450, ENTITYESCAPING=451, ENTRY=452, EQUIPART=453, 
		ERR=454, ERROR_ARGUMENT=455, ERROR=456, ERROR_ON_OVERLAP_TIME=457, ERRORS=458, 
		ESCAPE=459, ESTIMATE=460, EVAL=461, EVALNAME=462, EVALUATE=463, EVALUATION=464, 
		EVENTS=465, EVERY=466, EXCEPT=467, EXCEPTION=468, EXCEPTION_INIT=469, 
		EXCEPTIONS=470, EXCHANGE=471, EXCLUDE=472, EXCLUDING=473, EXCLUSIVE=474, 
		EXECUTE=475, EXEMPT=476, EXISTING=477, EXISTS=478, EXISTSNODE=479, EXIT=480, 
		EXPAND_GSET_TO_UNION=481, EXPAND_TABLE=482, EXP=483, EXPIRE=484, EXPLAIN=485, 
		EXPLOSION=486, EXPORT=487, EXPR_CORR_CHECK=488, EXPRESS=489, EXTENDS=490, 
		EXTENT=491, EXTENTS=492, EXTERNAL=493, EXTERNALLY=494, EXTRACTCLOBXML=495, 
		EXTRACT=496, EXTRACTVALUE=497, EXTRA=498, FACILITY=499, FACT=500, FACTOR=501, 
		FACTORIZE_JOIN=502, FAILED=503, FAILED_LOGIN_ATTEMPTS=504, FAILGROUP=505, 
		FAILOVER=506, FAILURE=507, FALSE=508, FAMILY=509, FAR=510, FAST=511, FASTSTART=512, 
		FBTSCAN=513, FEATURE_DETAILS=514, FEATURE_ID=515, FEATURE_SET=516, FEATURE_VALUE=517, 
		FETCH=518, FILE=519, FILE_NAME_CONVERT=520, FILESYSTEM_LIKE_LOGGING=521, 
		FILTER=522, FINAL=523, FINE=524, FINISH=525, FIRST=526, FIRSTM=527, FIRST_ROWS=528, 
		FIRST_VALUE=529, FIXED_VIEW_DATA=530, FLAGGER=531, FLASHBACK=532, FLASH_CACHE=533, 
		FLOAT=534, FLOB=535, FLOOR=536, FLUSH=537, FOLDER=538, FOLLOWING=539, 
		FOLLOWS=540, FORALL=541, FORCE=542, FORCE_XML_QUERY_REWRITE=543, FOREIGN=544, 
		FOREVER=545, FOR=546, FORMAT=547, FORWARD=548, FRAGMENT_NUMBER=549, FREELIST=550, 
		FREELISTS=551, FREEPOOLS=552, FRESH=553, FROM=554, FROM_TZ=555, FULL=556, 
		FULL_OUTER_JOIN_TO_OUTER=557, FUNCTION=558, FUNCTIONS=559, GATHER_OPTIMIZER_STATISTICS=560, 
		GATHER_PLAN_STATISTICS=561, GBY_CONC_ROLLUP=562, GBY_PUSHDOWN=563, GENERATED=564, 
		GET=565, GLOBAL=566, GLOBALLY=567, GLOBAL_NAME=568, GLOBAL_TOPIC_ENABLED=569, 
		GOTO=570, GRANT=571, GROUP_BY=572, GROUP=573, GROUP_ID=574, GROUPING=575, 
		GROUPING_ID=576, GROUPS=577, GUARANTEED=578, GUARANTEE=579, GUARD=580, 
		HASH_AJ=581, HASH=582, HASHKEYS=583, HASH_SJ=584, HAVING=585, HEADER=586, 
		HEAP=587, HELP=588, HEXTORAW=589, HEXTOREF=590, HIDDEN_KEYWORD=591, HIDE=592, 
		HIERARCHY=593, HIGH=594, HINTSET_BEGIN=595, HINTSET_END=596, HOT=597, 
		HOUR=598, HWM_BROKERED=599, HYBRID=600, IDENTIFIED=601, IDENTIFIER=602, 
		IDENTITY=603, IDGENERATORS=604, ID=605, IDLE_TIME=606, IF=607, IGNORE=608, 
		IGNORE_OPTIM_EMBEDDED_HINTS=609, IGNORE_ROW_ON_DUPKEY_INDEX=610, IGNORE_WHERE_CLAUSE=611, 
		ILM=612, IMMEDIATE=613, IMPACT=614, IMPORT=615, INACTIVE=616, INCLUDE=617, 
		INCLUDE_VERSION=618, INCLUDING=619, INCREMENTAL=620, INCREMENT=621, INCR=622, 
		INDENT=623, INDEX_ASC=624, INDEX_COMBINE=625, INDEX_DESC=626, INDEXED=627, 
		INDEXES=628, INDEX_FFS=629, INDEX_FILTER=630, INDEX=631, INDEXING=632, 
		INDEX_JOIN=633, INDEX_ROWS=634, INDEX_RRS=635, INDEX_RS_ASC=636, INDEX_RS_DESC=637, 
		INDEX_RS=638, INDEX_SCAN=639, INDEX_SKIP_SCAN=640, INDEX_SS_ASC=641, INDEX_SS_DESC=642, 
		INDEX_SS=643, INDEX_STATS=644, INDEXTYPE=645, INDEXTYPES=646, INDICATOR=647, 
		INDICES=648, INFINITE=649, INFORMATIONAL=650, INHERIT=651, IN=652, INITCAP=653, 
		INITIAL=654, INITIALIZED=655, INITIALLY=656, INITRANS=657, INLINE=658, 
		INLINE_XMLTYPE_NT=659, INMEMORY=660, IN_MEMORY_METADATA=661, INMEMORY_PRUNING=662, 
		INNER=663, INOUT=664, INPLACE=665, INSERTCHILDXMLAFTER=666, INSERTCHILDXMLBEFORE=667, 
		INSERTCHILDXML=668, INSERT=669, INSERTXMLAFTER=670, INSERTXMLBEFORE=671, 
		INSTANCE=672, INSTANCES=673, INSTANTIABLE=674, INSTANTLY=675, INSTEAD=676, 
		INSTR2=677, INSTR4=678, INSTRB=679, INSTRC=680, INSTR=681, INTEGER=682, 
		INTERLEAVED=683, INTERMEDIATE=684, INTERNAL_CONVERT=685, INTERNAL_USE=686, 
		INTERPRETED=687, INTERSECT=688, INTERVAL=689, INT=690, INTO=691, INVALIDATE=692, 
		INVISIBLE=693, IN_XQUERY=694, IS=695, ISOLATION=696, ISOLATION_LEVEL=697, 
		ITERATE=698, ITERATION_NUMBER=699, JAVA=700, JOB=701, JOIN=702, JSON_ARRAYAGG=703, 
		JSON_ARRAY=704, JSON_EQUAL=705, JSON_EXISTS2=706, JSON_EXISTS=707, JSONGET=708, 
		JSON=709, JSON_OBJECTAGG=710, JSON_OBJECT=711, JSONPARSE=712, JSON_QUERY=713, 
		JSON_SERIALIZE=714, JSON_TABLE=715, JSON_TEXTCONTAINS2=716, JSON_TEXTCONTAINS=717, 
		JSON_VALUE=718, KEEP_DUPLICATES=719, KEEP=720, KERBEROS=721, KEY=722, 
		KEY_LENGTH=723, KEYSIZE=724, KEYS=725, KEYSTORE=726, KILL=727, LABEL=728, 
		LANGUAGE=729, LAST_DAY=730, LAST=731, LAST_VALUE=732, LATERAL=733, LAX=734, 
		LAYER=735, LDAP_REGISTRATION_ENABLED=736, LDAP_REGISTRATION=737, LDAP_REG_SYNC_INTERVAL=738, 
		LEADING=739, LEFT=740, LENGTH2=741, LENGTH4=742, LENGTHB=743, LENGTHC=744, 
		LENGTH=745, LESS=746, LEVEL=747, LEVELS=748, LIBRARY=749, LIFECYCLE=750, 
		LIFE=751, LIFETIME=752, LIKE2=753, LIKE4=754, LIKEC=755, LIKE_EXPAND=756, 
		LIKE=757, LIMIT=758, LINEAR=759, LINK=760, LIST=761, LN=762, LNNVL=763, 
		LOAD=764, LOB=765, LOBNVL=766, LOBS=767, LOCAL_INDEXES=768, LOCAL=769, 
		LOCALTIME=770, LOCALTIMESTAMP=771, LOCATION=772, LOCATOR=773, LOCKED=774, 
		LOCKING=775, LOCK=776, LOGFILE=777, LOGFILES=778, LOGGING=779, LOGICAL=780, 
		LOGICAL_READS_PER_CALL=781, LOGICAL_READS_PER_SESSION=782, LOG=783, LOGMINING=784, 
		LOGOFF=785, LOGON=786, LOG_READ_ONLY_VIOLATIONS=787, LONG=788, LOOP=789, 
		LOWER=790, LOW=791, LPAD=792, LTRIM=793, MAIN=794, MAKE_REF=795, MANAGED=796, 
		MANAGE=797, MANAGEMENT=798, MANAGER=799, MANUAL=800, MAP=801, MAPPING=802, 
		MASTER=803, MATCHED=804, MATCHES=805, MATCH=806, MATCH_NUMBER=807, MATCH_RECOGNIZE=808, 
		MATERIALIZED=809, MATERIALIZE=810, MAXARCHLOGS=811, MAXDATAFILES=812, 
		MAXEXTENTS=813, MAXIMIZE=814, MAXINSTANCES=815, MAXLOGFILES=816, MAXLOGHISTORY=817, 
		MAXLOGMEMBERS=818, MAX_SHARED_TEMP_SIZE=819, MAXSIZE=820, MAXTRANS=821, 
		MAXVALUE=822, MEASURE=823, MEASURES=824, MEDIUM=825, MEMBER=826, MEMCOMPRESS=827, 
		MEMORY=828, MERGEACTIONS=829, MERGE_AJ=830, MERGE_CONST_ON=831, MERGE=832, 
		MERGE_SJ=833, METADATA=834, METHOD=835, MIGRATE=836, MIGRATION=837, MINEXTENTS=838, 
		MINIMIZE=839, MINIMUM=840, MINING=841, MINUS=842, MINUS_NULL=843, MINUTE=844, 
		MINVALUE=845, MIRRORCOLD=846, MIRRORHOT=847, MIRROR=848, MLSLABEL=849, 
		MODEL_COMPILE_SUBQUERY=850, MODEL_DONTVERIFY_UNIQUENESS=851, MODEL_DYNAMIC_SUBQUERY=852, 
		MODEL_MIN_ANALYSIS=853, MODEL=854, MODEL_NB=855, MODEL_NO_ANALYSIS=856, 
		MODEL_PBY=857, MODEL_PUSH_REF=858, MODEL_SV=859, MODE=860, MODIFICATION=861, 
		MODIFY_COLUMN_TYPE=862, MODIFY=863, MOD=864, MODULE=865, MONITORING=866, 
		MONITOR=867, MONTH=868, MONTHS_BETWEEN=869, MONTHS=870, MOUNT=871, MOUNTPATH=872, 
		MOVEMENT=873, MOVE=874, MULTIDIMENSIONAL=875, MULTISET=876, MV_MERGE=877, 
		NAMED=878, NAME=879, NAMESPACE=880, NAN=881, NANVL=882, NATIONAL=883, 
		NATIVE_FULL_OUTER_JOIN=884, NATIVE=885, NATURAL=886, NATURALN=887, NAV=888, 
		NCHAR_CS=889, NCHAR=890, NCHR=891, NCLOB=892, NEEDED=893, NEG=894, NESTED=895, 
		NESTED_TABLE_FAST_INSERT=896, NESTED_TABLE_GET_REFS=897, NESTED_TABLE_ID=898, 
		NESTED_TABLE_SET_REFS=899, NESTED_TABLE_SET_SETID=900, NETWORK=901, NEVER=902, 
		NEW=903, NEW_TIME=904, NEXT_DAY=905, NEXT=906, NL_AJ=907, NLJ_BATCHING=908, 
		NLJ_INDEX_FILTER=909, NLJ_INDEX_SCAN=910, NLJ_PREFETCH=911, NLS_CALENDAR=912, 
		NLS_CHARACTERSET=913, NLS_CHARSET_DECL_LEN=914, NLS_CHARSET_ID=915, NLS_CHARSET_NAME=916, 
		NLS_COMP=917, NLS_CURRENCY=918, NLS_DATE_FORMAT=919, NLS_DATE_LANGUAGE=920, 
		NLS_INITCAP=921, NLS_ISO_CURRENCY=922, NL_SJ=923, NLS_LANG=924, NLS_LANGUAGE=925, 
		NLS_LENGTH_SEMANTICS=926, NLS_LOWER=927, NLS_NCHAR_CONV_EXCP=928, NLS_NUMERIC_CHARACTERS=929, 
		NLS_SORT=930, NLSSORT=931, NLS_SPECIAL_CHARS=932, NLS_TERRITORY=933, NLS_UPPER=934, 
		NO_ACCESS=935, NO_ADAPTIVE_PLAN=936, NO_ANSI_REARCH=937, NOAPPEND=938, 
		NOARCHIVELOG=939, NOAUDIT=940, NO_AUTO_REOPTIMIZE=941, NO_BASETABLE_MULTIMV_REWRITE=942, 
		NO_BATCH_TABLE_ACCESS_BY_ROWID=943, NO_BIND_AWARE=944, NO_BUFFER=945, 
		NOCACHE=946, NO_CARTESIAN=947, NO_CHECK_ACL_REWRITE=948, NO_CLUSTER_BY_ROWID=949, 
		NO_CLUSTERING=950, NO_COALESCE_SQ=951, NO_COMMON_DATA=952, NOCOMPRESS=953, 
		NO_CONNECT_BY_CB_WHR_ONLY=954, NO_CONNECT_BY_COMBINE_SW=955, NO_CONNECT_BY_COST_BASED=956, 
		NO_CONNECT_BY_ELIM_DUPS=957, NO_CONNECT_BY_FILTERING=958, NOCOPY=959, 
		NO_COST_XML_QUERY_REWRITE=960, NO_CPU_COSTING=961, NOCPU_COSTING=962, 
		NOCYCLE=963, NO_DATA_SECURITY_REWRITE=964, NO_DECORRELATE=965, NODELAY=966, 
		NO_DOMAIN_INDEX_FILTER=967, NO_DST_UPGRADE_INSERT_CONV=968, NO_ELIM_GROUPBY=969, 
		NO_ELIMINATE_JOIN=970, NO_ELIMINATE_OBY=971, NO_ELIMINATE_OUTER_JOIN=972, 
		NOENTITYESCAPING=973, NO_EXPAND_GSET_TO_UNION=974, NO_EXPAND=975, NO_EXPAND_TABLE=976, 
		NO_FACT=977, NO_FACTORIZE_JOIN=978, NO_FILTERING=979, NOFORCE=980, NO_FULL_OUTER_JOIN_TO_OUTER=981, 
		NO_GATHER_OPTIMIZER_STATISTICS=982, NO_GBY_PUSHDOWN=983, NOGUARANTEE=984, 
		NO_INDEX_FFS=985, NO_INDEX=986, NO_INDEX_SS=987, NO_INMEMORY=988, NO_INMEMORY_PRUNING=989, 
		NOKEEP=990, NO_LOAD=991, NOLOCAL=992, NOLOGGING=993, NOMAPPING=994, NOMAXVALUE=995, 
		NO_MERGE=996, NOMINIMIZE=997, NOMINVALUE=998, NO_MODEL_PUSH_REF=999, NO_MONITORING=1000, 
		NOMONITORING=1001, NO_MONITOR=1002, NO_MULTIMV_REWRITE=1003, NO_NATIVE_FULL_OUTER_JOIN=1004, 
		NONBLOCKING=1005, NONEDITIONABLE=1006, NONE=1007, NO_NLJ_BATCHING=1008, 
		NO_NLJ_PREFETCH=1009, NO=1010, NONSCHEMA=1011, NO_OBJECT_LINK=1012, NOORDER=1013, 
		NO_ORDER_ROLLUPS=1014, NO_OUTER_JOIN_TO_ANTI=1015, NO_OUTER_JOIN_TO_INNER=1016, 
		NOOVERRIDE=1017, NO_PARALLEL_INDEX=1018, NOPARALLEL_INDEX=1019, NO_PARALLEL=1020, 
		NOPARALLEL=1021, NO_PARTIAL_COMMIT=1022, NO_PARTIAL_JOIN=1023, NO_PARTIAL_ROLLUP_PUSHDOWN=1024, 
		NOPARTITION=1025, NO_PLACE_DISTINCT=1026, NO_PLACE_GROUP_BY=1027, NO_PQ_CONCURRENT_UNION=1028, 
		NO_PQ_MAP=1029, NO_PQ_REPLICATE=1030, NO_PQ_SKEW=1031, NO_PRUNE_GSETS=1032, 
		NO_PULL_PRED=1033, NO_PUSH_PRED=1034, NO_PUSH_SUBQ=1035, NO_PX_FAULT_TOLERANCE=1036, 
		NO_PX_JOIN_FILTER=1037, NO_QKN_BUFF=1038, NO_QUERY_TRANSFORMATION=1039, 
		NO_REF_CASCADE=1040, NORELOCATE=1041, NORELY=1042, NOREPAIR=1043, NOREPLAY=1044, 
		NORESETLOGS=1045, NO_RESULT_CACHE=1046, NOREVERSE=1047, NO_REWRITE=1048, 
		NOREWRITE=1049, NORMAL=1050, NO_ROOT_SW_FOR_LOCAL=1051, NOROWDEPENDENCIES=1052, 
		NOSCHEMACHECK=1053, NOSEGMENT=1054, NO_SEMIJOIN=1055, NO_SEMI_TO_INNER=1056, 
		NO_SET_TO_JOIN=1057, NOSORT=1058, NO_SQL_TRANSLATION=1059, NO_SQL_TUNE=1060, 
		NO_STAR_TRANSFORMATION=1061, NO_STATEMENT_QUEUING=1062, NO_STATS_GSETS=1063, 
		NOSTRICT=1064, NO_SUBQUERY_PRUNING=1065, NO_SUBSTRB_PAD=1066, NO_SWAP_JOIN_INPUTS=1067, 
		NOSWITCH=1068, NO_TABLE_LOOKUP_BY_NL=1069, NO_TEMP_TABLE=1070, NOTHING=1071, 
		NOTIFICATION=1072, NOT=1073, NO_TRANSFORM_DISTINCT_AGG=1074, NO_UNNEST=1075, 
		NO_USE_CUBE=1076, NO_USE_HASH_AGGREGATION=1077, NO_USE_HASH_GBY_FOR_PUSHDOWN=1078, 
		NO_USE_HASH=1079, NO_USE_INVISIBLE_INDEXES=1080, NO_USE_MERGE=1081, NO_USE_NL=1082, 
		NO_USE_VECTOR_AGGREGATION=1083, NOVALIDATE=1084, NO_VECTOR_TRANSFORM_DIMS=1085, 
		NO_VECTOR_TRANSFORM_FACT=1086, NO_VECTOR_TRANSFORM=1087, NOWAIT=1088, 
		NO_XDB_FASTPATH_INSERT=1089, NO_XML_DML_REWRITE=1090, NO_XMLINDEX_REWRITE_IN_SELECT=1091, 
		NO_XMLINDEX_REWRITE=1092, NO_XML_QUERY_REWRITE=1093, NO_ZONEMAP=1094, 
		NTH_VALUE=1095, NULLIF=1096, NULL=1097, NULLS=1098, NUMBER=1099, NUMERIC=1100, 
		NUM_INDEX_KEYS=1101, NUMTODSINTERVAL=1102, NUMTOYMINTERVAL=1103, NVARCHAR2=1104, 
		NVL2=1105, OBJECT2XML=1106, OBJECT=1107, OBJ_ID=1108, OBJNO=1109, OBJNO_REUSE=1110, 
		OCCURENCES=1111, OFFLINE=1112, OFF=1113, OFFSET=1114, OF=1115, OIDINDEX=1116, 
		OID=1117, OLAP=1118, OLD=1119, OLD_PUSH_PRED=1120, OLS=1121, OLTP=1122, 
		OMIT=1123, ONE=1124, ONLINE=1125, ONLINELOG=1126, ONLY=1127, ON=1128, 
		OPAQUE=1129, OPAQUE_TRANSFORM=1130, OPAQUE_XCANONICAL=1131, OPCODE=1132, 
		OPEN=1133, OPERATIONS=1134, OPERATOR=1135, OPT_ESTIMATE=1136, OPTIMAL=1137, 
		OPTIMIZE=1138, OPTIMIZER_FEATURES_ENABLE=1139, OPTIMIZER_GOAL=1140, OPTION=1141, 
		OPT_PARAM=1142, ORA_BRANCH=1143, ORA_CHECK_ACL=1144, ORA_CHECK_PRIVILEGE=1145, 
		ORA_CLUSTERING=1146, ORADATA=1147, ORADEBUG=1148, ORA_DST_AFFECTED=1149, 
		ORA_DST_CONVERT=1150, ORA_DST_ERROR=1151, ORA_GET_ACLIDS=1152, ORA_GET_PRIVILEGES=1153, 
		ORA_HASH=1154, ORA_INVOKING_USERID=1155, ORA_INVOKING_USER=1156, ORA_INVOKING_XS_USER_GUID=1157, 
		ORA_INVOKING_XS_USER=1158, ORA_RAWCOMPARE=1159, ORA_RAWCONCAT=1160, ORA_ROWSCN=1161, 
		ORA_ROWSCN_RAW=1162, ORA_ROWVERSION=1163, ORA_TABVERSION=1164, ORA_WRITE_TIME=1165, 
		ORDERED=1166, ORDERED_PREDICATES=1167, ORDER=1168, ORDINALITY=1169, OR_EXPAND=1170, 
		ORGANIZATION=1171, OR=1172, OR_PREDICATES=1173, OSERROR=1174, OTHER=1175, 
		OUTER_JOIN_TO_ANTI=1176, OUTER_JOIN_TO_INNER=1177, OUTER=1178, OUTLINE_LEAF=1179, 
		OUTLINE=1180, OUT_OF_LINE=1181, OUT=1182, OVERFLOW_NOMOVE=1183, OVERFLOW=1184, 
		OVERLAPS=1185, OVER=1186, OVERRIDING=1187, OWNER=1188, OWNERSHIP=1189, 
		OWN=1190, PACKAGE=1191, PACKAGES=1192, PARALLEL_ENABLE=1193, PARALLEL_INDEX=1194, 
		PARALLEL=1195, PARAMETERFILE=1196, PARAMETERS=1197, PARAM=1198, PARENT=1199, 
		PARITY=1200, PARTIAL_JOIN=1201, PARTIALLY=1202, PARTIAL=1203, PARTIAL_ROLLUP_PUSHDOWN=1204, 
		PARTITION_HASH=1205, PARTITION_LIST=1206, PARTITION=1207, PARTITION_RANGE=1208, 
		PARTITIONS=1209, PARTNUMINST=1210, PASSING=1211, PASSWORD_GRACE_TIME=1212, 
		PASSWORD_LIFE_TIME=1213, PASSWORD_LOCK_TIME=1214, PASSWORD=1215, PASSWORD_REUSE_MAX=1216, 
		PASSWORD_REUSE_TIME=1217, PASSWORD_VERIFY_FUNCTION=1218, PAST=1219, PATCH=1220, 
		PATH=1221, PATH_PREFIX=1222, PATHS=1223, PATTERN=1224, PBL_HS_BEGIN=1225, 
		PBL_HS_END=1226, PCTFREE=1227, PCTINCREASE=1228, PCTTHRESHOLD=1229, PCTUSED=1230, 
		PCTVERSION=1231, PENDING=1232, PERCENT_FOUND=1233, PERCENT_ISOPEN=1234, 
		PERCENT_NOTFOUND=1235, PERCENT_KEYWORD=1236, PERCENT_RANKM=1237, PERCENT_ROWCOUNT=1238, 
		PERCENT_ROWTYPE=1239, PERCENT_TYPE=1240, PERFORMANCE=1241, PERIOD_KEYWORD=1242, 
		PERMANENT=1243, PERMISSION=1244, PERMUTE=1245, PER=1246, PFILE=1247, PHYSICAL=1248, 
		PIKEY=1249, PIPELINED=1250, PIPE=1251, PIV_GB=1252, PIVOT=1253, PIV_SSF=1254, 
		PLACE_DISTINCT=1255, PLACE_GROUP_BY=1256, PLAN=1257, PLSCOPE_SETTINGS=1258, 
		PLS_INTEGER=1259, PLSQL_CCFLAGS=1260, PLSQL_CODE_TYPE=1261, PLSQL_DEBUG=1262, 
		PLSQL_OPTIMIZE_LEVEL=1263, PLSQL_WARNINGS=1264, PLUGGABLE=1265, POINT=1266, 
		POLICY=1267, POOL_16K=1268, POOL_2K=1269, POOL_32K=1270, POOL_4K=1271, 
		POOL_8K=1272, POSITIVEN=1273, POSITIVE=1274, POST_TRANSACTION=1275, POWERMULTISET_BY_CARDINALITY=1276, 
		POWERMULTISET=1277, POWER=1278, PQ_CONCURRENT_UNION=1279, PQ_DISTRIBUTE=1280, 
		PQ_DISTRIBUTE_WINDOW=1281, PQ_FILTER=1282, PQ_MAP=1283, PQ_NOMAP=1284, 
		PQ_REPLICATE=1285, PQ_SKEW=1286, PRAGMA=1287, PREBUILT=1288, PRECEDES=1289, 
		PRECEDING=1290, PRECISION=1291, PRECOMPUTE_SUBQUERY=1292, PREDICATE_REORDERS=1293, 
		PRELOAD=1294, PREPARE=1295, PRESENTNNV=1296, PRESENT=1297, PRESENTV=1298, 
		PRESERVE_OID=1299, PRESERVE=1300, PRETTY=1301, PREVIOUS=1302, PREV=1303, 
		PRIMARY=1304, PRINTBLOBTOCLOB=1305, PRIORITY=1306, PRIOR=1307, PRIVATE=1308, 
		PRIVATE_SGA=1309, PRIVILEGED=1310, PRIVILEGE=1311, PRIVILEGES=1312, PROCEDURAL=1313, 
		PROCEDURE=1314, PROCESS=1315, PROFILE=1316, PROGRAM=1317, PROJECT=1318, 
		PROPAGATE=1319, PROTECTED=1320, PROTECTION=1321, PROXY=1322, PRUNING=1323, 
		PUBLIC=1324, PULL_PRED=1325, PURGE=1326, PUSH_PRED=1327, PUSH_SUBQ=1328, 
		PX_FAULT_TOLERANCE=1329, PX_GRANULE=1330, PX_JOIN_FILTER=1331, QB_NAME=1332, 
		QUERY_BLOCK=1333, QUERY=1334, QUEUE_CURR=1335, QUEUE=1336, QUEUE_ROWP=1337, 
		QUIESCE=1338, QUORUM=1339, QUOTA=1340, RAISE=1341, RANDOM_LOCAL=1342, 
		RANDOM=1343, RANGE=1344, RANKM=1345, RAPIDLY=1346, RAW=1347, RAWTOHEX=1348, 
		RAWTONHEX=1349, RBA=1350, RBO_OUTLINE=1351, RDBA=1352, READ=1353, READS=1354, 
		REALM=1355, REAL=1356, REBALANCE=1357, REBUILD=1358, RECORD=1359, RECORDS_PER_BLOCK=1360, 
		RECOVERABLE=1361, RECOVER=1362, RECOVERY=1363, RECYCLEBIN=1364, RECYCLE=1365, 
		REDACTION=1366, REDEFINE=1367, REDO=1368, REDUCED=1369, REDUNDANCY=1370, 
		REF_CASCADE_CURSOR=1371, REFERENCED=1372, REFERENCE=1373, REFERENCES=1374, 
		REFERENCING=1375, REF=1376, REFRESH=1377, REFTOHEX=1378, REGEXP_COUNT=1379, 
		REGEXP_INSTR=1380, REGEXP_LIKE=1381, REGEXP_REPLACE=1382, REGEXP_SUBSTR=1383, 
		REGISTER=1384, REGR_AVGX=1385, REGR_AVGY=1386, REGR_COUNT=1387, REGR_INTERCEPT=1388, 
		REGR_R2=1389, REGR_SLOPE=1390, REGR_SXX=1391, REGR_SXY=1392, REGR_SYY=1393, 
		REGULAR=1394, REJECT=1395, REKEY=1396, RELATIONAL=1397, RELIES_ON=1398, 
		RELOCATE=1399, RELY=1400, REMAINDER=1401, REMOTE_MAPPED=1402, REMOVE=1403, 
		RENAME=1404, REPAIR=1405, REPEAT=1406, REPLACE=1407, REPLICATION=1408, 
		REQUIRED=1409, RESETLOGS=1410, RESET=1411, RESIZE=1412, RESOLVE=1413, 
		RESOLVER=1414, RESOURCE=1415, RESPECT=1416, RESTART=1417, RESTORE_AS_INTERVALS=1418, 
		RESTORE=1419, RESTRICT_ALL_REF_CONS=1420, RESTRICTED=1421, RESTRICT_REFERENCES=1422, 
		RESTRICT=1423, RESULT_CACHE=1424, RESULT=1425, RESUMABLE=1426, RESUME=1427, 
		RETENTION=1428, RETRY_ON_ROW_CHANGE=1429, RETURNING=1430, RETURN=1431, 
		REUSE=1432, REVERSE=1433, REVOKE=1434, REWRITE_OR_ERROR=1435, REWRITE=1436, 
		RIGHT=1437, ROLE=1438, ROLESET=1439, ROLES=1440, ROLLBACK=1441, ROLLING=1442, 
		ROLLUP=1443, ROWDEPENDENCIES=1444, ROWID_MAPPING_TABLE=1445, ROWID=1446, 
		ROWIDTOCHAR=1447, ROWIDTONCHAR=1448, ROW_LENGTH=1449, ROWNUM=1450, ROW=1451, 
		ROWS=1452, RPAD=1453, RTRIM=1454, RULE=1455, RULES=1456, RUNNING=1457, 
		SALT=1458, SAMPLE=1459, SAVE_AS_INTERVALS=1460, SAVEPOINT=1461, SAVE=1462, 
		SB4=1463, SCALE_ROWS=1464, SCALE=1465, SCAN_INSTANCES=1466, SCAN=1467, 
		SCHEDULER=1468, SCHEMACHECK=1469, SCHEMA=1470, SCN_ASCENDING=1471, SCN=1472, 
		SCOPE=1473, SCRUB=1474, SD_ALL=1475, SD_INHIBIT=1476, SDO_GEOM_MBR=1477, 
		SD_SHOW=1478, SEARCH=1479, SECOND=1480, SECRET=1481, SECUREFILE_DBA=1482, 
		SECUREFILE=1483, SECURITY=1484, SEED=1485, SEG_BLOCK=1486, SEG_FILE=1487, 
		SEGMENT=1488, SELECTIVITY=1489, SELECT=1490, SELF=1491, SEMIJOIN_DRIVER=1492, 
		SEMIJOIN=1493, SEMI_TO_INNER=1494, SEQUENCED=1495, SEQUENCE=1496, SEQUENTIAL=1497, 
		SEQ=1498, SERIALIZABLE=1499, SERIALLY_REUSABLE=1500, SERIAL=1501, SERVERERROR=1502, 
		SERVICE_NAME_CONVERT=1503, SERVICES=1504, SESSION_CACHED_CURSORS=1505, 
		SESSION=1506, SESSIONS_PER_USER=1507, SESSIONTIMEZONE=1508, SESSIONTZNAME=1509, 
		SET=1510, SETS=1511, SETTINGS=1512, SET_TO_JOIN=1513, SEVERE=1514, SHARED_POOL=1515, 
		SHARED=1516, SHARE=1517, SHARING=1518, SHELFLIFE=1519, SHOW=1520, SHRINK=1521, 
		SHUTDOWN=1522, SIBLINGS=1523, SID=1524, SIGNAL_COMPONENT=1525, SIGNAL_FUNCTION=1526, 
		SIGN=1527, SIGNTYPE=1528, SIMPLE_INTEGER=1529, SIMPLE=1530, SINGLE=1531, 
		SINGLETASK=1532, SINH=1533, SIN=1534, SIZE=1535, SKIP_EXT_OPTIMIZER=1536, 
		SKIP_=1537, SKIP_UNQ_UNUSABLE_IDX=1538, SKIP_UNUSABLE_INDEXES=1539, SMALLFILE=1540, 
		SMALLINT=1541, SNAPSHOT=1542, SOME=1543, SORT=1544, SOUNDEX=1545, SOURCE_FILE_DIRECTORY=1546, 
		SOURCE_FILE_NAME_CONVERT=1547, SOURCE=1548, SPACE_KEYWORD=1549, SPECIFICATION=1550, 
		SPFILE=1551, SPLIT=1552, SPREADSHEET=1553, SQLDATA=1554, SQLERROR=1555, 
		SQLLDR=1556, SQL=1557, SQL_TRACE=1558, SQL_TRANSLATION_PROFILE=1559, SQRT=1560, 
		STALE=1561, STANDALONE=1562, STANDARD_HASH=1563, STANDBY_MAX_DATA_DELAY=1564, 
		STANDBYS=1565, STANDBY=1566, STAR=1567, STAR_TRANSFORMATION=1568, START=1569, 
		STARTUP=1570, STATEMENT_ID=1571, STATEMENT_QUEUING=1572, STATEMENTS=1573, 
		STATEMENT=1574, STATE=1575, STATIC=1576, STATISTICS=1577, STATS_BINOMIAL_TEST=1578, 
		STATS_CROSSTAB=1579, STATS_F_TEST=1580, STATS_KS_TEST=1581, STATS_MODE=1582, 
		STATS_MW_TEST=1583, STATS_ONE_WAY_ANOVA=1584, STATS_T_TEST_INDEP=1585, 
		STATS_T_TEST_INDEPU=1586, STATS_T_TEST_ONE=1587, STATS_T_TEST_PAIRED=1588, 
		STATS_WSR_TEST=1589, STDDEV_POP=1590, STDDEV_SAMP=1591, STOP=1592, STORAGE=1593, 
		STORE=1594, STREAMS=1595, STREAM=1596, STRICT=1597, STRING=1598, STRIPE_COLUMNS=1599, 
		STRIPE_WIDTH=1600, STRIP=1601, STRUCTURE=1602, SUBMULTISET=1603, SUBPARTITION_REL=1604, 
		SUBPARTITIONS=1605, SUBPARTITION=1606, SUBQUERIES=1607, SUBQUERY_PRUNING=1608, 
		SUBSCRIBE=1609, SUBSET=1610, SUBSTITUTABLE=1611, SUBSTR2=1612, SUBSTR4=1613, 
		SUBSTRB=1614, SUBSTRC=1615, SUBTYPE=1616, SUCCESSFUL=1617, SUCCESS=1618, 
		SUMMARY=1619, SUPPLEMENTAL=1620, SUSPEND=1621, SWAP_JOIN_INPUTS=1622, 
		SWITCHOVER=1623, SWITCH=1624, SYNCHRONOUS=1625, SYNC=1626, SYNONYM=1627, 
		SYSASM=1628, SYS_AUDIT=1629, SYSAUX=1630, SYSBACKUP=1631, SYS_CHECKACL=1632, 
		SYS_CHECK_PRIVILEGE=1633, SYS_CONNECT_BY_PATH=1634, SYS_CONTEXT=1635, 
		SYSDATE=1636, SYSDBA=1637, SYS_DBURIGEN=1638, SYSDG=1639, SYS_DL_CURSOR=1640, 
		SYS_DM_RXFORM_CHR=1641, SYS_DM_RXFORM_NUM=1642, SYS_DOM_COMPARE=1643, 
		SYS_DST_PRIM2SEC=1644, SYS_DST_SEC2PRIM=1645, SYS_ET_BFILE_TO_RAW=1646, 
		SYS_ET_BLOB_TO_IMAGE=1647, SYS_ET_IMAGE_TO_BLOB=1648, SYS_ET_RAW_TO_BFILE=1649, 
		SYS_EXTPDTXT=1650, SYS_EXTRACT_UTC=1651, SYS_FBT_INSDEL=1652, SYS_FILTER_ACLS=1653, 
		SYS_FNMATCHES=1654, SYS_FNREPLACE=1655, SYS_GET_ACLIDS=1656, SYS_GET_COL_ACLIDS=1657, 
		SYS_GET_PRIVILEGES=1658, SYS_GETTOKENID=1659, SYS_GETXTIVAL=1660, SYS_GUID=1661, 
		SYSGUID=1662, SYSKM=1663, SYS_MAKE_XMLNODEID=1664, SYS_MAKEXML=1665, SYS_MKXMLATTR=1666, 
		SYS_MKXTI=1667, SYSOBJ=1668, SYS_OP_ADT2BIN=1669, SYS_OP_ADTCONS=1670, 
		SYS_OP_ALSCRVAL=1671, SYS_OP_ATG=1672, SYS_OP_BIN2ADT=1673, SYS_OP_BITVEC=1674, 
		SYS_OP_BL2R=1675, SYS_OP_BLOOM_FILTER_LIST=1676, SYS_OP_BLOOM_FILTER=1677, 
		SYS_OP_C2C=1678, SYS_OP_CAST=1679, SYS_OP_CEG=1680, SYS_OP_CL2C=1681, 
		SYS_OP_COMBINED_HASH=1682, SYS_OP_COMP=1683, SYS_OP_CONVERT=1684, SYS_OP_COUNTCHG=1685, 
		SYS_OP_CSCONV=1686, SYS_OP_CSCONVTEST=1687, SYS_OP_CSR=1688, SYS_OP_CSX_PATCH=1689, 
		SYS_OP_CYCLED_SEQ=1690, SYS_OP_DECOMP=1691, SYS_OP_DESCEND=1692, SYS_OP_DISTINCT=1693, 
		SYS_OP_DRA=1694, SYS_OP_DUMP=1695, SYS_OP_DV_CHECK=1696, SYS_OP_ENFORCE_NOT_NULL=1697, 
		SYSOPER=1698, SYS_OP_EXTRACT=1699, SYS_OP_GROUPING=1700, SYS_OP_GUID=1701, 
		SYS_OP_HASH=1702, SYS_OP_IIX=1703, SYS_OP_ITR=1704, SYS_OP_KEY_VECTOR_CREATE=1705, 
		SYS_OP_KEY_VECTOR_FILTER_LIST=1706, SYS_OP_KEY_VECTOR_FILTER=1707, SYS_OP_KEY_VECTOR_SUCCEEDED=1708, 
		SYS_OP_KEY_VECTOR_USE=1709, SYS_OP_LBID=1710, SYS_OP_LOBLOC2BLOB=1711, 
		SYS_OP_LOBLOC2CLOB=1712, SYS_OP_LOBLOC2ID=1713, SYS_OP_LOBLOC2NCLOB=1714, 
		SYS_OP_LOBLOC2TYP=1715, SYS_OP_LSVI=1716, SYS_OP_LVL=1717, SYS_OP_MAKEOID=1718, 
		SYS_OP_MAP_NONNULL=1719, SYS_OP_MSR=1720, SYS_OP_NICOMBINE=1721, SYS_OP_NIEXTRACT=1722, 
		SYS_OP_NII=1723, SYS_OP_NIX=1724, SYS_OP_NOEXPAND=1725, SYS_OP_NTCIMG=1726, 
		SYS_OP_NUMTORAW=1727, SYS_OP_OIDVALUE=1728, SYS_OP_OPNSIZE=1729, SYS_OP_PAR_1=1730, 
		SYS_OP_PARGID_1=1731, SYS_OP_PARGID=1732, SYS_OP_PAR=1733, SYS_OP_PART_ID=1734, 
		SYS_OP_PIVOT=1735, SYS_OP_R2O=1736, SYS_OP_RAWTONUM=1737, SYS_OP_RDTM=1738, 
		SYS_OP_REF=1739, SYS_OP_RMTD=1740, SYS_OP_ROWIDTOOBJ=1741, SYS_OP_RPB=1742, 
		SYS_OPTLOBPRBSC=1743, SYS_OP_TOSETID=1744, SYS_OP_TPR=1745, SYS_OP_TRTB=1746, 
		SYS_OPTXICMP=1747, SYS_OPTXQCASTASNQ=1748, SYS_OP_UNDESCEND=1749, SYS_OP_VECAND=1750, 
		SYS_OP_VECBIT=1751, SYS_OP_VECOR=1752, SYS_OP_VECXOR=1753, SYS_OP_VERSION=1754, 
		SYS_OP_VREF=1755, SYS_OP_VVD=1756, SYS_OP_XMLCONS_FOR_CSX=1757, SYS_OP_XPTHATG=1758, 
		SYS_OP_XPTHIDX=1759, SYS_OP_XPTHOP=1760, SYS_OP_XTXT2SQLT=1761, SYS_OP_ZONE_ID=1762, 
		SYS_ORDERKEY_DEPTH=1763, SYS_ORDERKEY_MAXCHILD=1764, SYS_ORDERKEY_PARENT=1765, 
		SYS_PARALLEL_TXN=1766, SYS_PATHID_IS_ATTR=1767, SYS_PATHID_IS_NMSPC=1768, 
		SYS_PATHID_LASTNAME=1769, SYS_PATHID_LASTNMSPC=1770, SYS_PATH_REVERSE=1771, 
		SYS_PXQEXTRACT=1772, SYS_RAW_TO_XSID=1773, SYS_RID_ORDER=1774, SYS_ROW_DELTA=1775, 
		SYS_SC_2_XMLT=1776, SYS_SYNRCIREDO=1777, SYSTEM_DEFINED=1778, SYSTEM=1779, 
		SYSTIMESTAMP=1780, SYS_TYPEID=1781, SYS_UMAKEXML=1782, SYS_XMLANALYZE=1783, 
		SYS_XMLCONTAINS=1784, SYS_XMLCONV=1785, SYS_XMLEXNSURI=1786, SYS_XMLGEN=1787, 
		SYS_XMLI_LOC_ISNODE=1788, SYS_XMLI_LOC_ISTEXT=1789, SYS_XMLINSTR=1790, 
		SYS_XMLLOCATOR_GETSVAL=1791, SYS_XMLNODEID_GETCID=1792, SYS_XMLNODEID_GETLOCATOR=1793, 
		SYS_XMLNODEID_GETOKEY=1794, SYS_XMLNODEID_GETPATHID=1795, SYS_XMLNODEID_GETPTRID=1796, 
		SYS_XMLNODEID_GETRID=1797, SYS_XMLNODEID_GETSVAL=1798, SYS_XMLNODEID_GETTID=1799, 
		SYS_XMLNODEID=1800, SYS_XMLT_2_SC=1801, SYS_XMLTRANSLATE=1802, SYS_XMLTYPE2SQL=1803, 
		SYS_XQ_ASQLCNV=1804, SYS_XQ_ATOMCNVCHK=1805, SYS_XQBASEURI=1806, SYS_XQCASTABLEERRH=1807, 
		SYS_XQCODEP2STR=1808, SYS_XQCODEPEQ=1809, SYS_XQCON2SEQ=1810, SYS_XQCONCAT=1811, 
		SYS_XQDELETE=1812, SYS_XQDFLTCOLATION=1813, SYS_XQDOC=1814, SYS_XQDOCURI=1815, 
		SYS_XQDURDIV=1816, SYS_XQED4URI=1817, SYS_XQENDSWITH=1818, SYS_XQERRH=1819, 
		SYS_XQERR=1820, SYS_XQESHTMLURI=1821, SYS_XQEXLOBVAL=1822, SYS_XQEXSTWRP=1823, 
		SYS_XQEXTRACT=1824, SYS_XQEXTRREF=1825, SYS_XQEXVAL=1826, SYS_XQFB2STR=1827, 
		SYS_XQFNBOOL=1828, SYS_XQFNCMP=1829, SYS_XQFNDATIM=1830, SYS_XQFNLNAME=1831, 
		SYS_XQFNNM=1832, SYS_XQFNNSURI=1833, SYS_XQFNPREDTRUTH=1834, SYS_XQFNQNM=1835, 
		SYS_XQFNROOT=1836, SYS_XQFORMATNUM=1837, SYS_XQFTCONTAIN=1838, SYS_XQFUNCR=1839, 
		SYS_XQGETCONTENT=1840, SYS_XQINDXOF=1841, SYS_XQINSERT=1842, SYS_XQINSPFX=1843, 
		SYS_XQIRI2URI=1844, SYS_XQLANG=1845, SYS_XQLLNMFRMQNM=1846, SYS_XQMKNODEREF=1847, 
		SYS_XQNILLED=1848, SYS_XQNODENAME=1849, SYS_XQNORMSPACE=1850, SYS_XQNORMUCODE=1851, 
		SYS_XQ_NRNG=1852, SYS_XQNSP4PFX=1853, SYS_XQNSPFRMQNM=1854, SYS_XQPFXFRMQNM=1855, 
		SYS_XQ_PKSQL2XML=1856, SYS_XQPOLYABS=1857, SYS_XQPOLYADD=1858, SYS_XQPOLYCEL=1859, 
		SYS_XQPOLYCSTBL=1860, SYS_XQPOLYCST=1861, SYS_XQPOLYDIV=1862, SYS_XQPOLYFLR=1863, 
		SYS_XQPOLYMOD=1864, SYS_XQPOLYMUL=1865, SYS_XQPOLYRND=1866, SYS_XQPOLYSQRT=1867, 
		SYS_XQPOLYSUB=1868, SYS_XQPOLYUMUS=1869, SYS_XQPOLYUPLS=1870, SYS_XQPOLYVEQ=1871, 
		SYS_XQPOLYVGE=1872, SYS_XQPOLYVGT=1873, SYS_XQPOLYVLE=1874, SYS_XQPOLYVLT=1875, 
		SYS_XQPOLYVNE=1876, SYS_XQREF2VAL=1877, SYS_XQRENAME=1878, SYS_XQREPLACE=1879, 
		SYS_XQRESVURI=1880, SYS_XQRNDHALF2EVN=1881, SYS_XQRSLVQNM=1882, SYS_XQRYENVPGET=1883, 
		SYS_XQRYVARGET=1884, SYS_XQRYWRP=1885, SYS_XQSEQ2CON4XC=1886, SYS_XQSEQ2CON=1887, 
		SYS_XQSEQDEEPEQ=1888, SYS_XQSEQINSB=1889, SYS_XQSEQRM=1890, SYS_XQSEQRVS=1891, 
		SYS_XQSEQSUB=1892, SYS_XQSEQTYPMATCH=1893, SYS_XQSTARTSWITH=1894, SYS_XQSTATBURI=1895, 
		SYS_XQSTR2CODEP=1896, SYS_XQSTRJOIN=1897, SYS_XQSUBSTRAFT=1898, SYS_XQSUBSTRBEF=1899, 
		SYS_XQTOKENIZE=1900, SYS_XQTREATAS=1901, SYS_XQ_UPKXML2SQL=1902, SYS_XQXFORM=1903, 
		SYS_XSID_TO_RAW=1904, SYS_ZMAP_FILTER=1905, SYS_ZMAP_REFRESH=1906, TABLE_LOOKUP_BY_NL=1907, 
		TABLESPACE_NO=1908, TABLESPACE=1909, TABLES=1910, TABLE_STATS=1911, TABLE=1912, 
		TABNO=1913, TAG=1914, TANH=1915, TAN=1916, TBLORIDXPARTNUM=1917, TEMPFILE=1918, 
		TEMPLATE=1919, TEMPORARY=1920, TEMP_TABLE=1921, TEST=1922, TEXT=1923, 
		THAN=1924, THEN=1925, THE=1926, THREAD=1927, THROUGH=1928, TIER=1929, 
		TIES=1930, TIMEOUT=1931, TIMESTAMP_LTZ_UNCONSTRAINED=1932, TIMESTAMP=1933, 
		TIMESTAMP_TZ_UNCONSTRAINED=1934, TIMESTAMP_UNCONSTRAINED=1935, TIMES=1936, 
		TIME=1937, TIMEZONE=1938, TIMEZONE_ABBR=1939, TIMEZONE_HOUR=1940, TIMEZONE_MINUTE=1941, 
		TIMEZONE_OFFSET=1942, TIMEZONE_REGION=1943, TIME_ZONE=1944, TIV_GB=1945, 
		TIV_SSF=1946, TO_ACLID=1947, TO_BINARY_DOUBLE=1948, TO_BINARY_FLOAT=1949, 
		TO_BLOB=1950, TO_CLOB=1951, TO_DSINTERVAL=1952, TO_LOB=1953, TO_MULTI_BYTE=1954, 
		TO_NCHAR=1955, TO_NCLOB=1956, TO_NUMBER=1957, TOPLEVEL=1958, TO_SINGLE_BYTE=1959, 
		TO_TIMESTAMP=1960, TO_TIMESTAMP_TZ=1961, TO_TIME=1962, TO_TIME_TZ=1963, 
		TO=1964, TO_YMINTERVAL=1965, TRACE=1966, TRACING=1967, TRACKING=1968, 
		TRAILING=1969, TRANSACTION=1970, TRANSFORM_DISTINCT_AGG=1971, TRANSITIONAL=1972, 
		TRANSITION=1973, TRANSLATE=1974, TRANSLATION=1975, TREAT=1976, TRIGGERS=1977, 
		TRIGGER=1978, TRUE=1979, TRUNCATE=1980, TRUNC=1981, TRUSTED=1982, TRUST=1983, 
		TUNING=1984, TX=1985, TYPES=1986, TYPE=1987, TZ_OFFSET=1988, UB2=1989, 
		UBA=1990, UCS2=1991, UID=1992, UNARCHIVED=1993, UNBOUNDED=1994, UNBOUND=1995, 
		UNCONDITIONAL=1996, UNDER=1997, UNDO=1998, UNDROP=1999, UNIFORM=2000, 
		UNION=2001, UNIQUE=2002, UNISTR=2003, UNLIMITED=2004, UNLOAD=2005, UNLOCK=2006, 
		UNMATCHED=2007, UNNEST_INNERJ_DISTINCT_VIEW=2008, UNNEST_NOSEMIJ_NODISTINCTVIEW=2009, 
		UNNEST_SEMIJ_VIEW=2010, UNNEST=2011, UNPACKED=2012, UNPIVOT=2013, UNPLUG=2014, 
		UNPROTECTED=2015, UNQUIESCE=2016, UNRECOVERABLE=2017, UNRESTRICTED=2018, 
		UNSUBSCRIBE=2019, UNTIL=2020, UNUSABLE=2021, UNUSED=2022, UPDATABLE=2023, 
		UPDATED=2024, UPDATE=2025, UPDATEXML=2026, UPD_INDEXES=2027, UPD_JOININDEX=2028, 
		UPGRADE=2029, UPPER=2030, UPSERT=2031, UROWID=2032, USABLE=2033, USAGE=2034, 
		USE_ANTI=2035, USE_CONCAT=2036, USE_CUBE=2037, USE_HASH_AGGREGATION=2038, 
		USE_HASH_GBY_FOR_PUSHDOWN=2039, USE_HASH=2040, USE_HIDDEN_PARTITIONS=2041, 
		USE_INVISIBLE_INDEXES=2042, USE_MERGE_CARTESIAN=2043, USE_MERGE=2044, 
		USE_NL=2045, USE_NL_WITH_INDEX=2046, USE_PRIVATE_OUTLINES=2047, USER_DATA=2048, 
		USER_DEFINED=2049, USERENV=2050, USERGROUP=2051, USER_RECYCLEBIN=2052, 
		USERS=2053, USER_TABLESPACES=2054, USER=2055, USE_SEMI=2056, USE_STORED_OUTLINES=2057, 
		USE_TTT_FOR_GSETS=2058, USE=2059, USE_VECTOR_AGGREGATION=2060, USE_WEAK_NAME_RESL=2061, 
		USING_NO_EXPAND=2062, USING=2063, UTF16BE=2064, UTF16LE=2065, UTF32=2066, 
		UTF8=2067, V1=2068, V2=2069, VALIDATE=2070, VALIDATION=2071, VALID_TIME_END=2072, 
		VALUES=2073, VALUE=2074, VARCHAR2=2075, VARCHAR=2076, VARIABLE=2077, VAR_POP=2078, 
		VARRAYS=2079, VARRAY=2080, VAR_SAMP=2081, VARYING=2082, VECTOR_READ_TRACE=2083, 
		VECTOR_READ=2084, VECTOR_TRANSFORM_DIMS=2085, VECTOR_TRANSFORM_FACT=2086, 
		VECTOR_TRANSFORM=2087, VERIFIER=2088, VERIFY=2089, VERSIONING=2090, VERSIONS_ENDSCN=2091, 
		VERSIONS_ENDTIME=2092, VERSIONS_OPERATION=2093, VERSIONS_STARTSCN=2094, 
		VERSIONS_STARTTIME=2095, VERSIONS=2096, VERSIONS_XID=2097, VERSION=2098, 
		VIEW=2099, VIOLATION=2100, VIRTUAL=2101, VISIBILITY=2102, VISIBLE=2103, 
		VOLUME=2104, VSIZE=2105, WAIT=2106, WALLET=2107, WARNING=2108, WEEKS=2109, 
		WEEK=2110, WELLFORMED=2111, WHENEVER=2112, WHEN=2113, WHERE=2114, WHILE=2115, 
		WHITESPACE=2116, WIDTH_BUCKET=2117, WITHIN=2118, WITHOUT=2119, WITH_PLSQL=2120, 
		WITH=2121, WORK=2122, WRAPPED=2123, WRAPPER=2124, WRITE=2125, XDB_FASTPATH_INSERT=2126, 
		XDB=2127, X_DYN_PRUNE=2128, XID=2129, XML2OBJECT=2130, XMLAGG=2131, XMLATTRIBUTES=2132, 
		XMLCAST=2133, XMLCDATA=2134, XMLCOLATTVAL=2135, XMLCOMMENT=2136, XMLCONCAT=2137, 
		XMLDIFF=2138, XML_DML_RWT_STMT=2139, XMLELEMENT=2140, XMLEXISTS2=2141, 
		XMLEXISTS=2142, XMLFOREST=2143, XMLINDEX=2144, XMLINDEX_REWRITE_IN_SELECT=2145, 
		XMLINDEX_REWRITE=2146, XMLINDEX_SEL_IDX_TBL=2147, XMLISNODE=2148, XMLISVALID=2149, 
		XMLNAMESPACES=2150, XMLPARSE=2151, XMLPATCH=2152, XMLPI=2153, XMLQUERYVAL=2154, 
		XMLQUERY=2155, XMLROOT=2156, XMLSCHEMA=2157, XMLSERIALIZE=2158, XMLTABLE=2159, 
		XMLTRANSFORMBLOB=2160, XMLTRANSFORM=2161, XMLTYPE=2162, XML=2163, XPATHTABLE=2164, 
		XS_SYS_CONTEXT=2165, XS=2166, XTRANSPORT=2167, YEARS=2168, YEAR=2169, 
		YES=2170, YMINTERVAL_UNCONSTRAINED=2171, ZONEMAP=2172, ZONE=2173, PREDICTION=2174, 
		PREDICTION_BOUNDS=2175, PREDICTION_COST=2176, PREDICTION_DETAILS=2177, 
		PREDICTION_PROBABILITY=2178, PREDICTION_SET=2179, CUME_DIST=2180, DENSE_RANK=2181, 
		LISTAGG=2182, PERCENT_RANK=2183, PERCENTILE_CONT=2184, PERCENTILE_DISC=2185, 
		RANK=2186, AVG=2187, CORR=2188, COVAR_=2189, DECODE=2190, LAG=2191, LEAD=2192, 
		MAX=2193, MEDIAN=2194, MIN=2195, NTILE=2196, NVL=2197, RATIO_TO_REPORT=2198, 
		REGR_=2199, ROUND=2200, ROW_NUMBER=2201, SUBSTR=2202, TO_CHAR=2203, TRIM=2204, 
		SUM=2205, STDDEV=2206, VAR_=2207, VARIANCE=2208, LEAST=2209, GREATEST=2210, 
		TO_DATE=2211, NATIONAL_CHAR_STRING_LIT=2212, BIT_STRING_LIT=2213, HEX_STRING_LIT=2214, 
		DOUBLE_PERIOD=2215, PERIOD=2216, UNSIGNED_INTEGER=2217, APPROXIMATE_NUM_LIT=2218, 
		CHAR_STRING=2219, DELIMITED_ID=2220, PERCENT=2221, AMPERSAND=2222, LEFT_PAREN=2223, 
		RIGHT_PAREN=2224, DOUBLE_ASTERISK=2225, ASTERISK=2226, PLUS_SIGN=2227, 
		MINUS_SIGN=2228, COMMA=2229, SOLIDUS=2230, AT_SIGN=2231, ASSIGN_OP=2232, 
		BINDVAR=2233, NOT_EQUAL_OP=2234, CARRET_OPERATOR_PART=2235, TILDE_OPERATOR_PART=2236, 
		EXCLAMATION_OPERATOR_PART=2237, GREATER_THAN_OP=2238, LESS_THAN_OP=2239, 
		COLON=2240, SEMICOLON=2241, BAR=2242, EQUALS_OP=2243, LEFT_BRACKET=2244, 
		RIGHT_BRACKET=2245, INTRODUCER=2246, SINGLE_LINE_COMMENT=2247, MULTI_LINE_COMMENT=2248, 
		REGULAR_ID=2249, SPACES=2250;
	public static final int
		RULE_program = 0, RULE_root = 1, RULE_statement = 2, RULE_create_table = 3, 
		RULE_table_name = 4, RULE_identifier = 5, RULE_char_set_name = 6, RULE_id_expression = 7, 
		RULE_relational_table = 8, RULE_relational_property = 9, RULE_column_definition = 10, 
		RULE_default_value = 11, RULE_column_name = 12, RULE_datatype = 13, RULE_inline_constraint = 14, 
		RULE_constraint_state = 15, RULE_precision_part = 16, RULE_native_datatype_element = 17, 
		RULE_numeric = 18, RULE_regular_id = 19;
	private static String[] makeRuleNames() {
		return new String[] {
			"program", "root", "statement", "create_table", "table_name", "identifier", 
			"char_set_name", "id_expression", "relational_table", "relational_property", 
			"column_definition", "default_value", "column_name", "datatype", "inline_constraint", 
			"constraint_state", "precision_part", "native_datatype_element", "numeric", 
			"regular_id"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, "'ABORT'", "'ABS'", "'ACCESS'", "'ACCESSED'", "'ACCOUNT'", "'ACL'", 
			"'ACOS'", "'ACTION'", "'ACTIONS'", "'ACTIVATE'", "'ACTIVE'", "'ACTIVE_COMPONENT'", 
			"'ACTIVE_DATA'", "'ACTIVE_FUNCTION'", "'ACTIVE_TAG'", "'ACTIVITY'", "'ADAPTIVE_PLAN'", 
			"'ADD'", "'ADD_COLUMN'", "'ADD_GROUP'", "'ADD_MONTHS'", "'ADJ_DATE'", 
			"'ADMIN'", "'ADMINISTER'", "'ADMINISTRATOR'", "'ADVANCED'", "'ADVISE'", 
			"'ADVISOR'", "'AFD_DISKSTRING'", "'AFTER'", "'AGENT'", "'AGGREGATE'", 
			"'A'", "'ALIAS'", "'ALL'", "'ALLOCATE'", "'ALLOW'", "'ALL_ROWS'", "'ALTER'", 
			"'ALWAYS'", "'ANALYZE'", "'ANCILLARY'", "'AND'", "'AND_EQUAL'", "'ANOMALY'", 
			"'ANSI_REARCH'", "'ANTIJOIN'", "'ANY'", "'ANYSCHEMA'", "'APPEND'", "'APPENDCHILDXML'", 
			"'APPEND_VALUES'", "'APPLICATION'", "'APPLY'", "'APPROX_COUNT_DISTINCT'", 
			"'ARCHIVAL'", "'ARCHIVE'", "'ARCHIVED'", "'ARCHIVELOG'", "'ARRAY'", "'AS'", 
			"'ASC'", "'ASCII'", "'ASCIISTR'", "'ASIN'", "'ASIS'", "'ASSEMBLY'", "'ASSIGN'", 
			"'ASSOCIATE'", "'ASYNC'", "'ASYNCHRONOUS'", "'ATAN2'", "'ATAN'", "'AT'", 
			"'ATTRIBUTE'", "'ATTRIBUTES'", "'AUDIT'", "'AUTHENTICATED'", "'AUTHENTICATION'", 
			"'AUTHID'", "'AUTHORIZATION'", "'AUTOALLOCATE'", "'AUTO'", "'AUTOBACKUP'", 
			"'AUTOEXTEND'", "'AUTO_LOGIN'", "'AUTOMATIC'", "'AUTONOMOUS_TRANSACTION'", 
			"'AUTO_REOPTIMIZE'", "'AVAILABILITY'", "'AVRO'", "'BACKGROUND'", "'BACKUP'", 
			"'BACKUPSET'", "'BASIC'", "'BASICFILE'", "'BATCH'", "'BATCHSIZE'", "'BATCH_TABLE_ACCESS_BY_ROWID'", 
			"'BECOME'", "'BEFORE'", "'BEGIN'", "'BEGINNING'", "'BEGIN_OUTLINE_DATA'", 
			"'BEHALF'", "'BEQUEATH'", "'BETWEEN'", "'BFILE'", "'BFILENAME'", "'BIGFILE'", 
			"'BINARY'", "'BINARY_DOUBLE'", "'BINARY_DOUBLE_INFINITY'", "'BINARY_DOUBLE_NAN'", 
			"'BINARY_FLOAT'", "'BINARY_FLOAT_INFINITY'", "'BINARY_FLOAT_NAN'", "'BINARY_INTEGER'", 
			"'BIND_AWARE'", "'BINDING'", "'BIN_TO_NUM'", "'BITAND'", "'BITMAP_AND'", 
			"'BITMAP'", "'BITMAPS'", "'BITMAP_TREE'", "'BITS'", "'BLOB'", "'BLOCK'", 
			"'BLOCK_RANGE'", "'BLOCKS'", "'BLOCKSIZE'", "'BODY'", "'BOOLEAN'", "'BOTH'", 
			"'BOUND'", "'BRANCH'", "'BREADTH'", "'BROADCAST'", "'BSON'", "'BUFFER'", 
			"'BUFFER_CACHE'", "'BUFFER_POOL'", "'BUILD'", "'BULK'", "'BY'", "'BYPASS_RECURSIVE_CHECK'", 
			"'BYPASS_UJVC'", "'BYTE'", "'CACHE'", "'CACHE_CB'", "'CACHE_INSTANCES'", 
			"'CACHE_TEMP_TABLE'", "'CACHING'", "'CALCULATED'", "'CALLBACK'", "'CALL'", 
			"'CANCEL'", "'CANONICAL'", "'CAPACITY'", "'CARDINALITY'", "'CASCADE'", 
			"'CASE'", "'CAST'", "'CATEGORY'", "'CDB$DEFAULT'", "'CEIL'", "'CELL_FLASH_CACHE'", 
			"'CERTIFICATE'", "'CFILE'", "'CHAINED'", "'CHANGE'", "'CHANGETRACKING'", 
			"'CHANGE_DUPKEY_ERROR_INDEX'", "'CHARACTER'", "'CHAR'", "'CHAR_CS'", 
			"'CHARTOROWID'", "'CHECK_ACL_REWRITE'", "'CHECK'", "'CHECKPOINT'", "'CHILD'", 
			"'CHOOSE'", "'CHR'", "'CHUNK'", "'CLASS'", "'CLASSIFIER'", "'CLEANUP'", 
			"'CLEAR'", "'C'", "'CLIENT'", "'CLOB'", "'CLONE'", "'CLOSE_CACHED_OPEN_CURSORS'", 
			"'CLOSE'", "'CLUSTER_BY_ROWID'", "'CLUSTER'", "'CLUSTER_DETAILS'", "'CLUSTER_DISTANCE'", 
			"'CLUSTER_ID'", "'CLUSTERING'", "'CLUSTERING_FACTOR'", "'CLUSTER_PROBABILITY'", 
			"'CLUSTER_SET'", "'COALESCE'", "'COALESCE_SQ'", "'COARSE'", "'CO_AUTH_IND'", 
			"'COLD'", "'COLLECT'", "'COLUMNAR'", "'COLUMN_AUTH_INDICATOR'", "'COLUMN'", 
			"'COLUMNS'", "'COLUMN_STATS'", "'COLUMN_VALUE'", "'COMMENT'", "'COMMIT'", 
			"'COMMITTED'", "'COMMON_DATA'", "'COMPACT'", "'COMPATIBILITY'", "'COMPILE'", 
			"'COMPLETE'", "'COMPLIANCE'", "'COMPONENT'", "'COMPONENTS'", "'COMPOSE'", 
			"'COMPOSITE'", "'COMPOSITE_LIMIT'", "'COMPOUND'", "'COMPRESS'", "'COMPUTE'", 
			"'CONCAT'", "'CON_DBID_TO_ID'", "'CONDITIONAL'", "'CONDITION'", "'CONFIRM'", 
			"'CONFORMING'", "'CON_GUID_TO_ID'", "'CON_ID'", "'CON_NAME_TO_ID'", "'CONNECT_BY_CB_WHR_ONLY'", 
			"'CONNECT_BY_COMBINE_SW'", "'CONNECT_BY_COST_BASED'", "'CONNECT_BY_ELIM_DUPS'", 
			"'CONNECT_BY_FILTERING'", "'CONNECT_BY_ISCYCLE'", "'CONNECT_BY_ISLEAF'", 
			"'CONNECT_BY_ROOT'", "'CONNECT'", "'CONNECT_TIME'", "'CONSIDER'", "'CONSISTENT'", 
			"'CONSTANT'", "'CONST'", "'CONSTRAINT'", "'CONSTRAINTS'", "'CONSTRUCTOR'", 
			"'CONTAINER'", "'CONTAINER_DATA'", "'CONTAINERS'", "'CONTENT'", "'CONTENTS'", 
			"'CONTEXT'", "'CONTINUE'", "'CONTROLFILE'", "'CON_UID_TO_ID'", "'CONVERT'", 
			"'COOKIE'", "'COPY'", "'CORR_K'", "'CORR_S'", "'CORRUPTION'", "'CORRUPT_XID_ALL'", 
			"'CORRUPT_XID'", "'COS'", "'COSH'", "'COST'", "'COST_XML_QUERY_REWRITE'", 
			"'COUNT'", "'COVAR_POP'", "'COVAR_SAMP'", "'CPU_COSTING'", "'CPU_PER_CALL'", 
			"'CPU_PER_SESSION'", "'CRASH'", "'CREATE'", "'CREATE_FILE_DEST'", "'CREATE_STORED_OUTLINES'", 
			"'CREATION'", "'CREDENTIAL'", "'CRITICAL'", "'CROSS'", "'CROSSEDITION'", 
			"'CSCONVERT'", "'CUBE_AJ'", "'CUBE'", "'CUBE_GB'", "'CUBE_SJ'", "'CUME_DISTM'", 
			"'CURRENT'", "'CURRENT_DATE'", "'CURRENT_SCHEMA'", "'CURRENT_TIME'", 
			"'CURRENT_TIMESTAMP'", "'CURRENT_USER'", "'CURRENTV'", "'CURSOR'", "'CURSOR_SHARING_EXACT'", 
			"'CURSOR_SPECIFIC_SEGMENT'", "'CUSTOMDATUM'", "'CV'", "'CYCLE'", "'DANGLING'", 
			"'DATABASE'", "'DATA'", "'DATAFILE'", "'DATAFILES'", "'DATAGUARDCONFIG'", 
			"'DATAMOVEMENT'", "'DATAOBJNO'", "'DATAOBJ_TO_MAT_PARTITION'", "'DATAOBJ_TO_PARTITION'", 
			"'DATAPUMP'", "'DATA_SECURITY_REWRITE_LIMIT'", "'DATE'", "'DATE_MODE'", 
			"'DAY'", "'DAYS'", "'DBA'", "'DBA_RECYCLEBIN'", "'DBMS_STATS'", "'DB_ROLE_CHANGE'", 
			"'DBTIMEZONE'", "'DB_UNIQUE_NAME'", "'DB_VERSION'", "'DDL'", "'DEALLOCATE'", 
			"'DEBUG'", "'DEBUGGER'", "'DEC'", "'DECIMAL'", "'DECLARE'", "'DECOMPOSE'", 
			"'DECORRELATE'", "'DECR'", "'DECREMENT'", "'DECRYPT'", "'DEDUPLICATE'", 
			"'DEFAULT'", "'DEFAULTS'", "'DEFERRABLE'", "'DEFERRED'", "'DEFINED'", 
			"'DEFINE'", "'DEFINER'", "'DEGREE'", "'DELAY'", "'DELEGATE'", "'DELETE_ALL'", 
			"'DELETE'", "'DELETEXML'", "'DEMAND'", "'DENSE_RANKM'", "'DEPENDENT'", 
			"'DEPTH'", "'DEQUEUE'", "'DEREF'", "'DEREF_NO_REWRITE'", "'DESC'", "'DESTROY'", 
			"'DETACHED'", "'DETERMINES'", "'DETERMINISTIC'", "'DICTIONARY'", "'DIMENSION'", 
			"'DIMENSIONS'", "'DIRECT_LOAD'", "'DIRECTORY'", "'DIRECT_PATH'", "'DISABLE_ALL'", 
			"'DISABLE'", "'DISABLE_PARALLEL_DML'", "'DISABLE_PRESET'", "'DISABLE_RPKE'", 
			"'DISALLOW'", "'DISASSOCIATE'", "'DISCARD'", "'DISCONNECT'", "'DISK'", 
			"'DISKGROUP'", "''+ DISKGROUP'", "'DISKS'", "'DISMOUNT'", "'DISTINCT'", 
			"'DISTINGUISHED'", "'DISTRIBUTED'", "'DISTRIBUTE'", "'DML'", "'DML_UPDATE'", 
			"'DOCFIDELITY'", "'DOCUMENT'", "'DOMAIN_INDEX_FILTER'", "'DOMAIN_INDEX_NO_SORT'", 
			"'DOMAIN_INDEX_SORT'", "'DOUBLE'", "'DOWNGRADE'", "'DRIVING_SITE'", "'DROP_COLUMN'", 
			"'DROP'", "'DROP_GROUP'", "'DSINTERVAL_UNCONSTRAINED'", "'DST_UPGRADE_INSERT_CONV'", 
			"'DUMP'", "'DUMPSET'", "'DUPLICATE'", "'DV'", "'DYNAMIC'", "'DYNAMIC_SAMPLING'", 
			"'DYNAMIC_SAMPLING_EST_CDN'", "'EACH'", "'EDITIONABLE'", "'EDITION'", 
			"'EDITIONING'", "'EDITIONS'", "'ELEMENT'", "'ELIM_GROUPBY'", "'ELIMINATE_JOIN'", 
			"'ELIMINATE_OBY'", "'ELIMINATE_OUTER_JOIN'", "'ELSE'", "'ELSIF'", "'EM'", 
			"'EMPTY_BLOB'", "'EMPTY_CLOB'", "'EMPTY'", "'ENABLE_ALL'", "'ENABLE'", 
			"'ENABLE_PARALLEL_DML'", "'ENABLE_PRESET'", "'ENCODING'", "'ENCRYPT'", 
			"'ENCRYPTION'", "'END'", "'END_OUTLINE_DATA'", "'ENFORCED'", "'ENFORCE'", 
			"'ENQUEUE'", "'ENTERPRISE'", "'ENTITYESCAPING'", "'ENTRY'", "'EQUIPART'", 
			"'ERR'", "'ERROR_ARGUMENT'", "'ERROR'", "'ERROR_ON_OVERLAP_TIME'", "'ERRORS'", 
			"'ESCAPE'", "'ESTIMATE'", "'EVAL'", "'EVALNAME'", "'EVALUATE'", "'EVALUATION'", 
			"'EVENTS'", "'EVERY'", "'EXCEPT'", "'EXCEPTION'", "'EXCEPTION_INIT'", 
			"'EXCEPTIONS'", "'EXCHANGE'", "'EXCLUDE'", "'EXCLUDING'", "'EXCLUSIVE'", 
			"'EXECUTE'", "'EXEMPT'", "'EXISTING'", "'EXISTS'", "'EXISTSNODE'", "'EXIT'", 
			"'EXPAND_GSET_TO_UNION'", "'EXPAND_TABLE'", "'EXP'", "'EXPIRE'", "'EXPLAIN'", 
			"'EXPLOSION'", "'EXPORT'", "'EXPR_CORR_CHECK'", "'EXPRESS'", "'EXTENDS'", 
			"'EXTENT'", "'EXTENTS'", "'EXTERNAL'", "'EXTERNALLY'", "'EXTRACTCLOBXML'", 
			"'EXTRACT'", "'EXTRACTVALUE'", "'EXTRA'", "'FACILITY'", "'FACT'", "'FACTOR'", 
			"'FACTORIZE_JOIN'", "'FAILED'", "'FAILED_LOGIN_ATTEMPTS'", "'FAILGROUP'", 
			"'FAILOVER'", "'FAILURE'", "'FALSE'", "'FAMILY'", "'FAR'", "'FAST'", 
			"'FASTSTART'", "'FBTSCAN'", "'FEATURE_DETAILS'", "'FEATURE_ID'", "'FEATURE_SET'", 
			"'FEATURE_VALUE'", "'FETCH'", "'FILE'", "'FILE_NAME_CONVERT'", "'FILESYSTEM_LIKE_LOGGING'", 
			"'FILTER'", "'FINAL'", "'FINE'", "'FINISH'", "'FIRST'", "'FIRSTM'", "'FIRST_ROWS'", 
			"'FIRST_VALUE'", "'FIXED_VIEW_DATA'", "'FLAGGER'", "'FLASHBACK'", "'FLASH_CACHE'", 
			"'FLOAT'", "'FLOB'", "'FLOOR'", "'FLUSH'", "'FOLDER'", "'FOLLOWING'", 
			"'FOLLOWS'", "'FORALL'", "'FORCE'", "'FORCE_XML_QUERY_REWRITE'", "'FOREIGN'", 
			"'FOREVER'", "'FOR'", "'FORMAT'", "'FORWARD'", "'FRAGMENT_NUMBER'", "'FREELIST'", 
			"'FREELISTS'", "'FREEPOOLS'", "'FRESH'", "'FROM'", "'FROM_TZ'", "'FULL'", 
			"'FULL_OUTER_JOIN_TO_OUTER'", "'FUNCTION'", "'FUNCTIONS'", "'GATHER_OPTIMIZER_STATISTICS'", 
			"'GATHER_PLAN_STATISTICS'", "'GBY_CONC_ROLLUP'", "'GBY_PUSHDOWN'", "'GENERATED'", 
			"'GET'", "'GLOBAL'", "'GLOBALLY'", "'GLOBAL_NAME'", "'GLOBAL_TOPIC_ENABLED'", 
			"'GOTO'", "'GRANT'", "'GROUP_BY'", "'GROUP'", "'GROUP_ID'", "'GROUPING'", 
			"'GROUPING_ID'", "'GROUPS'", "'GUARANTEED'", "'GUARANTEE'", "'GUARD'", 
			"'HASH_AJ'", "'HASH'", "'HASHKEYS'", "'HASH_SJ'", "'HAVING'", "'HEADER'", 
			"'HEAP'", "'HELP'", "'HEXTORAW'", "'HEXTOREF'", "'HIDDEN'", "'HIDE'", 
			"'HIERARCHY'", "'HIGH'", "'HINTSET_BEGIN'", "'HINTSET_END'", "'HOT'", 
			"'HOUR'", "'HWM_BROKERED'", "'HYBRID'", "'IDENTIFIED'", "'IDENTIFIER'", 
			"'IDENTITY'", "'IDGENERATORS'", "'ID'", "'IDLE_TIME'", "'IF'", "'IGNORE'", 
			"'IGNORE_OPTIM_EMBEDDED_HINTS'", "'IGNORE_ROW_ON_DUPKEY_INDEX'", "'IGNORE_WHERE_CLAUSE'", 
			"'ILM'", "'IMMEDIATE'", "'IMPACT'", "'IMPORT'", "'INACTIVE'", "'INCLUDE'", 
			"'INCLUDE_VERSION'", "'INCLUDING'", "'INCREMENTAL'", "'INCREMENT'", "'INCR'", 
			"'INDENT'", "'INDEX_ASC'", "'INDEX_COMBINE'", "'INDEX_DESC'", "'INDEXED'", 
			"'INDEXES'", "'INDEX_FFS'", "'INDEX_FILTER'", "'INDEX'", "'INDEXING'", 
			"'INDEX_JOIN'", "'INDEX_ROWS'", "'INDEX_RRS'", "'INDEX_RS_ASC'", "'INDEX_RS_DESC'", 
			"'INDEX_RS'", "'INDEX_SCAN'", "'INDEX_SKIP_SCAN'", "'INDEX_SS_ASC'", 
			"'INDEX_SS_DESC'", "'INDEX_SS'", "'INDEX_STATS'", "'INDEXTYPE'", "'INDEXTYPES'", 
			"'INDICATOR'", "'INDICES'", "'INFINITE'", "'INFORMATIONAL'", "'INHERIT'", 
			"'IN'", "'INITCAP'", "'INITIAL'", "'INITIALIZED'", "'INITIALLY'", "'INITRANS'", 
			"'INLINE'", "'INLINE_XMLTYPE_NT'", "'INMEMORY'", "'IN_MEMORY_METADATA'", 
			"'INMEMORY_PRUNING'", "'INNER'", "'INOUT'", "'INPLACE'", "'INSERTCHILDXMLAFTER'", 
			"'INSERTCHILDXMLBEFORE'", "'INSERTCHILDXML'", "'INSERT'", "'INSERTXMLAFTER'", 
			"'INSERTXMLBEFORE'", "'INSTANCE'", "'INSTANCES'", "'INSTANTIABLE'", "'INSTANTLY'", 
			"'INSTEAD'", "'INSTR2'", "'INSTR4'", "'INSTRB'", "'INSTRC'", "'INSTR'", 
			"'INTEGER'", "'INTERLEAVED'", "'INTERMEDIATE'", "'INTERNAL_CONVERT'", 
			"'INTERNAL_USE'", "'INTERPRETED'", "'INTERSECT'", "'INTERVAL'", "'INT'", 
			"'INTO'", "'INVALIDATE'", "'INVISIBLE'", "'IN_XQUERY'", "'IS'", "'ISOLATION'", 
			"'ISOLATION_LEVEL'", "'ITERATE'", "'ITERATION_NUMBER'", "'JAVA'", "'JOB'", 
			"'JOIN'", "'JSON_ARRAYAGG'", "'JSON_ARRAY'", "'JSON_EQUAL'", "'JSON_EXISTS2'", 
			"'JSON_EXISTS'", "'JSONGET'", "'JSON'", "'JSON_OBJECTAGG'", "'JSON_OBJECT'", 
			"'JSONPARSE'", "'JSON_QUERY'", "'JSON_SERIALIZE'", "'JSON_TABLE'", "'JSON_TEXTCONTAINS2'", 
			"'JSON_TEXTCONTAINS'", "'JSON_VALUE'", "'KEEP_DUPLICATES'", "'KEEP'", 
			"'KERBEROS'", "'KEY'", "'KEY_LENGTH'", "'KEYSIZE'", "'KEYS'", "'KEYSTORE'", 
			"'KILL'", "'LABEL'", "'LANGUAGE'", "'LAST_DAY'", "'LAST'", "'LAST_VALUE'", 
			"'LATERAL'", "'LAX'", "'LAYER'", "'LDAP_REGISTRATION_ENABLED'", "'LDAP_REGISTRATION'", 
			"'LDAP_REG_SYNC_INTERVAL'", "'LEADING'", "'LEFT'", "'LENGTH2'", "'LENGTH4'", 
			"'LENGTHB'", "'LENGTHC'", "'LENGTH'", "'LESS'", "'LEVEL'", "'LEVELS'", 
			"'LIBRARY'", "'LIFECYCLE'", "'LIFE'", "'LIFETIME'", "'LIKE2'", "'LIKE4'", 
			"'LIKEC'", "'LIKE_EXPAND'", "'LIKE'", "'LIMIT'", "'LINEAR'", "'LINK'", 
			"'LIST'", "'LN'", "'LNNVL'", "'LOAD'", "'LOB'", "'LOBNVL'", "'LOBS'", 
			"'LOCAL_INDEXES'", "'LOCAL'", "'LOCALTIME'", "'LOCALTIMESTAMP'", "'LOCATION'", 
			"'LOCATOR'", "'LOCKED'", "'LOCKING'", "'LOCK'", "'LOGFILE'", "'LOGFILES'", 
			"'LOGGING'", "'LOGICAL'", "'LOGICAL_READS_PER_CALL'", "'LOGICAL_READS_PER_SESSION'", 
			"'LOG'", "'LOGMINING'", "'LOGOFF'", "'LOGON'", "'LOG_READ_ONLY_VIOLATIONS'", 
			"'LONG'", "'LOOP'", "'LOWER'", "'LOW'", "'LPAD'", "'LTRIM'", "'MAIN'", 
			"'MAKE_REF'", "'MANAGED'", "'MANAGE'", "'MANAGEMENT'", "'MANAGER'", "'MANUAL'", 
			"'MAP'", "'MAPPING'", "'MASTER'", "'MATCHED'", "'MATCHES'", "'MATCH'", 
			"'MATCH_NUMBER'", "'MATCH_RECOGNIZE'", "'MATERIALIZED'", "'MATERIALIZE'", 
			"'MAXARCHLOGS'", "'MAXDATAFILES'", "'MAXEXTENTS'", "'MAXIMIZE'", "'MAXINSTANCES'", 
			"'MAXLOGFILES'", "'MAXLOGHISTORY'", "'MAXLOGMEMBERS'", "'MAX_SHARED_TEMP_SIZE'", 
			"'MAXSIZE'", "'MAXTRANS'", "'MAXVALUE'", "'MEASURE'", "'MEASURES'", "'MEDIUM'", 
			"'MEMBER'", "'MEMCOMPRESS'", "'MEMORY'", "'MERGE$ACTIONS'", "'MERGE_AJ'", 
			"'MERGE_CONST_ON'", "'MERGE'", "'MERGE_SJ'", "'METADATA'", "'METHOD'", 
			"'MIGRATE'", "'MIGRATION'", "'MINEXTENTS'", "'MINIMIZE'", "'MINIMUM'", 
			"'MINING'", "'MINUS'", "'MINUS_NULL'", "'MINUTE'", "'MINVALUE'", "'MIRRORCOLD'", 
			"'MIRRORHOT'", "'MIRROR'", "'MLSLABEL'", "'MODEL_COMPILE_SUBQUERY'", 
			"'MODEL_DONTVERIFY_UNIQUENESS'", "'MODEL_DYNAMIC_SUBQUERY'", "'MODEL_MIN_ANALYSIS'", 
			"'MODEL'", "'MODEL_NB'", "'MODEL_NO_ANALYSIS'", "'MODEL_PBY'", "'MODEL_PUSH_REF'", 
			"'MODEL_SV'", "'MODE'", "'MODIFICATION'", "'MODIFY_COLUMN_TYPE'", "'MODIFY'", 
			"'MOD'", "'MODULE'", "'MONITORING'", "'MONITOR'", "'MONTH'", "'MONTHS_BETWEEN'", 
			"'MONTHS'", "'MOUNT'", "'MOUNTPATH'", "'MOVEMENT'", "'MOVE'", "'MULTIDIMENSIONAL'", 
			"'MULTISET'", "'MV_MERGE'", "'NAMED'", "'NAME'", "'NAMESPACE'", "'NAN'", 
			"'NANVL'", "'NATIONAL'", "'NATIVE_FULL_OUTER_JOIN'", "'NATIVE'", "'NATURAL'", 
			"'NATURALN'", "'NAV'", "'NCHAR_CS'", "'NCHAR'", "'NCHR'", "'NCLOB'", 
			"'NEEDED'", "'NEG'", "'NESTED'", "'NESTED_TABLE_FAST_INSERT'", "'NESTED_TABLE_GET_REFS'", 
			"'NESTED_TABLE_ID'", "'NESTED_TABLE_SET_REFS'", "'NESTED_TABLE_SET_SETID'", 
			"'NETWORK'", "'NEVER'", "'NEW'", "'NEW_TIME'", "'NEXT_DAY'", "'NEXT'", 
			"'NL_AJ'", "'NLJ_BATCHING'", "'NLJ_INDEX_FILTER'", "'NLJ_INDEX_SCAN'", 
			"'NLJ_PREFETCH'", "'NLS_CALENDAR'", "'NLS_CHARACTERSET'", "'NLS_CHARSET_DECL_LEN'", 
			"'NLS_CHARSET_ID'", "'NLS_CHARSET_NAME'", "'NLS_COMP'", "'NLS_CURRENCY'", 
			"'NLS_DATE_FORMAT'", "'NLS_DATE_LANGUAGE'", "'NLS_INITCAP'", "'NLS_ISO_CURRENCY'", 
			"'NL_SJ'", "'NLS_LANG'", "'NLS_LANGUAGE'", "'NLS_LENGTH_SEMANTICS'", 
			"'NLS_LOWER'", "'NLS_NCHAR_CONV_EXCP'", "'NLS_NUMERIC_CHARACTERS'", "'NLS_SORT'", 
			"'NLSSORT'", "'NLS_SPECIAL_CHARS'", "'NLS_TERRITORY'", "'NLS_UPPER'", 
			"'NO_ACCESS'", "'NO_ADAPTIVE_PLAN'", "'NO_ANSI_REARCH'", "'NOAPPEND'", 
			"'NOARCHIVELOG'", "'NOAUDIT'", "'NO_AUTO_REOPTIMIZE'", "'NO_BASETABLE_MULTIMV_REWRITE'", 
			"'NO_BATCH_TABLE_ACCESS_BY_ROWID'", "'NO_BIND_AWARE'", "'NO_BUFFER'", 
			"'NOCACHE'", "'NO_CARTESIAN'", "'NO_CHECK_ACL_REWRITE'", "'NO_CLUSTER_BY_ROWID'", 
			"'NO_CLUSTERING'", "'NO_COALESCE_SQ'", "'NO_COMMON_DATA'", "'NOCOMPRESS'", 
			"'NO_CONNECT_BY_CB_WHR_ONLY'", "'NO_CONNECT_BY_COMBINE_SW'", "'NO_CONNECT_BY_COST_BASED'", 
			"'NO_CONNECT_BY_ELIM_DUPS'", "'NO_CONNECT_BY_FILTERING'", "'NOCOPY'", 
			"'NO_COST_XML_QUERY_REWRITE'", "'NO_CPU_COSTING'", "'NOCPU_COSTING'", 
			"'NOCYCLE'", "'NO_DATA_SECURITY_REWRITE'", "'NO_DECORRELATE'", "'NODELAY'", 
			"'NO_DOMAIN_INDEX_FILTER'", "'NO_DST_UPGRADE_INSERT_CONV'", "'NO_ELIM_GROUPBY'", 
			"'NO_ELIMINATE_JOIN'", "'NO_ELIMINATE_OBY'", "'NO_ELIMINATE_OUTER_JOIN'", 
			"'NOENTITYESCAPING'", "'NO_EXPAND_GSET_TO_UNION'", "'NO_EXPAND'", "'NO_EXPAND_TABLE'", 
			"'NO_FACT'", "'NO_FACTORIZE_JOIN'", "'NO_FILTERING'", "'NOFORCE'", "'NO_FULL_OUTER_JOIN_TO_OUTER'", 
			"'NO_GATHER_OPTIMIZER_STATISTICS'", "'NO_GBY_PUSHDOWN'", "'NOGUARANTEE'", 
			"'NO_INDEX_FFS'", "'NO_INDEX'", "'NO_INDEX_SS'", "'NO_INMEMORY'", "'NO_INMEMORY_PRUNING'", 
			"'NOKEEP'", "'NO_LOAD'", "'NOLOCAL'", "'NOLOGGING'", "'NOMAPPING'", "'NOMAXVALUE'", 
			"'NO_MERGE'", "'NOMINIMIZE'", "'NOMINVALUE'", "'NO_MODEL_PUSH_REF'", 
			"'NO_MONITORING'", "'NOMONITORING'", "'NO_MONITOR'", "'NO_MULTIMV_REWRITE'", 
			"'NO_NATIVE_FULL_OUTER_JOIN'", "'NONBLOCKING'", "'NONEDITIONABLE'", "'NONE'", 
			"'NO_NLJ_BATCHING'", "'NO_NLJ_PREFETCH'", "'NO'", "'NONSCHEMA'", "'NO_OBJECT_LINK'", 
			"'NOORDER'", "'NO_ORDER_ROLLUPS'", "'NO_OUTER_JOIN_TO_ANTI'", "'NO_OUTER_JOIN_TO_INNER'", 
			"'NOOVERRIDE'", "'NO_PARALLEL_INDEX'", "'NOPARALLEL_INDEX'", "'NO_PARALLEL'", 
			"'NOPARALLEL'", "'NO_PARTIAL_COMMIT'", "'NO_PARTIAL_JOIN'", "'NO_PARTIAL_ROLLUP_PUSHDOWN'", 
			"'NOPARTITION'", "'NO_PLACE_DISTINCT'", "'NO_PLACE_GROUP_BY'", "'NO_PQ_CONCURRENT_UNION'", 
			"'NO_PQ_MAP'", "'NO_PQ_REPLICATE'", "'NO_PQ_SKEW'", "'NO_PRUNE_GSETS'", 
			"'NO_PULL_PRED'", "'NO_PUSH_PRED'", "'NO_PUSH_SUBQ'", "'NO_PX_FAULT_TOLERANCE'", 
			"'NO_PX_JOIN_FILTER'", "'NO_QKN_BUFF'", "'NO_QUERY_TRANSFORMATION'", 
			"'NO_REF_CASCADE'", "'NORELOCATE'", "'NORELY'", "'NOREPAIR'", "'NOREPLAY'", 
			"'NORESETLOGS'", "'NO_RESULT_CACHE'", "'NOREVERSE'", "'NO_REWRITE'", 
			"'NOREWRITE'", "'NORMAL'", "'NO_ROOT_SW_FOR_LOCAL'", "'NOROWDEPENDENCIES'", 
			"'NOSCHEMACHECK'", "'NOSEGMENT'", "'NO_SEMIJOIN'", "'NO_SEMI_TO_INNER'", 
			"'NO_SET_TO_JOIN'", "'NOSORT'", "'NO_SQL_TRANSLATION'", "'NO_SQL_TUNE'", 
			"'NO_STAR_TRANSFORMATION'", "'NO_STATEMENT_QUEUING'", "'NO_STATS_GSETS'", 
			"'NOSTRICT'", "'NO_SUBQUERY_PRUNING'", "'NO_SUBSTRB_PAD'", "'NO_SWAP_JOIN_INPUTS'", 
			"'NOSWITCH'", "'NO_TABLE_LOOKUP_BY_NL'", "'NO_TEMP_TABLE'", "'NOTHING'", 
			"'NOTIFICATION'", "'NOT'", "'NO_TRANSFORM_DISTINCT_AGG'", "'NO_UNNEST'", 
			"'NO_USE_CUBE'", "'NO_USE_HASH_AGGREGATION'", "'NO_USE_HASH_GBY_FOR_PUSHDOWN'", 
			"'NO_USE_HASH'", "'NO_USE_INVISIBLE_INDEXES'", "'NO_USE_MERGE'", "'NO_USE_NL'", 
			"'NO_USE_VECTOR_AGGREGATION'", "'NOVALIDATE'", "'NO_VECTOR_TRANSFORM_DIMS'", 
			"'NO_VECTOR_TRANSFORM_FACT'", "'NO_VECTOR_TRANSFORM'", "'NOWAIT'", "'NO_XDB_FASTPATH_INSERT'", 
			"'NO_XML_DML_REWRITE'", "'NO_XMLINDEX_REWRITE_IN_SELECT'", "'NO_XMLINDEX_REWRITE'", 
			"'NO_XML_QUERY_REWRITE'", "'NO_ZONEMAP'", "'NTH_VALUE'", "'NULLIF'", 
			"'NULL'", "'NULLS'", "'NUMBER'", "'NUMERIC'", "'NUM_INDEX_KEYS'", "'NUMTODSINTERVAL'", 
			"'NUMTOYMINTERVAL'", "'NVARCHAR2'", "'NVL2'", "'OBJECT2XML'", "'OBJECT'", 
			"'OBJ_ID'", "'OBJNO'", "'OBJNO_REUSE'", "'OCCURENCES'", "'OFFLINE'", 
			"'OFF'", "'OFFSET'", "'OF'", "'OIDINDEX'", "'OID'", "'OLAP'", "'OLD'", 
			"'OLD_PUSH_PRED'", "'OLS'", "'OLTP'", "'OMIT'", "'ONE'", "'ONLINE'", 
			"'ONLINELOG'", "'ONLY'", "'ON'", "'OPAQUE'", "'OPAQUE_TRANSFORM'", "'OPAQUE_XCANONICAL'", 
			"'OPCODE'", "'OPEN'", "'OPERATIONS'", "'OPERATOR'", "'OPT_ESTIMATE'", 
			"'OPTIMAL'", "'OPTIMIZE'", "'OPTIMIZER_FEATURES_ENABLE'", "'OPTIMIZER_GOAL'", 
			"'OPTION'", "'OPT_PARAM'", "'ORA_BRANCH'", "'ORA_CHECK_ACL'", "'ORA_CHECK_PRIVILEGE'", 
			"'ORA_CLUSTERING'", "'ORADATA'", "'ORADEBUG'", "'ORA_DST_AFFECTED'", 
			"'ORA_DST_CONVERT'", "'ORA_DST_ERROR'", "'ORA_GET_ACLIDS'", "'ORA_GET_PRIVILEGES'", 
			"'ORA_HASH'", "'ORA_INVOKING_USERID'", "'ORA_INVOKING_USER'", "'ORA_INVOKING_XS_USER_GUID'", 
			"'ORA_INVOKING_XS_USER'", "'ORA_RAWCOMPARE'", "'ORA_RAWCONCAT'", "'ORA_ROWSCN'", 
			"'ORA_ROWSCN_RAW'", "'ORA_ROWVERSION'", "'ORA_TABVERSION'", "'ORA_WRITE_TIME'", 
			"'ORDERED'", "'ORDERED_PREDICATES'", "'ORDER'", "'ORDINALITY'", "'OR_EXPAND'", 
			"'ORGANIZATION'", "'OR'", "'OR_PREDICATES'", "'OSERROR'", "'OTHER'", 
			"'OUTER_JOIN_TO_ANTI'", "'OUTER_JOIN_TO_INNER'", "'OUTER'", "'OUTLINE_LEAF'", 
			"'OUTLINE'", "'OUT_OF_LINE'", "'OUT'", "'OVERFLOW_NOMOVE'", "'OVERFLOW'", 
			"'OVERLAPS'", "'OVER'", "'OVERRIDING'", "'OWNER'", "'OWNERSHIP'", "'OWN'", 
			"'PACKAGE'", "'PACKAGES'", "'PARALLEL_ENABLE'", "'PARALLEL_INDEX'", "'PARALLEL'", 
			"'PARAMETERFILE'", "'PARAMETERS'", "'PARAM'", "'PARENT'", "'PARITY'", 
			"'PARTIAL_JOIN'", "'PARTIALLY'", "'PARTIAL'", "'PARTIAL_ROLLUP_PUSHDOWN'", 
			"'PARTITION_HASH'", "'PARTITION_LIST'", "'PARTITION'", "'PARTITION_RANGE'", 
			"'PARTITIONS'", "'PART$NUM$INST'", "'PASSING'", "'PASSWORD_GRACE_TIME'", 
			"'PASSWORD_LIFE_TIME'", "'PASSWORD_LOCK_TIME'", "'PASSWORD'", "'PASSWORD_REUSE_MAX'", 
			"'PASSWORD_REUSE_TIME'", "'PASSWORD_VERIFY_FUNCTION'", "'PAST'", "'PATCH'", 
			"'PATH'", "'PATH_PREFIX'", "'PATHS'", "'PATTERN'", "'PBL_HS_BEGIN'", 
			"'PBL_HS_END'", "'PCTFREE'", "'PCTINCREASE'", "'PCTTHRESHOLD'", "'PCTUSED'", 
			"'PCTVERSION'", "'PENDING'", null, null, null, "'PERCENT'", "'PERCENT_RANKM'", 
			null, null, null, "'PERFORMANCE'", "'PERIOD'", "'PERMANENT'", "'PERMISSION'", 
			"'PERMUTE'", "'PER'", "'PFILE'", "'PHYSICAL'", "'PIKEY'", "'PIPELINED'", 
			"'PIPE'", "'PIV_GB'", "'PIVOT'", "'PIV_SSF'", "'PLACE_DISTINCT'", "'PLACE_GROUP_BY'", 
			"'PLAN'", "'PLSCOPE_SETTINGS'", "'PLS_INTEGER'", "'PLSQL_CCFLAGS'", "'PLSQL_CODE_TYPE'", 
			"'PLSQL_DEBUG'", "'PLSQL_OPTIMIZE_LEVEL'", "'PLSQL_WARNINGS'", "'PLUGGABLE'", 
			"'POINT'", "'POLICY'", "'POOL_16K'", "'POOL_2K'", "'POOL_32K'", "'POOL_4K'", 
			"'POOL_8K'", "'POSITIVEN'", "'POSITIVE'", "'POST_TRANSACTION'", "'POWERMULTISET_BY_CARDINALITY'", 
			"'POWERMULTISET'", "'POWER'", "'PQ_CONCURRENT_UNION'", "'PQ_DISTRIBUTE'", 
			"'PQ_DISTRIBUTE_WINDOW'", "'PQ_FILTER'", "'PQ_MAP'", "'PQ_NOMAP'", "'PQ_REPLICATE'", 
			"'PQ_SKEW'", "'PRAGMA'", "'PREBUILT'", "'PRECEDES'", "'PRECEDING'", "'PRECISION'", 
			"'PRECOMPUTE_SUBQUERY'", "'PREDICATE_REORDERS'", "'PRELOAD'", "'PREPARE'", 
			"'PRESENTNNV'", "'PRESENT'", "'PRESENTV'", "'PRESERVE_OID'", "'PRESERVE'", 
			"'PRETTY'", "'PREVIOUS'", "'PREV'", "'PRIMARY'", "'PRINTBLOBTOCLOB'", 
			"'PRIORITY'", "'PRIOR'", "'PRIVATE'", "'PRIVATE_SGA'", "'PRIVILEGED'", 
			"'PRIVILEGE'", "'PRIVILEGES'", "'PROCEDURAL'", "'PROCEDURE'", "'PROCESS'", 
			"'PROFILE'", "'PROGRAM'", "'PROJECT'", "'PROPAGATE'", "'PROTECTED'", 
			"'PROTECTION'", "'PROXY'", "'PRUNING'", "'PUBLIC'", "'PULL_PRED'", "'PURGE'", 
			"'PUSH_PRED'", "'PUSH_SUBQ'", "'PX_FAULT_TOLERANCE'", "'PX_GRANULE'", 
			"'PX_JOIN_FILTER'", "'QB_NAME'", "'QUERY_BLOCK'", "'QUERY'", "'QUEUE_CURR'", 
			"'QUEUE'", "'QUEUE_ROWP'", "'QUIESCE'", "'QUORUM'", "'QUOTA'", "'RAISE'", 
			"'RANDOM_LOCAL'", "'RANDOM'", "'RANGE'", "'RANKM'", "'RAPIDLY'", "'RAW'", 
			"'RAWTOHEX'", "'RAWTONHEX'", "'RBA'", "'RBO_OUTLINE'", "'RDBA'", "'READ'", 
			"'READS'", "'REALM'", "'REAL'", "'REBALANCE'", "'REBUILD'", "'RECORD'", 
			"'RECORDS_PER_BLOCK'", "'RECOVERABLE'", "'RECOVER'", "'RECOVERY'", "'RECYCLEBIN'", 
			"'RECYCLE'", "'REDACTION'", "'REDEFINE'", "'REDO'", "'REDUCED'", "'REDUNDANCY'", 
			"'REF_CASCADE_CURSOR'", "'REFERENCED'", "'REFERENCE'", "'REFERENCES'", 
			"'REFERENCING'", "'REF'", "'REFRESH'", "'REFTOHEX'", "'REGEXP_COUNT'", 
			"'REGEXP_INSTR'", "'REGEXP_LIKE'", "'REGEXP_REPLACE'", "'REGEXP_SUBSTR'", 
			"'REGISTER'", "'REGR_AVGX'", "'REGR_AVGY'", "'REGR_COUNT'", "'REGR_INTERCEPT'", 
			"'REGR_R2'", "'REGR_SLOPE'", "'REGR_SXX'", "'REGR_SXY'", "'REGR_SYY'", 
			"'REGULAR'", "'REJECT'", "'REKEY'", "'RELATIONAL'", "'RELIES_ON'", "'RELOCATE'", 
			"'RELY'", "'REMAINDER'", "'REMOTE_MAPPED'", "'REMOVE'", "'RENAME'", "'REPAIR'", 
			"'REPEAT'", "'REPLACE'", "'REPLICATION'", "'REQUIRED'", "'RESETLOGS'", 
			"'RESET'", "'RESIZE'", "'RESOLVE'", "'RESOLVER'", "'RESOURCE'", "'RESPECT'", 
			"'RESTART'", "'RESTORE_AS_INTERVALS'", "'RESTORE'", "'RESTRICT_ALL_REF_CONS'", 
			"'RESTRICTED'", "'RESTRICT_REFERENCES'", "'RESTRICT'", "'RESULT_CACHE'", 
			"'RESULT'", "'RESUMABLE'", "'RESUME'", "'RETENTION'", "'RETRY_ON_ROW_CHANGE'", 
			"'RETURNING'", "'RETURN'", "'REUSE'", "'REVERSE'", "'REVOKE'", "'REWRITE_OR_ERROR'", 
			"'REWRITE'", "'RIGHT'", "'ROLE'", "'ROLESET'", "'ROLES'", "'ROLLBACK'", 
			"'ROLLING'", "'ROLLUP'", "'ROWDEPENDENCIES'", "'ROWID_MAPPING_TABLE'", 
			"'ROWID'", "'ROWIDTOCHAR'", "'ROWIDTONCHAR'", "'ROW_LENGTH'", "'ROWNUM'", 
			"'ROW'", "'ROWS'", "'RPAD'", "'RTRIM'", "'RULE'", "'RULES'", "'RUNNING'", 
			"'SALT'", "'SAMPLE'", "'SAVE_AS_INTERVALS'", "'SAVEPOINT'", "'SAVE'", 
			"'SB4'", "'SCALE_ROWS'", "'SCALE'", "'SCAN_INSTANCES'", "'SCAN'", "'SCHEDULER'", 
			"'SCHEMACHECK'", "'SCHEMA'", "'SCN_ASCENDING'", "'SCN'", "'SCOPE'", "'SCRUB'", 
			"'SD_ALL'", "'SD_INHIBIT'", "'SDO_GEOM_MBR'", "'SD_SHOW'", "'SEARCH'", 
			"'SECOND'", "'SECRET'", "'SECUREFILE_DBA'", "'SECUREFILE'", "'SECURITY'", 
			"'SEED'", "'SEG_BLOCK'", "'SEG_FILE'", "'SEGMENT'", "'SELECTIVITY'", 
			"'SELECT'", "'SELF'", "'SEMIJOIN_DRIVER'", "'SEMIJOIN'", "'SEMI_TO_INNER'", 
			"'SEQUENCED'", "'SEQUENCE'", "'SEQUENTIAL'", "'SEQ'", "'SERIALIZABLE'", 
			"'SERIALLY_REUSABLE'", "'SERIAL'", "'SERVERERROR'", "'SERVICE_NAME_CONVERT'", 
			"'SERVICES'", "'SESSION_CACHED_CURSORS'", "'SESSION'", "'SESSIONS_PER_USER'", 
			"'SESSIONTIMEZONE'", "'SESSIONTZNAME'", "'SET'", "'SETS'", "'SETTINGS'", 
			"'SET_TO_JOIN'", "'SEVERE'", "'SHARED_POOL'", "'SHARED'", "'SHARE'", 
			"'SHARING'", "'SHELFLIFE'", "'SHOW'", "'SHRINK'", "'SHUTDOWN'", "'SIBLINGS'", 
			"'SID'", "'SIGNAL_COMPONENT'", "'SIGNAL_FUNCTION'", "'SIGN'", "'SIGNTYPE'", 
			"'SIMPLE_INTEGER'", "'SIMPLE'", "'SINGLE'", "'SINGLETASK'", "'SINH'", 
			"'SIN'", "'SIZE'", "'SKIP_EXT_OPTIMIZER'", "'SKIP'", "'SKIP_UNQ_UNUSABLE_IDX'", 
			"'SKIP_UNUSABLE_INDEXES'", "'SMALLFILE'", "'SMALLINT'", "'SNAPSHOT'", 
			"'SOME'", "'SORT'", "'SOUNDEX'", "'SOURCE_FILE_DIRECTORY'", "'SOURCE_FILE_NAME_CONVERT'", 
			"'SOURCE'", "'SPACE'", "'SPECIFICATION'", "'SPFILE'", "'SPLIT'", "'SPREADSHEET'", 
			"'SQLDATA'", "'SQLERROR'", "'SQLLDR'", "'SQL'", "'SQL_TRACE'", "'SQL_TRANSLATION_PROFILE'", 
			"'SQRT'", "'STALE'", "'STANDALONE'", "'STANDARD_HASH'", "'STANDBY_MAX_DATA_DELAY'", 
			"'STANDBYS'", "'STANDBY'", "'STAR'", "'STAR_TRANSFORMATION'", "'START'", 
			"'STARTUP'", "'STATEMENT_ID'", "'STATEMENT_QUEUING'", "'STATEMENTS'", 
			"'STATEMENT'", "'STATE'", "'STATIC'", "'STATISTICS'", "'STATS_BINOMIAL_TEST'", 
			"'STATS_CROSSTAB'", "'STATS_F_TEST'", "'STATS_KS_TEST'", "'STATS_MODE'", 
			"'STATS_MW_TEST'", "'STATS_ONE_WAY_ANOVA'", "'STATS_T_TEST_INDEP'", "'STATS_T_TEST_INDEPU'", 
			"'STATS_T_TEST_ONE'", "'STATS_T_TEST_PAIRED'", "'STATS_WSR_TEST'", "'STDDEV_POP'", 
			"'STDDEV_SAMP'", "'STOP'", "'STORAGE'", "'STORE'", "'STREAMS'", "'STREAM'", 
			"'STRICT'", "'STRING'", "'STRIPE_COLUMNS'", "'STRIPE_WIDTH'", "'STRIP'", 
			"'STRUCTURE'", "'SUBMULTISET'", "'SUBPARTITION_REL'", "'SUBPARTITIONS'", 
			"'SUBPARTITION'", "'SUBQUERIES'", "'SUBQUERY_PRUNING'", "'SUBSCRIBE'", 
			"'SUBSET'", "'SUBSTITUTABLE'", "'SUBSTR2'", "'SUBSTR4'", "'SUBSTRB'", 
			"'SUBSTRC'", "'SUBTYPE'", "'SUCCESSFUL'", "'SUCCESS'", "'SUMMARY'", "'SUPPLEMENTAL'", 
			"'SUSPEND'", "'SWAP_JOIN_INPUTS'", "'SWITCHOVER'", "'SWITCH'", "'SYNCHRONOUS'", 
			"'SYNC'", "'SYNONYM'", "'SYSASM'", "'SYS_AUDIT'", "'SYSAUX'", "'SYSBACKUP'", 
			"'SYS_CHECKACL'", "'SYS_CHECK_PRIVILEGE'", "'SYS_CONNECT_BY_PATH'", "'SYS_CONTEXT'", 
			"'SYSDATE'", "'SYSDBA'", "'SYS_DBURIGEN'", "'SYSDG'", "'SYS_DL_CURSOR'", 
			"'SYS_DM_RXFORM_CHR'", "'SYS_DM_RXFORM_NUM'", "'SYS_DOM_COMPARE'", "'SYS_DST_PRIM2SEC'", 
			"'SYS_DST_SEC2PRIM'", "'SYS_ET_BFILE_TO_RAW'", "'SYS_ET_BLOB_TO_IMAGE'", 
			"'SYS_ET_IMAGE_TO_BLOB'", "'SYS_ET_RAW_TO_BFILE'", "'SYS_EXTPDTXT'", 
			"'SYS_EXTRACT_UTC'", "'SYS_FBT_INSDEL'", "'SYS_FILTER_ACLS'", "'SYS_FNMATCHES'", 
			"'SYS_FNREPLACE'", "'SYS_GET_ACLIDS'", "'SYS_GET_COL_ACLIDS'", "'SYS_GET_PRIVILEGES'", 
			"'SYS_GETTOKENID'", "'SYS_GETXTIVAL'", "'SYS_GUID'", "'SYSGUID'", "'SYSKM'", 
			"'SYS_MAKE_XMLNODEID'", "'SYS_MAKEXML'", "'SYS_MKXMLATTR'", "'SYS_MKXTI'", 
			"'SYSOBJ'", "'SYS_OP_ADT2BIN'", "'SYS_OP_ADTCONS'", "'SYS_OP_ALSCRVAL'", 
			"'SYS_OP_ATG'", "'SYS_OP_BIN2ADT'", "'SYS_OP_BITVEC'", "'SYS_OP_BL2R'", 
			"'SYS_OP_BLOOM_FILTER_LIST'", "'SYS_OP_BLOOM_FILTER'", "'SYS_OP_C2C'", 
			"'SYS_OP_CAST'", "'SYS_OP_CEG'", "'SYS_OP_CL2C'", "'SYS_OP_COMBINED_HASH'", 
			"'SYS_OP_COMP'", "'SYS_OP_CONVERT'", "'SYS_OP_COUNTCHG'", "'SYS_OP_CSCONV'", 
			"'SYS_OP_CSCONVTEST'", "'SYS_OP_CSR'", "'SYS_OP_CSX_PATCH'", "'SYS_OP_CYCLED_SEQ'", 
			"'SYS_OP_DECOMP'", "'SYS_OP_DESCEND'", "'SYS_OP_DISTINCT'", "'SYS_OP_DRA'", 
			"'SYS_OP_DUMP'", "'SYS_OP_DV_CHECK'", "'SYS_OP_ENFORCE_NOT_NULL$'", "'SYSOPER'", 
			"'SYS_OP_EXTRACT'", "'SYS_OP_GROUPING'", "'SYS_OP_GUID'", "'SYS_OP_HASH'", 
			"'SYS_OP_IIX'", "'SYS_OP_ITR'", "'SYS_OP_KEY_VECTOR_CREATE'", "'SYS_OP_KEY_VECTOR_FILTER_LIST'", 
			"'SYS_OP_KEY_VECTOR_FILTER'", "'SYS_OP_KEY_VECTOR_SUCCEEDED'", "'SYS_OP_KEY_VECTOR_USE'", 
			"'SYS_OP_LBID'", "'SYS_OP_LOBLOC2BLOB'", "'SYS_OP_LOBLOC2CLOB'", "'SYS_OP_LOBLOC2ID'", 
			"'SYS_OP_LOBLOC2NCLOB'", "'SYS_OP_LOBLOC2TYP'", "'SYS_OP_LSVI'", "'SYS_OP_LVL'", 
			"'SYS_OP_MAKEOID'", "'SYS_OP_MAP_NONNULL'", "'SYS_OP_MSR'", "'SYS_OP_NICOMBINE'", 
			"'SYS_OP_NIEXTRACT'", "'SYS_OP_NII'", "'SYS_OP_NIX'", "'SYS_OP_NOEXPAND'", 
			"'SYS_OP_NTCIMG$'", "'SYS_OP_NUMTORAW'", "'SYS_OP_OIDVALUE'", "'SYS_OP_OPNSIZE'", 
			"'SYS_OP_PAR_1'", "'SYS_OP_PARGID_1'", "'SYS_OP_PARGID'", "'SYS_OP_PAR'", 
			"'SYS_OP_PART_ID'", "'SYS_OP_PIVOT'", "'SYS_OP_R2O'", "'SYS_OP_RAWTONUM'", 
			"'SYS_OP_RDTM'", "'SYS_OP_REF'", "'SYS_OP_RMTD'", "'SYS_OP_ROWIDTOOBJ'", 
			"'SYS_OP_RPB'", "'SYS_OPTLOBPRBSC'", "'SYS_OP_TOSETID'", "'SYS_OP_TPR'", 
			"'SYS_OP_TRTB'", "'SYS_OPTXICMP'", "'SYS_OPTXQCASTASNQ'", "'SYS_OP_UNDESCEND'", 
			"'SYS_OP_VECAND'", "'SYS_OP_VECBIT'", "'SYS_OP_VECOR'", "'SYS_OP_VECXOR'", 
			"'SYS_OP_VERSION'", "'SYS_OP_VREF'", "'SYS_OP_VVD'", "'SYS_OP_XMLCONS_FOR_CSX'", 
			"'SYS_OP_XPTHATG'", "'SYS_OP_XPTHIDX'", "'SYS_OP_XPTHOP'", "'SYS_OP_XTXT2SQLT'", 
			"'SYS_OP_ZONE_ID'", "'SYS_ORDERKEY_DEPTH'", "'SYS_ORDERKEY_MAXCHILD'", 
			"'SYS_ORDERKEY_PARENT'", "'SYS_PARALLEL_TXN'", "'SYS_PATHID_IS_ATTR'", 
			"'SYS_PATHID_IS_NMSPC'", "'SYS_PATHID_LASTNAME'", "'SYS_PATHID_LASTNMSPC'", 
			"'SYS_PATH_REVERSE'", "'SYS_PXQEXTRACT'", "'SYS_RAW_TO_XSID'", "'SYS_RID_ORDER'", 
			"'SYS_ROW_DELTA'", "'SYS_SC_2_XMLT'", "'SYS_SYNRCIREDO'", "'SYSTEM_DEFINED'", 
			"'SYSTEM'", "'SYSTIMESTAMP'", "'SYS_TYPEID'", "'SYS_UMAKEXML'", "'SYS_XMLANALYZE'", 
			"'SYS_XMLCONTAINS'", "'SYS_XMLCONV'", "'SYS_XMLEXNSURI'", "'SYS_XMLGEN'", 
			"'SYS_XMLI_LOC_ISNODE'", "'SYS_XMLI_LOC_ISTEXT'", "'SYS_XMLINSTR'", "'SYS_XMLLOCATOR_GETSVAL'", 
			"'SYS_XMLNODEID_GETCID'", "'SYS_XMLNODEID_GETLOCATOR'", "'SYS_XMLNODEID_GETOKEY'", 
			"'SYS_XMLNODEID_GETPATHID'", "'SYS_XMLNODEID_GETPTRID'", "'SYS_XMLNODEID_GETRID'", 
			"'SYS_XMLNODEID_GETSVAL'", "'SYS_XMLNODEID_GETTID'", "'SYS_XMLNODEID'", 
			"'SYS_XMLT_2_SC'", "'SYS_XMLTRANSLATE'", "'SYS_XMLTYPE2SQL'", "'SYS_XQ_ASQLCNV'", 
			"'SYS_XQ_ATOMCNVCHK'", "'SYS_XQBASEURI'", "'SYS_XQCASTABLEERRH'", "'SYS_XQCODEP2STR'", 
			"'SYS_XQCODEPEQ'", "'SYS_XQCON2SEQ'", "'SYS_XQCONCAT'", "'SYS_XQDELETE'", 
			"'SYS_XQDFLTCOLATION'", "'SYS_XQDOC'", "'SYS_XQDOCURI'", "'SYS_XQDURDIV'", 
			"'SYS_XQED4URI'", "'SYS_XQENDSWITH'", "'SYS_XQERRH'", "'SYS_XQERR'", 
			"'SYS_XQESHTMLURI'", "'SYS_XQEXLOBVAL'", "'SYS_XQEXSTWRP'", "'SYS_XQEXTRACT'", 
			"'SYS_XQEXTRREF'", "'SYS_XQEXVAL'", "'SYS_XQFB2STR'", "'SYS_XQFNBOOL'", 
			"'SYS_XQFNCMP'", "'SYS_XQFNDATIM'", "'SYS_XQFNLNAME'", "'SYS_XQFNNM'", 
			"'SYS_XQFNNSURI'", "'SYS_XQFNPREDTRUTH'", "'SYS_XQFNQNM'", "'SYS_XQFNROOT'", 
			"'SYS_XQFORMATNUM'", "'SYS_XQFTCONTAIN'", "'SYS_XQFUNCR'", "'SYS_XQGETCONTENT'", 
			"'SYS_XQINDXOF'", "'SYS_XQINSERT'", "'SYS_XQINSPFX'", "'SYS_XQIRI2URI'", 
			"'SYS_XQLANG'", "'SYS_XQLLNMFRMQNM'", "'SYS_XQMKNODEREF'", "'SYS_XQNILLED'", 
			"'SYS_XQNODENAME'", "'SYS_XQNORMSPACE'", "'SYS_XQNORMUCODE'", "'SYS_XQ_NRNG'", 
			"'SYS_XQNSP4PFX'", "'SYS_XQNSPFRMQNM'", "'SYS_XQPFXFRMQNM'", "'SYS_XQ_PKSQL2XML'", 
			"'SYS_XQPOLYABS'", "'SYS_XQPOLYADD'", "'SYS_XQPOLYCEL'", "'SYS_XQPOLYCSTBL'", 
			"'SYS_XQPOLYCST'", "'SYS_XQPOLYDIV'", "'SYS_XQPOLYFLR'", "'SYS_XQPOLYMOD'", 
			"'SYS_XQPOLYMUL'", "'SYS_XQPOLYRND'", "'SYS_XQPOLYSQRT'", "'SYS_XQPOLYSUB'", 
			"'SYS_XQPOLYUMUS'", "'SYS_XQPOLYUPLS'", "'SYS_XQPOLYVEQ'", "'SYS_XQPOLYVGE'", 
			"'SYS_XQPOLYVGT'", "'SYS_XQPOLYVLE'", "'SYS_XQPOLYVLT'", "'SYS_XQPOLYVNE'", 
			"'SYS_XQREF2VAL'", "'SYS_XQRENAME'", "'SYS_XQREPLACE'", "'SYS_XQRESVURI'", 
			"'SYS_XQRNDHALF2EVN'", "'SYS_XQRSLVQNM'", "'SYS_XQRYENVPGET'", "'SYS_XQRYVARGET'", 
			"'SYS_XQRYWRP'", "'SYS_XQSEQ2CON4XC'", "'SYS_XQSEQ2CON'", "'SYS_XQSEQDEEPEQ'", 
			"'SYS_XQSEQINSB'", "'SYS_XQSEQRM'", "'SYS_XQSEQRVS'", "'SYS_XQSEQSUB'", 
			"'SYS_XQSEQTYPMATCH'", "'SYS_XQSTARTSWITH'", "'SYS_XQSTATBURI'", "'SYS_XQSTR2CODEP'", 
			"'SYS_XQSTRJOIN'", "'SYS_XQSUBSTRAFT'", "'SYS_XQSUBSTRBEF'", "'SYS_XQTOKENIZE'", 
			"'SYS_XQTREATAS'", "'SYS_XQ_UPKXML2SQL'", "'SYS_XQXFORM'", "'SYS_XSID_TO_RAW'", 
			"'SYS_ZMAP_FILTER'", "'SYS_ZMAP_REFRESH'", "'TABLE_LOOKUP_BY_NL'", "'TABLESPACE_NO'", 
			"'TABLESPACE'", "'TABLES'", "'TABLE_STATS'", "'TABLE'", "'TABNO'", "'TAG'", 
			"'TANH'", "'TAN'", "'TBL$OR$IDX$PART$NUM'", "'TEMPFILE'", "'TEMPLATE'", 
			"'TEMPORARY'", "'TEMP_TABLE'", "'TEST'", "'TEXT'", "'THAN'", "'THEN'", 
			"'THE'", "'THREAD'", "'THROUGH'", "'TIER'", "'TIES'", "'TIMEOUT'", "'TIMESTAMP_LTZ_UNCONSTRAINED'", 
			"'TIMESTAMP'", "'TIMESTAMP_TZ_UNCONSTRAINED'", "'TIMESTAMP_UNCONSTRAINED'", 
			"'TIMES'", "'TIME'", "'TIMEZONE'", "'TIMEZONE_ABBR'", "'TIMEZONE_HOUR'", 
			"'TIMEZONE_MINUTE'", "'TIMEZONE_OFFSET'", "'TIMEZONE_REGION'", "'TIME_ZONE'", 
			"'TIV_GB'", "'TIV_SSF'", "'TO_ACLID'", "'TO_BINARY_DOUBLE'", "'TO_BINARY_FLOAT'", 
			"'TO_BLOB'", "'TO_CLOB'", "'TO_DSINTERVAL'", "'TO_LOB'", "'TO_MULTI_BYTE'", 
			"'TO_NCHAR'", "'TO_NCLOB'", "'TO_NUMBER'", "'TOPLEVEL'", "'TO_SINGLE_BYTE'", 
			"'TO_TIMESTAMP'", "'TO_TIMESTAMP_TZ'", "'TO_TIME'", "'TO_TIME_TZ'", "'TO'", 
			"'TO_YMINTERVAL'", "'TRACE'", "'TRACING'", "'TRACKING'", "'TRAILING'", 
			"'TRANSACTION'", "'TRANSFORM_DISTINCT_AGG'", "'TRANSITIONAL'", "'TRANSITION'", 
			"'TRANSLATE'", "'TRANSLATION'", "'TREAT'", "'TRIGGERS'", "'TRIGGER'", 
			"'TRUE'", "'TRUNCATE'", "'TRUNC'", "'TRUSTED'", "'TRUST'", "'TUNING'", 
			"'TX'", "'TYPES'", "'TYPE'", "'TZ_OFFSET'", "'UB2'", "'UBA'", "'UCS2'", 
			"'UID'", "'UNARCHIVED'", "'UNBOUNDED'", "'UNBOUND'", "'UNCONDITIONAL'", 
			"'UNDER'", "'UNDO'", "'UNDROP'", "'UNIFORM'", "'UNION'", "'UNIQUE'", 
			"'UNISTR'", "'UNLIMITED'", "'UNLOAD'", "'UNLOCK'", "'UNMATCHED'", "'UNNEST_INNERJ_DISTINCT_VIEW'", 
			"'UNNEST_NOSEMIJ_NODISTINCTVIEW'", "'UNNEST_SEMIJ_VIEW'", "'UNNEST'", 
			"'UNPACKED'", "'UNPIVOT'", "'UNPLUG'", "'UNPROTECTED'", "'UNQUIESCE'", 
			"'UNRECOVERABLE'", "'UNRESTRICTED'", "'UNSUBSCRIBE'", "'UNTIL'", "'UNUSABLE'", 
			"'UNUSED'", "'UPDATABLE'", "'UPDATED'", "'UPDATE'", "'UPDATEXML'", "'UPD_INDEXES'", 
			"'UPD_JOININDEX'", "'UPGRADE'", "'UPPER'", "'UPSERT'", "'UROWID'", "'USABLE'", 
			"'USAGE'", "'USE_ANTI'", "'USE_CONCAT'", "'USE_CUBE'", "'USE_HASH_AGGREGATION'", 
			"'USE_HASH_GBY_FOR_PUSHDOWN'", "'USE_HASH'", "'USE_HIDDEN_PARTITIONS'", 
			"'USE_INVISIBLE_INDEXES'", "'USE_MERGE_CARTESIAN'", "'USE_MERGE'", "'USE_NL'", 
			"'USE_NL_WITH_INDEX'", "'USE_PRIVATE_OUTLINES'", "'USER_DATA'", "'USER_DEFINED'", 
			"'USERENV'", "'USERGROUP'", "'USER_RECYCLEBIN'", "'USERS'", "'USER_TABLESPACES'", 
			"'USER'", "'USE_SEMI'", "'USE_STORED_OUTLINES'", "'USE_TTT_FOR_GSETS'", 
			"'USE'", "'USE_VECTOR_AGGREGATION'", "'USE_WEAK_NAME_RESL'", "'USING_NO_EXPAND'", 
			"'USING'", "'UTF16BE'", "'UTF16LE'", "'UTF32'", "'UTF8'", "'V1'", "'V2'", 
			"'VALIDATE'", "'VALIDATION'", "'VALID_TIME_END'", "'VALUES'", "'VALUE'", 
			"'VARCHAR2'", "'VARCHAR'", "'VARIABLE'", "'VAR_POP'", "'VARRAYS'", "'VARRAY'", 
			"'VAR_SAMP'", "'VARYING'", "'VECTOR_READ_TRACE'", "'VECTOR_READ'", "'VECTOR_TRANSFORM_DIMS'", 
			"'VECTOR_TRANSFORM_FACT'", "'VECTOR_TRANSFORM'", "'VERIFIER'", "'VERIFY'", 
			"'VERSIONING'", "'VERSIONS_ENDSCN'", "'VERSIONS_ENDTIME'", "'VERSIONS_OPERATION'", 
			"'VERSIONS_STARTSCN'", "'VERSIONS_STARTTIME'", "'VERSIONS'", "'VERSIONS_XID'", 
			"'VERSION'", "'VIEW'", "'VIOLATION'", "'VIRTUAL'", "'VISIBILITY'", "'VISIBLE'", 
			"'VOLUME'", "'VSIZE'", "'WAIT'", "'WALLET'", "'WARNING'", "'WEEKS'", 
			"'WEEK'", "'WELLFORMED'", "'WHENEVER'", "'WHEN'", "'WHERE'", "'WHILE'", 
			"'WHITESPACE'", "'WIDTH_BUCKET'", "'WITHIN'", "'WITHOUT'", "'WITH_PLSQL'", 
			"'WITH'", "'WORK'", "'WRAPPED'", "'WRAPPER'", "'WRITE'", "'XDB_FASTPATH_INSERT'", 
			"'XDB'", "'X_DYN_PRUNE'", "'XID'", "'XML2OBJECT'", "'XMLAGG'", "'XMLATTRIBUTES'", 
			"'XMLCAST'", "'XMLCDATA'", "'XMLCOLATTVAL'", "'XMLCOMMENT'", "'XMLCONCAT'", 
			"'XMLDIFF'", "'XML_DML_RWT_STMT'", "'XMLELEMENT'", "'XMLEXISTS2'", "'XMLEXISTS'", 
			"'XMLFOREST'", "'XMLINDEX'", "'XMLINDEX_REWRITE_IN_SELECT'", "'XMLINDEX_REWRITE'", 
			"'XMLINDEX_SEL_IDX_TBL'", "'XMLISNODE'", "'XMLISVALID'", "'XMLNAMESPACES'", 
			"'XMLPARSE'", "'XMLPATCH'", "'XMLPI'", "'XMLQUERYVAL'", "'XMLQUERY'", 
			"'XMLROOT'", "'XMLSCHEMA'", "'XMLSERIALIZE'", "'XMLTABLE'", "'XMLTRANSFORMBLOB'", 
			"'XMLTRANSFORM'", "'XMLTYPE'", "'XML'", "'XPATHTABLE'", "'XS_SYS_CONTEXT'", 
			"'XS'", "'XTRANSPORT'", "'YEARS'", "'YEAR'", "'YES'", "'YMINTERVAL_UNCONSTRAINED'", 
			"'ZONEMAP'", "'ZONE'", "'PREDICTION'", "'PREDICTION_BOUNDS'", "'PREDICTION_COST'", 
			"'PREDICTION_DETAILS'", "'PREDICTION_PROBABILITY'", "'PREDICTION_SET'", 
			"'CUME_DIST'", "'DENSE_RANK'", "'LISTAGG'", "'PERCENT_RANK'", "'PERCENTILE_CONT'", 
			"'PERCENTILE_DISC'", "'RANK'", "'AVG'", "'CORR'", "'COVAR_'", "'DECODE'", 
			"'LAG'", "'LEAD'", "'MAX'", "'MEDIAN'", "'MIN'", "'NTILE'", "'NVL'", 
			"'RATIO_TO_REPORT'", "'REGR_'", "'ROUND'", "'ROW_NUMBER'", "'SUBSTR'", 
			"'TO_CHAR'", "'TRIM'", "'SUM'", "'STDDEV'", "'VAR_'", "'VARIANCE'", "'LEAST'", 
			"'GREATEST'", "'TO_DATE'", null, null, null, "'..'", "'.'", null, null, 
			null, null, "'%'", "'&'", "'('", "')'", "'**'", "'*'", "'+'", "'-'", 
			"','", "'/'", "'@'", "':='", null, null, "'^'", "'~'", "'!'", "'>'", 
			"'<'", "':'", "';'", "'|'", "'='", "'['", "']'", "'_'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, "ABORT", "ABS", "ACCESS", "ACCESSED", "ACCOUNT", "ACL", "ACOS", 
			"ACTION", "ACTIONS", "ACTIVATE", "ACTIVE", "ACTIVE_COMPONENT", "ACTIVE_DATA", 
			"ACTIVE_FUNCTION", "ACTIVE_TAG", "ACTIVITY", "ADAPTIVE_PLAN", "ADD", 
			"ADD_COLUMN", "ADD_GROUP", "ADD_MONTHS", "ADJ_DATE", "ADMIN", "ADMINISTER", 
			"ADMINISTRATOR", "ADVANCED", "ADVISE", "ADVISOR", "AFD_DISKSTRING", "AFTER", 
			"AGENT", "AGGREGATE", "A_LETTER", "ALIAS", "ALL", "ALLOCATE", "ALLOW", 
			"ALL_ROWS", "ALTER", "ALWAYS", "ANALYZE", "ANCILLARY", "AND", "AND_EQUAL", 
			"ANOMALY", "ANSI_REARCH", "ANTIJOIN", "ANY", "ANYSCHEMA", "APPEND", "APPENDCHILDXML", 
			"APPEND_VALUES", "APPLICATION", "APPLY", "APPROX_COUNT_DISTINCT", "ARCHIVAL", 
			"ARCHIVE", "ARCHIVED", "ARCHIVELOG", "ARRAY", "AS", "ASC", "ASCII", "ASCIISTR", 
			"ASIN", "ASIS", "ASSEMBLY", "ASSIGN", "ASSOCIATE", "ASYNC", "ASYNCHRONOUS", 
			"ATAN2", "ATAN", "AT", "ATTRIBUTE", "ATTRIBUTES", "AUDIT", "AUTHENTICATED", 
			"AUTHENTICATION", "AUTHID", "AUTHORIZATION", "AUTOALLOCATE", "AUTO", 
			"AUTOBACKUP", "AUTOEXTEND", "AUTO_LOGIN", "AUTOMATIC", "AUTONOMOUS_TRANSACTION", 
			"AUTO_REOPTIMIZE", "AVAILABILITY", "AVRO", "BACKGROUND", "BACKUP", "BACKUPSET", 
			"BASIC", "BASICFILE", "BATCH", "BATCHSIZE", "BATCH_TABLE_ACCESS_BY_ROWID", 
			"BECOME", "BEFORE", "BEGIN", "BEGINNING", "BEGIN_OUTLINE_DATA", "BEHALF", 
			"BEQUEATH", "BETWEEN", "BFILE", "BFILENAME", "BIGFILE", "BINARY", "BINARY_DOUBLE", 
			"BINARY_DOUBLE_INFINITY", "BINARY_DOUBLE_NAN", "BINARY_FLOAT", "BINARY_FLOAT_INFINITY", 
			"BINARY_FLOAT_NAN", "BINARY_INTEGER", "BIND_AWARE", "BINDING", "BIN_TO_NUM", 
			"BITAND", "BITMAP_AND", "BITMAP", "BITMAPS", "BITMAP_TREE", "BITS", "BLOB", 
			"BLOCK", "BLOCK_RANGE", "BLOCKS", "BLOCKSIZE", "BODY", "BOOLEAN", "BOTH", 
			"BOUND", "BRANCH", "BREADTH", "BROADCAST", "BSON", "BUFFER", "BUFFER_CACHE", 
			"BUFFER_POOL", "BUILD", "BULK", "BY", "BYPASS_RECURSIVE_CHECK", "BYPASS_UJVC", 
			"BYTE", "CACHE", "CACHE_CB", "CACHE_INSTANCES", "CACHE_TEMP_TABLE", "CACHING", 
			"CALCULATED", "CALLBACK", "CALL", "CANCEL", "CANONICAL", "CAPACITY", 
			"CARDINALITY", "CASCADE", "CASE", "CAST", "CATEGORY", "CDBDEFAULT", "CEIL", 
			"CELL_FLASH_CACHE", "CERTIFICATE", "CFILE", "CHAINED", "CHANGE", "CHANGETRACKING", 
			"CHANGE_DUPKEY_ERROR_INDEX", "CHARACTER", "CHAR", "CHAR_CS", "CHARTOROWID", 
			"CHECK_ACL_REWRITE", "CHECK", "CHECKPOINT", "CHILD", "CHOOSE", "CHR", 
			"CHUNK", "CLASS", "CLASSIFIER", "CLEANUP", "CLEAR", "C_LETTER", "CLIENT", 
			"CLOB", "CLONE", "CLOSE_CACHED_OPEN_CURSORS", "CLOSE", "CLUSTER_BY_ROWID", 
			"CLUSTER", "CLUSTER_DETAILS", "CLUSTER_DISTANCE", "CLUSTER_ID", "CLUSTERING", 
			"CLUSTERING_FACTOR", "CLUSTER_PROBABILITY", "CLUSTER_SET", "COALESCE", 
			"COALESCE_SQ", "COARSE", "CO_AUTH_IND", "COLD", "COLLECT", "COLUMNAR", 
			"COLUMN_AUTH_INDICATOR", "COLUMN", "COLUMNS", "COLUMN_STATS", "COLUMN_VALUE", 
			"COMMENT", "COMMIT", "COMMITTED", "COMMON_DATA", "COMPACT", "COMPATIBILITY", 
			"COMPILE", "COMPLETE", "COMPLIANCE", "COMPONENT", "COMPONENTS", "COMPOSE", 
			"COMPOSITE", "COMPOSITE_LIMIT", "COMPOUND", "COMPRESS", "COMPUTE", "CONCAT", 
			"CON_DBID_TO_ID", "CONDITIONAL", "CONDITION", "CONFIRM", "CONFORMING", 
			"CON_GUID_TO_ID", "CON_ID", "CON_NAME_TO_ID", "CONNECT_BY_CB_WHR_ONLY", 
			"CONNECT_BY_COMBINE_SW", "CONNECT_BY_COST_BASED", "CONNECT_BY_ELIM_DUPS", 
			"CONNECT_BY_FILTERING", "CONNECT_BY_ISCYCLE", "CONNECT_BY_ISLEAF", "CONNECT_BY_ROOT", 
			"CONNECT", "CONNECT_TIME", "CONSIDER", "CONSISTENT", "CONSTANT", "CONST", 
			"CONSTRAINT", "CONSTRAINTS", "CONSTRUCTOR", "CONTAINER", "CONTAINER_DATA", 
			"CONTAINERS", "CONTENT", "CONTENTS", "CONTEXT", "CONTINUE", "CONTROLFILE", 
			"CON_UID_TO_ID", "CONVERT", "COOKIE", "COPY", "CORR_K", "CORR_S", "CORRUPTION", 
			"CORRUPT_XID_ALL", "CORRUPT_XID", "COS", "COSH", "COST", "COST_XML_QUERY_REWRITE", 
			"COUNT", "COVAR_POP", "COVAR_SAMP", "CPU_COSTING", "CPU_PER_CALL", "CPU_PER_SESSION", 
			"CRASH", "CREATE", "CREATE_FILE_DEST", "CREATE_STORED_OUTLINES", "CREATION", 
			"CREDENTIAL", "CRITICAL", "CROSS", "CROSSEDITION", "CSCONVERT", "CUBE_AJ", 
			"CUBE", "CUBE_GB", "CUBE_SJ", "CUME_DISTM", "CURRENT", "CURRENT_DATE", 
			"CURRENT_SCHEMA", "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_USER", 
			"CURRENTV", "CURSOR", "CURSOR_SHARING_EXACT", "CURSOR_SPECIFIC_SEGMENT", 
			"CUSTOMDATUM", "CV", "CYCLE", "DANGLING", "DATABASE", "DATA", "DATAFILE", 
			"DATAFILES", "DATAGUARDCONFIG", "DATAMOVEMENT", "DATAOBJNO", "DATAOBJ_TO_MAT_PARTITION", 
			"DATAOBJ_TO_PARTITION", "DATAPUMP", "DATA_SECURITY_REWRITE_LIMIT", "DATE", 
			"DATE_MODE", "DAY", "DAYS", "DBA", "DBA_RECYCLEBIN", "DBMS_STATS", "DB_ROLE_CHANGE", 
			"DBTIMEZONE", "DB_UNIQUE_NAME", "DB_VERSION", "DDL", "DEALLOCATE", "DEBUG", 
			"DEBUGGER", "DEC", "DECIMAL", "DECLARE", "DECOMPOSE", "DECORRELATE", 
			"DECR", "DECREMENT", "DECRYPT", "DEDUPLICATE", "DEFAULT", "DEFAULTS", 
			"DEFERRABLE", "DEFERRED", "DEFINED", "DEFINE", "DEFINER", "DEGREE", "DELAY", 
			"DELEGATE", "DELETE_ALL", "DELETE", "DELETEXML", "DEMAND", "DENSE_RANKM", 
			"DEPENDENT", "DEPTH", "DEQUEUE", "DEREF", "DEREF_NO_REWRITE", "DESC", 
			"DESTROY", "DETACHED", "DETERMINES", "DETERMINISTIC", "DICTIONARY", "DIMENSION", 
			"DIMENSIONS", "DIRECT_LOAD", "DIRECTORY", "DIRECT_PATH", "DISABLE_ALL", 
			"DISABLE", "DISABLE_PARALLEL_DML", "DISABLE_PRESET", "DISABLE_RPKE", 
			"DISALLOW", "DISASSOCIATE", "DISCARD", "DISCONNECT", "DISK", "DISKGROUP", 
			"DISKGROUP_PLUS", "DISKS", "DISMOUNT", "DISTINCT", "DISTINGUISHED", "DISTRIBUTED", 
			"DISTRIBUTE", "DML", "DML_UPDATE", "DOCFIDELITY", "DOCUMENT", "DOMAIN_INDEX_FILTER", 
			"DOMAIN_INDEX_NO_SORT", "DOMAIN_INDEX_SORT", "DOUBLE", "DOWNGRADE", "DRIVING_SITE", 
			"DROP_COLUMN", "DROP", "DROP_GROUP", "DSINTERVAL_UNCONSTRAINED", "DST_UPGRADE_INSERT_CONV", 
			"DUMP", "DUMPSET", "DUPLICATE", "DV", "DYNAMIC", "DYNAMIC_SAMPLING", 
			"DYNAMIC_SAMPLING_EST_CDN", "EACH", "EDITIONABLE", "EDITION", "EDITIONING", 
			"EDITIONS", "ELEMENT", "ELIM_GROUPBY", "ELIMINATE_JOIN", "ELIMINATE_OBY", 
			"ELIMINATE_OUTER_JOIN", "ELSE", "ELSIF", "EM", "EMPTY_BLOB", "EMPTY_CLOB", 
			"EMPTY", "ENABLE_ALL", "ENABLE", "ENABLE_PARALLEL_DML", "ENABLE_PRESET", 
			"ENCODING", "ENCRYPT", "ENCRYPTION", "END", "END_OUTLINE_DATA", "ENFORCED", 
			"ENFORCE", "ENQUEUE", "ENTERPRISE", "ENTITYESCAPING", "ENTRY", "EQUIPART", 
			"ERR", "ERROR_ARGUMENT", "ERROR", "ERROR_ON_OVERLAP_TIME", "ERRORS", 
			"ESCAPE", "ESTIMATE", "EVAL", "EVALNAME", "EVALUATE", "EVALUATION", "EVENTS", 
			"EVERY", "EXCEPT", "EXCEPTION", "EXCEPTION_INIT", "EXCEPTIONS", "EXCHANGE", 
			"EXCLUDE", "EXCLUDING", "EXCLUSIVE", "EXECUTE", "EXEMPT", "EXISTING", 
			"EXISTS", "EXISTSNODE", "EXIT", "EXPAND_GSET_TO_UNION", "EXPAND_TABLE", 
			"EXP", "EXPIRE", "EXPLAIN", "EXPLOSION", "EXPORT", "EXPR_CORR_CHECK", 
			"EXPRESS", "EXTENDS", "EXTENT", "EXTENTS", "EXTERNAL", "EXTERNALLY", 
			"EXTRACTCLOBXML", "EXTRACT", "EXTRACTVALUE", "EXTRA", "FACILITY", "FACT", 
			"FACTOR", "FACTORIZE_JOIN", "FAILED", "FAILED_LOGIN_ATTEMPTS", "FAILGROUP", 
			"FAILOVER", "FAILURE", "FALSE", "FAMILY", "FAR", "FAST", "FASTSTART", 
			"FBTSCAN", "FEATURE_DETAILS", "FEATURE_ID", "FEATURE_SET", "FEATURE_VALUE", 
			"FETCH", "FILE", "FILE_NAME_CONVERT", "FILESYSTEM_LIKE_LOGGING", "FILTER", 
			"FINAL", "FINE", "FINISH", "FIRST", "FIRSTM", "FIRST_ROWS", "FIRST_VALUE", 
			"FIXED_VIEW_DATA", "FLAGGER", "FLASHBACK", "FLASH_CACHE", "FLOAT", "FLOB", 
			"FLOOR", "FLUSH", "FOLDER", "FOLLOWING", "FOLLOWS", "FORALL", "FORCE", 
			"FORCE_XML_QUERY_REWRITE", "FOREIGN", "FOREVER", "FOR", "FORMAT", "FORWARD", 
			"FRAGMENT_NUMBER", "FREELIST", "FREELISTS", "FREEPOOLS", "FRESH", "FROM", 
			"FROM_TZ", "FULL", "FULL_OUTER_JOIN_TO_OUTER", "FUNCTION", "FUNCTIONS", 
			"GATHER_OPTIMIZER_STATISTICS", "GATHER_PLAN_STATISTICS", "GBY_CONC_ROLLUP", 
			"GBY_PUSHDOWN", "GENERATED", "GET", "GLOBAL", "GLOBALLY", "GLOBAL_NAME", 
			"GLOBAL_TOPIC_ENABLED", "GOTO", "GRANT", "GROUP_BY", "GROUP", "GROUP_ID", 
			"GROUPING", "GROUPING_ID", "GROUPS", "GUARANTEED", "GUARANTEE", "GUARD", 
			"HASH_AJ", "HASH", "HASHKEYS", "HASH_SJ", "HAVING", "HEADER", "HEAP", 
			"HELP", "HEXTORAW", "HEXTOREF", "HIDDEN_KEYWORD", "HIDE", "HIERARCHY", 
			"HIGH", "HINTSET_BEGIN", "HINTSET_END", "HOT", "HOUR", "HWM_BROKERED", 
			"HYBRID", "IDENTIFIED", "IDENTIFIER", "IDENTITY", "IDGENERATORS", "ID", 
			"IDLE_TIME", "IF", "IGNORE", "IGNORE_OPTIM_EMBEDDED_HINTS", "IGNORE_ROW_ON_DUPKEY_INDEX", 
			"IGNORE_WHERE_CLAUSE", "ILM", "IMMEDIATE", "IMPACT", "IMPORT", "INACTIVE", 
			"INCLUDE", "INCLUDE_VERSION", "INCLUDING", "INCREMENTAL", "INCREMENT", 
			"INCR", "INDENT", "INDEX_ASC", "INDEX_COMBINE", "INDEX_DESC", "INDEXED", 
			"INDEXES", "INDEX_FFS", "INDEX_FILTER", "INDEX", "INDEXING", "INDEX_JOIN", 
			"INDEX_ROWS", "INDEX_RRS", "INDEX_RS_ASC", "INDEX_RS_DESC", "INDEX_RS", 
			"INDEX_SCAN", "INDEX_SKIP_SCAN", "INDEX_SS_ASC", "INDEX_SS_DESC", "INDEX_SS", 
			"INDEX_STATS", "INDEXTYPE", "INDEXTYPES", "INDICATOR", "INDICES", "INFINITE", 
			"INFORMATIONAL", "INHERIT", "IN", "INITCAP", "INITIAL", "INITIALIZED", 
			"INITIALLY", "INITRANS", "INLINE", "INLINE_XMLTYPE_NT", "INMEMORY", "IN_MEMORY_METADATA", 
			"INMEMORY_PRUNING", "INNER", "INOUT", "INPLACE", "INSERTCHILDXMLAFTER", 
			"INSERTCHILDXMLBEFORE", "INSERTCHILDXML", "INSERT", "INSERTXMLAFTER", 
			"INSERTXMLBEFORE", "INSTANCE", "INSTANCES", "INSTANTIABLE", "INSTANTLY", 
			"INSTEAD", "INSTR2", "INSTR4", "INSTRB", "INSTRC", "INSTR", "INTEGER", 
			"INTERLEAVED", "INTERMEDIATE", "INTERNAL_CONVERT", "INTERNAL_USE", "INTERPRETED", 
			"INTERSECT", "INTERVAL", "INT", "INTO", "INVALIDATE", "INVISIBLE", "IN_XQUERY", 
			"IS", "ISOLATION", "ISOLATION_LEVEL", "ITERATE", "ITERATION_NUMBER", 
			"JAVA", "JOB", "JOIN", "JSON_ARRAYAGG", "JSON_ARRAY", "JSON_EQUAL", "JSON_EXISTS2", 
			"JSON_EXISTS", "JSONGET", "JSON", "JSON_OBJECTAGG", "JSON_OBJECT", "JSONPARSE", 
			"JSON_QUERY", "JSON_SERIALIZE", "JSON_TABLE", "JSON_TEXTCONTAINS2", "JSON_TEXTCONTAINS", 
			"JSON_VALUE", "KEEP_DUPLICATES", "KEEP", "KERBEROS", "KEY", "KEY_LENGTH", 
			"KEYSIZE", "KEYS", "KEYSTORE", "KILL", "LABEL", "LANGUAGE", "LAST_DAY", 
			"LAST", "LAST_VALUE", "LATERAL", "LAX", "LAYER", "LDAP_REGISTRATION_ENABLED", 
			"LDAP_REGISTRATION", "LDAP_REG_SYNC_INTERVAL", "LEADING", "LEFT", "LENGTH2", 
			"LENGTH4", "LENGTHB", "LENGTHC", "LENGTH", "LESS", "LEVEL", "LEVELS", 
			"LIBRARY", "LIFECYCLE", "LIFE", "LIFETIME", "LIKE2", "LIKE4", "LIKEC", 
			"LIKE_EXPAND", "LIKE", "LIMIT", "LINEAR", "LINK", "LIST", "LN", "LNNVL", 
			"LOAD", "LOB", "LOBNVL", "LOBS", "LOCAL_INDEXES", "LOCAL", "LOCALTIME", 
			"LOCALTIMESTAMP", "LOCATION", "LOCATOR", "LOCKED", "LOCKING", "LOCK", 
			"LOGFILE", "LOGFILES", "LOGGING", "LOGICAL", "LOGICAL_READS_PER_CALL", 
			"LOGICAL_READS_PER_SESSION", "LOG", "LOGMINING", "LOGOFF", "LOGON", "LOG_READ_ONLY_VIOLATIONS", 
			"LONG", "LOOP", "LOWER", "LOW", "LPAD", "LTRIM", "MAIN", "MAKE_REF", 
			"MANAGED", "MANAGE", "MANAGEMENT", "MANAGER", "MANUAL", "MAP", "MAPPING", 
			"MASTER", "MATCHED", "MATCHES", "MATCH", "MATCH_NUMBER", "MATCH_RECOGNIZE", 
			"MATERIALIZED", "MATERIALIZE", "MAXARCHLOGS", "MAXDATAFILES", "MAXEXTENTS", 
			"MAXIMIZE", "MAXINSTANCES", "MAXLOGFILES", "MAXLOGHISTORY", "MAXLOGMEMBERS", 
			"MAX_SHARED_TEMP_SIZE", "MAXSIZE", "MAXTRANS", "MAXVALUE", "MEASURE", 
			"MEASURES", "MEDIUM", "MEMBER", "MEMCOMPRESS", "MEMORY", "MERGEACTIONS", 
			"MERGE_AJ", "MERGE_CONST_ON", "MERGE", "MERGE_SJ", "METADATA", "METHOD", 
			"MIGRATE", "MIGRATION", "MINEXTENTS", "MINIMIZE", "MINIMUM", "MINING", 
			"MINUS", "MINUS_NULL", "MINUTE", "MINVALUE", "MIRRORCOLD", "MIRRORHOT", 
			"MIRROR", "MLSLABEL", "MODEL_COMPILE_SUBQUERY", "MODEL_DONTVERIFY_UNIQUENESS", 
			"MODEL_DYNAMIC_SUBQUERY", "MODEL_MIN_ANALYSIS", "MODEL", "MODEL_NB", 
			"MODEL_NO_ANALYSIS", "MODEL_PBY", "MODEL_PUSH_REF", "MODEL_SV", "MODE", 
			"MODIFICATION", "MODIFY_COLUMN_TYPE", "MODIFY", "MOD", "MODULE", "MONITORING", 
			"MONITOR", "MONTH", "MONTHS_BETWEEN", "MONTHS", "MOUNT", "MOUNTPATH", 
			"MOVEMENT", "MOVE", "MULTIDIMENSIONAL", "MULTISET", "MV_MERGE", "NAMED", 
			"NAME", "NAMESPACE", "NAN", "NANVL", "NATIONAL", "NATIVE_FULL_OUTER_JOIN", 
			"NATIVE", "NATURAL", "NATURALN", "NAV", "NCHAR_CS", "NCHAR", "NCHR", 
			"NCLOB", "NEEDED", "NEG", "NESTED", "NESTED_TABLE_FAST_INSERT", "NESTED_TABLE_GET_REFS", 
			"NESTED_TABLE_ID", "NESTED_TABLE_SET_REFS", "NESTED_TABLE_SET_SETID", 
			"NETWORK", "NEVER", "NEW", "NEW_TIME", "NEXT_DAY", "NEXT", "NL_AJ", "NLJ_BATCHING", 
			"NLJ_INDEX_FILTER", "NLJ_INDEX_SCAN", "NLJ_PREFETCH", "NLS_CALENDAR", 
			"NLS_CHARACTERSET", "NLS_CHARSET_DECL_LEN", "NLS_CHARSET_ID", "NLS_CHARSET_NAME", 
			"NLS_COMP", "NLS_CURRENCY", "NLS_DATE_FORMAT", "NLS_DATE_LANGUAGE", "NLS_INITCAP", 
			"NLS_ISO_CURRENCY", "NL_SJ", "NLS_LANG", "NLS_LANGUAGE", "NLS_LENGTH_SEMANTICS", 
			"NLS_LOWER", "NLS_NCHAR_CONV_EXCP", "NLS_NUMERIC_CHARACTERS", "NLS_SORT", 
			"NLSSORT", "NLS_SPECIAL_CHARS", "NLS_TERRITORY", "NLS_UPPER", "NO_ACCESS", 
			"NO_ADAPTIVE_PLAN", "NO_ANSI_REARCH", "NOAPPEND", "NOARCHIVELOG", "NOAUDIT", 
			"NO_AUTO_REOPTIMIZE", "NO_BASETABLE_MULTIMV_REWRITE", "NO_BATCH_TABLE_ACCESS_BY_ROWID", 
			"NO_BIND_AWARE", "NO_BUFFER", "NOCACHE", "NO_CARTESIAN", "NO_CHECK_ACL_REWRITE", 
			"NO_CLUSTER_BY_ROWID", "NO_CLUSTERING", "NO_COALESCE_SQ", "NO_COMMON_DATA", 
			"NOCOMPRESS", "NO_CONNECT_BY_CB_WHR_ONLY", "NO_CONNECT_BY_COMBINE_SW", 
			"NO_CONNECT_BY_COST_BASED", "NO_CONNECT_BY_ELIM_DUPS", "NO_CONNECT_BY_FILTERING", 
			"NOCOPY", "NO_COST_XML_QUERY_REWRITE", "NO_CPU_COSTING", "NOCPU_COSTING", 
			"NOCYCLE", "NO_DATA_SECURITY_REWRITE", "NO_DECORRELATE", "NODELAY", "NO_DOMAIN_INDEX_FILTER", 
			"NO_DST_UPGRADE_INSERT_CONV", "NO_ELIM_GROUPBY", "NO_ELIMINATE_JOIN", 
			"NO_ELIMINATE_OBY", "NO_ELIMINATE_OUTER_JOIN", "NOENTITYESCAPING", "NO_EXPAND_GSET_TO_UNION", 
			"NO_EXPAND", "NO_EXPAND_TABLE", "NO_FACT", "NO_FACTORIZE_JOIN", "NO_FILTERING", 
			"NOFORCE", "NO_FULL_OUTER_JOIN_TO_OUTER", "NO_GATHER_OPTIMIZER_STATISTICS", 
			"NO_GBY_PUSHDOWN", "NOGUARANTEE", "NO_INDEX_FFS", "NO_INDEX", "NO_INDEX_SS", 
			"NO_INMEMORY", "NO_INMEMORY_PRUNING", "NOKEEP", "NO_LOAD", "NOLOCAL", 
			"NOLOGGING", "NOMAPPING", "NOMAXVALUE", "NO_MERGE", "NOMINIMIZE", "NOMINVALUE", 
			"NO_MODEL_PUSH_REF", "NO_MONITORING", "NOMONITORING", "NO_MONITOR", "NO_MULTIMV_REWRITE", 
			"NO_NATIVE_FULL_OUTER_JOIN", "NONBLOCKING", "NONEDITIONABLE", "NONE", 
			"NO_NLJ_BATCHING", "NO_NLJ_PREFETCH", "NO", "NONSCHEMA", "NO_OBJECT_LINK", 
			"NOORDER", "NO_ORDER_ROLLUPS", "NO_OUTER_JOIN_TO_ANTI", "NO_OUTER_JOIN_TO_INNER", 
			"NOOVERRIDE", "NO_PARALLEL_INDEX", "NOPARALLEL_INDEX", "NO_PARALLEL", 
			"NOPARALLEL", "NO_PARTIAL_COMMIT", "NO_PARTIAL_JOIN", "NO_PARTIAL_ROLLUP_PUSHDOWN", 
			"NOPARTITION", "NO_PLACE_DISTINCT", "NO_PLACE_GROUP_BY", "NO_PQ_CONCURRENT_UNION", 
			"NO_PQ_MAP", "NO_PQ_REPLICATE", "NO_PQ_SKEW", "NO_PRUNE_GSETS", "NO_PULL_PRED", 
			"NO_PUSH_PRED", "NO_PUSH_SUBQ", "NO_PX_FAULT_TOLERANCE", "NO_PX_JOIN_FILTER", 
			"NO_QKN_BUFF", "NO_QUERY_TRANSFORMATION", "NO_REF_CASCADE", "NORELOCATE", 
			"NORELY", "NOREPAIR", "NOREPLAY", "NORESETLOGS", "NO_RESULT_CACHE", "NOREVERSE", 
			"NO_REWRITE", "NOREWRITE", "NORMAL", "NO_ROOT_SW_FOR_LOCAL", "NOROWDEPENDENCIES", 
			"NOSCHEMACHECK", "NOSEGMENT", "NO_SEMIJOIN", "NO_SEMI_TO_INNER", "NO_SET_TO_JOIN", 
			"NOSORT", "NO_SQL_TRANSLATION", "NO_SQL_TUNE", "NO_STAR_TRANSFORMATION", 
			"NO_STATEMENT_QUEUING", "NO_STATS_GSETS", "NOSTRICT", "NO_SUBQUERY_PRUNING", 
			"NO_SUBSTRB_PAD", "NO_SWAP_JOIN_INPUTS", "NOSWITCH", "NO_TABLE_LOOKUP_BY_NL", 
			"NO_TEMP_TABLE", "NOTHING", "NOTIFICATION", "NOT", "NO_TRANSFORM_DISTINCT_AGG", 
			"NO_UNNEST", "NO_USE_CUBE", "NO_USE_HASH_AGGREGATION", "NO_USE_HASH_GBY_FOR_PUSHDOWN", 
			"NO_USE_HASH", "NO_USE_INVISIBLE_INDEXES", "NO_USE_MERGE", "NO_USE_NL", 
			"NO_USE_VECTOR_AGGREGATION", "NOVALIDATE", "NO_VECTOR_TRANSFORM_DIMS", 
			"NO_VECTOR_TRANSFORM_FACT", "NO_VECTOR_TRANSFORM", "NOWAIT", "NO_XDB_FASTPATH_INSERT", 
			"NO_XML_DML_REWRITE", "NO_XMLINDEX_REWRITE_IN_SELECT", "NO_XMLINDEX_REWRITE", 
			"NO_XML_QUERY_REWRITE", "NO_ZONEMAP", "NTH_VALUE", "NULLIF", "NULL", 
			"NULLS", "NUMBER", "NUMERIC", "NUM_INDEX_KEYS", "NUMTODSINTERVAL", "NUMTOYMINTERVAL", 
			"NVARCHAR2", "NVL2", "OBJECT2XML", "OBJECT", "OBJ_ID", "OBJNO", "OBJNO_REUSE", 
			"OCCURENCES", "OFFLINE", "OFF", "OFFSET", "OF", "OIDINDEX", "OID", "OLAP", 
			"OLD", "OLD_PUSH_PRED", "OLS", "OLTP", "OMIT", "ONE", "ONLINE", "ONLINELOG", 
			"ONLY", "ON", "OPAQUE", "OPAQUE_TRANSFORM", "OPAQUE_XCANONICAL", "OPCODE", 
			"OPEN", "OPERATIONS", "OPERATOR", "OPT_ESTIMATE", "OPTIMAL", "OPTIMIZE", 
			"OPTIMIZER_FEATURES_ENABLE", "OPTIMIZER_GOAL", "OPTION", "OPT_PARAM", 
			"ORA_BRANCH", "ORA_CHECK_ACL", "ORA_CHECK_PRIVILEGE", "ORA_CLUSTERING", 
			"ORADATA", "ORADEBUG", "ORA_DST_AFFECTED", "ORA_DST_CONVERT", "ORA_DST_ERROR", 
			"ORA_GET_ACLIDS", "ORA_GET_PRIVILEGES", "ORA_HASH", "ORA_INVOKING_USERID", 
			"ORA_INVOKING_USER", "ORA_INVOKING_XS_USER_GUID", "ORA_INVOKING_XS_USER", 
			"ORA_RAWCOMPARE", "ORA_RAWCONCAT", "ORA_ROWSCN", "ORA_ROWSCN_RAW", "ORA_ROWVERSION", 
			"ORA_TABVERSION", "ORA_WRITE_TIME", "ORDERED", "ORDERED_PREDICATES", 
			"ORDER", "ORDINALITY", "OR_EXPAND", "ORGANIZATION", "OR", "OR_PREDICATES", 
			"OSERROR", "OTHER", "OUTER_JOIN_TO_ANTI", "OUTER_JOIN_TO_INNER", "OUTER", 
			"OUTLINE_LEAF", "OUTLINE", "OUT_OF_LINE", "OUT", "OVERFLOW_NOMOVE", "OVERFLOW", 
			"OVERLAPS", "OVER", "OVERRIDING", "OWNER", "OWNERSHIP", "OWN", "PACKAGE", 
			"PACKAGES", "PARALLEL_ENABLE", "PARALLEL_INDEX", "PARALLEL", "PARAMETERFILE", 
			"PARAMETERS", "PARAM", "PARENT", "PARITY", "PARTIAL_JOIN", "PARTIALLY", 
			"PARTIAL", "PARTIAL_ROLLUP_PUSHDOWN", "PARTITION_HASH", "PARTITION_LIST", 
			"PARTITION", "PARTITION_RANGE", "PARTITIONS", "PARTNUMINST", "PASSING", 
			"PASSWORD_GRACE_TIME", "PASSWORD_LIFE_TIME", "PASSWORD_LOCK_TIME", "PASSWORD", 
			"PASSWORD_REUSE_MAX", "PASSWORD_REUSE_TIME", "PASSWORD_VERIFY_FUNCTION", 
			"PAST", "PATCH", "PATH", "PATH_PREFIX", "PATHS", "PATTERN", "PBL_HS_BEGIN", 
			"PBL_HS_END", "PCTFREE", "PCTINCREASE", "PCTTHRESHOLD", "PCTUSED", "PCTVERSION", 
			"PENDING", "PERCENT_FOUND", "PERCENT_ISOPEN", "PERCENT_NOTFOUND", "PERCENT_KEYWORD", 
			"PERCENT_RANKM", "PERCENT_ROWCOUNT", "PERCENT_ROWTYPE", "PERCENT_TYPE", 
			"PERFORMANCE", "PERIOD_KEYWORD", "PERMANENT", "PERMISSION", "PERMUTE", 
			"PER", "PFILE", "PHYSICAL", "PIKEY", "PIPELINED", "PIPE", "PIV_GB", "PIVOT", 
			"PIV_SSF", "PLACE_DISTINCT", "PLACE_GROUP_BY", "PLAN", "PLSCOPE_SETTINGS", 
			"PLS_INTEGER", "PLSQL_CCFLAGS", "PLSQL_CODE_TYPE", "PLSQL_DEBUG", "PLSQL_OPTIMIZE_LEVEL", 
			"PLSQL_WARNINGS", "PLUGGABLE", "POINT", "POLICY", "POOL_16K", "POOL_2K", 
			"POOL_32K", "POOL_4K", "POOL_8K", "POSITIVEN", "POSITIVE", "POST_TRANSACTION", 
			"POWERMULTISET_BY_CARDINALITY", "POWERMULTISET", "POWER", "PQ_CONCURRENT_UNION", 
			"PQ_DISTRIBUTE", "PQ_DISTRIBUTE_WINDOW", "PQ_FILTER", "PQ_MAP", "PQ_NOMAP", 
			"PQ_REPLICATE", "PQ_SKEW", "PRAGMA", "PREBUILT", "PRECEDES", "PRECEDING", 
			"PRECISION", "PRECOMPUTE_SUBQUERY", "PREDICATE_REORDERS", "PRELOAD", 
			"PREPARE", "PRESENTNNV", "PRESENT", "PRESENTV", "PRESERVE_OID", "PRESERVE", 
			"PRETTY", "PREVIOUS", "PREV", "PRIMARY", "PRINTBLOBTOCLOB", "PRIORITY", 
			"PRIOR", "PRIVATE", "PRIVATE_SGA", "PRIVILEGED", "PRIVILEGE", "PRIVILEGES", 
			"PROCEDURAL", "PROCEDURE", "PROCESS", "PROFILE", "PROGRAM", "PROJECT", 
			"PROPAGATE", "PROTECTED", "PROTECTION", "PROXY", "PRUNING", "PUBLIC", 
			"PULL_PRED", "PURGE", "PUSH_PRED", "PUSH_SUBQ", "PX_FAULT_TOLERANCE", 
			"PX_GRANULE", "PX_JOIN_FILTER", "QB_NAME", "QUERY_BLOCK", "QUERY", "QUEUE_CURR", 
			"QUEUE", "QUEUE_ROWP", "QUIESCE", "QUORUM", "QUOTA", "RAISE", "RANDOM_LOCAL", 
			"RANDOM", "RANGE", "RANKM", "RAPIDLY", "RAW", "RAWTOHEX", "RAWTONHEX", 
			"RBA", "RBO_OUTLINE", "RDBA", "READ", "READS", "REALM", "REAL", "REBALANCE", 
			"REBUILD", "RECORD", "RECORDS_PER_BLOCK", "RECOVERABLE", "RECOVER", "RECOVERY", 
			"RECYCLEBIN", "RECYCLE", "REDACTION", "REDEFINE", "REDO", "REDUCED", 
			"REDUNDANCY", "REF_CASCADE_CURSOR", "REFERENCED", "REFERENCE", "REFERENCES", 
			"REFERENCING", "REF", "REFRESH", "REFTOHEX", "REGEXP_COUNT", "REGEXP_INSTR", 
			"REGEXP_LIKE", "REGEXP_REPLACE", "REGEXP_SUBSTR", "REGISTER", "REGR_AVGX", 
			"REGR_AVGY", "REGR_COUNT", "REGR_INTERCEPT", "REGR_R2", "REGR_SLOPE", 
			"REGR_SXX", "REGR_SXY", "REGR_SYY", "REGULAR", "REJECT", "REKEY", "RELATIONAL", 
			"RELIES_ON", "RELOCATE", "RELY", "REMAINDER", "REMOTE_MAPPED", "REMOVE", 
			"RENAME", "REPAIR", "REPEAT", "REPLACE", "REPLICATION", "REQUIRED", "RESETLOGS", 
			"RESET", "RESIZE", "RESOLVE", "RESOLVER", "RESOURCE", "RESPECT", "RESTART", 
			"RESTORE_AS_INTERVALS", "RESTORE", "RESTRICT_ALL_REF_CONS", "RESTRICTED", 
			"RESTRICT_REFERENCES", "RESTRICT", "RESULT_CACHE", "RESULT", "RESUMABLE", 
			"RESUME", "RETENTION", "RETRY_ON_ROW_CHANGE", "RETURNING", "RETURN", 
			"REUSE", "REVERSE", "REVOKE", "REWRITE_OR_ERROR", "REWRITE", "RIGHT", 
			"ROLE", "ROLESET", "ROLES", "ROLLBACK", "ROLLING", "ROLLUP", "ROWDEPENDENCIES", 
			"ROWID_MAPPING_TABLE", "ROWID", "ROWIDTOCHAR", "ROWIDTONCHAR", "ROW_LENGTH", 
			"ROWNUM", "ROW", "ROWS", "RPAD", "RTRIM", "RULE", "RULES", "RUNNING", 
			"SALT", "SAMPLE", "SAVE_AS_INTERVALS", "SAVEPOINT", "SAVE", "SB4", "SCALE_ROWS", 
			"SCALE", "SCAN_INSTANCES", "SCAN", "SCHEDULER", "SCHEMACHECK", "SCHEMA", 
			"SCN_ASCENDING", "SCN", "SCOPE", "SCRUB", "SD_ALL", "SD_INHIBIT", "SDO_GEOM_MBR", 
			"SD_SHOW", "SEARCH", "SECOND", "SECRET", "SECUREFILE_DBA", "SECUREFILE", 
			"SECURITY", "SEED", "SEG_BLOCK", "SEG_FILE", "SEGMENT", "SELECTIVITY", 
			"SELECT", "SELF", "SEMIJOIN_DRIVER", "SEMIJOIN", "SEMI_TO_INNER", "SEQUENCED", 
			"SEQUENCE", "SEQUENTIAL", "SEQ", "SERIALIZABLE", "SERIALLY_REUSABLE", 
			"SERIAL", "SERVERERROR", "SERVICE_NAME_CONVERT", "SERVICES", "SESSION_CACHED_CURSORS", 
			"SESSION", "SESSIONS_PER_USER", "SESSIONTIMEZONE", "SESSIONTZNAME", "SET", 
			"SETS", "SETTINGS", "SET_TO_JOIN", "SEVERE", "SHARED_POOL", "SHARED", 
			"SHARE", "SHARING", "SHELFLIFE", "SHOW", "SHRINK", "SHUTDOWN", "SIBLINGS", 
			"SID", "SIGNAL_COMPONENT", "SIGNAL_FUNCTION", "SIGN", "SIGNTYPE", "SIMPLE_INTEGER", 
			"SIMPLE", "SINGLE", "SINGLETASK", "SINH", "SIN", "SIZE", "SKIP_EXT_OPTIMIZER", 
			"SKIP_", "SKIP_UNQ_UNUSABLE_IDX", "SKIP_UNUSABLE_INDEXES", "SMALLFILE", 
			"SMALLINT", "SNAPSHOT", "SOME", "SORT", "SOUNDEX", "SOURCE_FILE_DIRECTORY", 
			"SOURCE_FILE_NAME_CONVERT", "SOURCE", "SPACE_KEYWORD", "SPECIFICATION", 
			"SPFILE", "SPLIT", "SPREADSHEET", "SQLDATA", "SQLERROR", "SQLLDR", "SQL", 
			"SQL_TRACE", "SQL_TRANSLATION_PROFILE", "SQRT", "STALE", "STANDALONE", 
			"STANDARD_HASH", "STANDBY_MAX_DATA_DELAY", "STANDBYS", "STANDBY", "STAR", 
			"STAR_TRANSFORMATION", "START", "STARTUP", "STATEMENT_ID", "STATEMENT_QUEUING", 
			"STATEMENTS", "STATEMENT", "STATE", "STATIC", "STATISTICS", "STATS_BINOMIAL_TEST", 
			"STATS_CROSSTAB", "STATS_F_TEST", "STATS_KS_TEST", "STATS_MODE", "STATS_MW_TEST", 
			"STATS_ONE_WAY_ANOVA", "STATS_T_TEST_INDEP", "STATS_T_TEST_INDEPU", "STATS_T_TEST_ONE", 
			"STATS_T_TEST_PAIRED", "STATS_WSR_TEST", "STDDEV_POP", "STDDEV_SAMP", 
			"STOP", "STORAGE", "STORE", "STREAMS", "STREAM", "STRICT", "STRING", 
			"STRIPE_COLUMNS", "STRIPE_WIDTH", "STRIP", "STRUCTURE", "SUBMULTISET", 
			"SUBPARTITION_REL", "SUBPARTITIONS", "SUBPARTITION", "SUBQUERIES", "SUBQUERY_PRUNING", 
			"SUBSCRIBE", "SUBSET", "SUBSTITUTABLE", "SUBSTR2", "SUBSTR4", "SUBSTRB", 
			"SUBSTRC", "SUBTYPE", "SUCCESSFUL", "SUCCESS", "SUMMARY", "SUPPLEMENTAL", 
			"SUSPEND", "SWAP_JOIN_INPUTS", "SWITCHOVER", "SWITCH", "SYNCHRONOUS", 
			"SYNC", "SYNONYM", "SYSASM", "SYS_AUDIT", "SYSAUX", "SYSBACKUP", "SYS_CHECKACL", 
			"SYS_CHECK_PRIVILEGE", "SYS_CONNECT_BY_PATH", "SYS_CONTEXT", "SYSDATE", 
			"SYSDBA", "SYS_DBURIGEN", "SYSDG", "SYS_DL_CURSOR", "SYS_DM_RXFORM_CHR", 
			"SYS_DM_RXFORM_NUM", "SYS_DOM_COMPARE", "SYS_DST_PRIM2SEC", "SYS_DST_SEC2PRIM", 
			"SYS_ET_BFILE_TO_RAW", "SYS_ET_BLOB_TO_IMAGE", "SYS_ET_IMAGE_TO_BLOB", 
			"SYS_ET_RAW_TO_BFILE", "SYS_EXTPDTXT", "SYS_EXTRACT_UTC", "SYS_FBT_INSDEL", 
			"SYS_FILTER_ACLS", "SYS_FNMATCHES", "SYS_FNREPLACE", "SYS_GET_ACLIDS", 
			"SYS_GET_COL_ACLIDS", "SYS_GET_PRIVILEGES", "SYS_GETTOKENID", "SYS_GETXTIVAL", 
			"SYS_GUID", "SYSGUID", "SYSKM", "SYS_MAKE_XMLNODEID", "SYS_MAKEXML", 
			"SYS_MKXMLATTR", "SYS_MKXTI", "SYSOBJ", "SYS_OP_ADT2BIN", "SYS_OP_ADTCONS", 
			"SYS_OP_ALSCRVAL", "SYS_OP_ATG", "SYS_OP_BIN2ADT", "SYS_OP_BITVEC", "SYS_OP_BL2R", 
			"SYS_OP_BLOOM_FILTER_LIST", "SYS_OP_BLOOM_FILTER", "SYS_OP_C2C", "SYS_OP_CAST", 
			"SYS_OP_CEG", "SYS_OP_CL2C", "SYS_OP_COMBINED_HASH", "SYS_OP_COMP", "SYS_OP_CONVERT", 
			"SYS_OP_COUNTCHG", "SYS_OP_CSCONV", "SYS_OP_CSCONVTEST", "SYS_OP_CSR", 
			"SYS_OP_CSX_PATCH", "SYS_OP_CYCLED_SEQ", "SYS_OP_DECOMP", "SYS_OP_DESCEND", 
			"SYS_OP_DISTINCT", "SYS_OP_DRA", "SYS_OP_DUMP", "SYS_OP_DV_CHECK", "SYS_OP_ENFORCE_NOT_NULL", 
			"SYSOPER", "SYS_OP_EXTRACT", "SYS_OP_GROUPING", "SYS_OP_GUID", "SYS_OP_HASH", 
			"SYS_OP_IIX", "SYS_OP_ITR", "SYS_OP_KEY_VECTOR_CREATE", "SYS_OP_KEY_VECTOR_FILTER_LIST", 
			"SYS_OP_KEY_VECTOR_FILTER", "SYS_OP_KEY_VECTOR_SUCCEEDED", "SYS_OP_KEY_VECTOR_USE", 
			"SYS_OP_LBID", "SYS_OP_LOBLOC2BLOB", "SYS_OP_LOBLOC2CLOB", "SYS_OP_LOBLOC2ID", 
			"SYS_OP_LOBLOC2NCLOB", "SYS_OP_LOBLOC2TYP", "SYS_OP_LSVI", "SYS_OP_LVL", 
			"SYS_OP_MAKEOID", "SYS_OP_MAP_NONNULL", "SYS_OP_MSR", "SYS_OP_NICOMBINE", 
			"SYS_OP_NIEXTRACT", "SYS_OP_NII", "SYS_OP_NIX", "SYS_OP_NOEXPAND", "SYS_OP_NTCIMG", 
			"SYS_OP_NUMTORAW", "SYS_OP_OIDVALUE", "SYS_OP_OPNSIZE", "SYS_OP_PAR_1", 
			"SYS_OP_PARGID_1", "SYS_OP_PARGID", "SYS_OP_PAR", "SYS_OP_PART_ID", "SYS_OP_PIVOT", 
			"SYS_OP_R2O", "SYS_OP_RAWTONUM", "SYS_OP_RDTM", "SYS_OP_REF", "SYS_OP_RMTD", 
			"SYS_OP_ROWIDTOOBJ", "SYS_OP_RPB", "SYS_OPTLOBPRBSC", "SYS_OP_TOSETID", 
			"SYS_OP_TPR", "SYS_OP_TRTB", "SYS_OPTXICMP", "SYS_OPTXQCASTASNQ", "SYS_OP_UNDESCEND", 
			"SYS_OP_VECAND", "SYS_OP_VECBIT", "SYS_OP_VECOR", "SYS_OP_VECXOR", "SYS_OP_VERSION", 
			"SYS_OP_VREF", "SYS_OP_VVD", "SYS_OP_XMLCONS_FOR_CSX", "SYS_OP_XPTHATG", 
			"SYS_OP_XPTHIDX", "SYS_OP_XPTHOP", "SYS_OP_XTXT2SQLT", "SYS_OP_ZONE_ID", 
			"SYS_ORDERKEY_DEPTH", "SYS_ORDERKEY_MAXCHILD", "SYS_ORDERKEY_PARENT", 
			"SYS_PARALLEL_TXN", "SYS_PATHID_IS_ATTR", "SYS_PATHID_IS_NMSPC", "SYS_PATHID_LASTNAME", 
			"SYS_PATHID_LASTNMSPC", "SYS_PATH_REVERSE", "SYS_PXQEXTRACT", "SYS_RAW_TO_XSID", 
			"SYS_RID_ORDER", "SYS_ROW_DELTA", "SYS_SC_2_XMLT", "SYS_SYNRCIREDO", 
			"SYSTEM_DEFINED", "SYSTEM", "SYSTIMESTAMP", "SYS_TYPEID", "SYS_UMAKEXML", 
			"SYS_XMLANALYZE", "SYS_XMLCONTAINS", "SYS_XMLCONV", "SYS_XMLEXNSURI", 
			"SYS_XMLGEN", "SYS_XMLI_LOC_ISNODE", "SYS_XMLI_LOC_ISTEXT", "SYS_XMLINSTR", 
			"SYS_XMLLOCATOR_GETSVAL", "SYS_XMLNODEID_GETCID", "SYS_XMLNODEID_GETLOCATOR", 
			"SYS_XMLNODEID_GETOKEY", "SYS_XMLNODEID_GETPATHID", "SYS_XMLNODEID_GETPTRID", 
			"SYS_XMLNODEID_GETRID", "SYS_XMLNODEID_GETSVAL", "SYS_XMLNODEID_GETTID", 
			"SYS_XMLNODEID", "SYS_XMLT_2_SC", "SYS_XMLTRANSLATE", "SYS_XMLTYPE2SQL", 
			"SYS_XQ_ASQLCNV", "SYS_XQ_ATOMCNVCHK", "SYS_XQBASEURI", "SYS_XQCASTABLEERRH", 
			"SYS_XQCODEP2STR", "SYS_XQCODEPEQ", "SYS_XQCON2SEQ", "SYS_XQCONCAT", 
			"SYS_XQDELETE", "SYS_XQDFLTCOLATION", "SYS_XQDOC", "SYS_XQDOCURI", "SYS_XQDURDIV", 
			"SYS_XQED4URI", "SYS_XQENDSWITH", "SYS_XQERRH", "SYS_XQERR", "SYS_XQESHTMLURI", 
			"SYS_XQEXLOBVAL", "SYS_XQEXSTWRP", "SYS_XQEXTRACT", "SYS_XQEXTRREF", 
			"SYS_XQEXVAL", "SYS_XQFB2STR", "SYS_XQFNBOOL", "SYS_XQFNCMP", "SYS_XQFNDATIM", 
			"SYS_XQFNLNAME", "SYS_XQFNNM", "SYS_XQFNNSURI", "SYS_XQFNPREDTRUTH", 
			"SYS_XQFNQNM", "SYS_XQFNROOT", "SYS_XQFORMATNUM", "SYS_XQFTCONTAIN", 
			"SYS_XQFUNCR", "SYS_XQGETCONTENT", "SYS_XQINDXOF", "SYS_XQINSERT", "SYS_XQINSPFX", 
			"SYS_XQIRI2URI", "SYS_XQLANG", "SYS_XQLLNMFRMQNM", "SYS_XQMKNODEREF", 
			"SYS_XQNILLED", "SYS_XQNODENAME", "SYS_XQNORMSPACE", "SYS_XQNORMUCODE", 
			"SYS_XQ_NRNG", "SYS_XQNSP4PFX", "SYS_XQNSPFRMQNM", "SYS_XQPFXFRMQNM", 
			"SYS_XQ_PKSQL2XML", "SYS_XQPOLYABS", "SYS_XQPOLYADD", "SYS_XQPOLYCEL", 
			"SYS_XQPOLYCSTBL", "SYS_XQPOLYCST", "SYS_XQPOLYDIV", "SYS_XQPOLYFLR", 
			"SYS_XQPOLYMOD", "SYS_XQPOLYMUL", "SYS_XQPOLYRND", "SYS_XQPOLYSQRT", 
			"SYS_XQPOLYSUB", "SYS_XQPOLYUMUS", "SYS_XQPOLYUPLS", "SYS_XQPOLYVEQ", 
			"SYS_XQPOLYVGE", "SYS_XQPOLYVGT", "SYS_XQPOLYVLE", "SYS_XQPOLYVLT", "SYS_XQPOLYVNE", 
			"SYS_XQREF2VAL", "SYS_XQRENAME", "SYS_XQREPLACE", "SYS_XQRESVURI", "SYS_XQRNDHALF2EVN", 
			"SYS_XQRSLVQNM", "SYS_XQRYENVPGET", "SYS_XQRYVARGET", "SYS_XQRYWRP", 
			"SYS_XQSEQ2CON4XC", "SYS_XQSEQ2CON", "SYS_XQSEQDEEPEQ", "SYS_XQSEQINSB", 
			"SYS_XQSEQRM", "SYS_XQSEQRVS", "SYS_XQSEQSUB", "SYS_XQSEQTYPMATCH", "SYS_XQSTARTSWITH", 
			"SYS_XQSTATBURI", "SYS_XQSTR2CODEP", "SYS_XQSTRJOIN", "SYS_XQSUBSTRAFT", 
			"SYS_XQSUBSTRBEF", "SYS_XQTOKENIZE", "SYS_XQTREATAS", "SYS_XQ_UPKXML2SQL", 
			"SYS_XQXFORM", "SYS_XSID_TO_RAW", "SYS_ZMAP_FILTER", "SYS_ZMAP_REFRESH", 
			"TABLE_LOOKUP_BY_NL", "TABLESPACE_NO", "TABLESPACE", "TABLES", "TABLE_STATS", 
			"TABLE", "TABNO", "TAG", "TANH", "TAN", "TBLORIDXPARTNUM", "TEMPFILE", 
			"TEMPLATE", "TEMPORARY", "TEMP_TABLE", "TEST", "TEXT", "THAN", "THEN", 
			"THE", "THREAD", "THROUGH", "TIER", "TIES", "TIMEOUT", "TIMESTAMP_LTZ_UNCONSTRAINED", 
			"TIMESTAMP", "TIMESTAMP_TZ_UNCONSTRAINED", "TIMESTAMP_UNCONSTRAINED", 
			"TIMES", "TIME", "TIMEZONE", "TIMEZONE_ABBR", "TIMEZONE_HOUR", "TIMEZONE_MINUTE", 
			"TIMEZONE_OFFSET", "TIMEZONE_REGION", "TIME_ZONE", "TIV_GB", "TIV_SSF", 
			"TO_ACLID", "TO_BINARY_DOUBLE", "TO_BINARY_FLOAT", "TO_BLOB", "TO_CLOB", 
			"TO_DSINTERVAL", "TO_LOB", "TO_MULTI_BYTE", "TO_NCHAR", "TO_NCLOB", "TO_NUMBER", 
			"TOPLEVEL", "TO_SINGLE_BYTE", "TO_TIMESTAMP", "TO_TIMESTAMP_TZ", "TO_TIME", 
			"TO_TIME_TZ", "TO", "TO_YMINTERVAL", "TRACE", "TRACING", "TRACKING", 
			"TRAILING", "TRANSACTION", "TRANSFORM_DISTINCT_AGG", "TRANSITIONAL", 
			"TRANSITION", "TRANSLATE", "TRANSLATION", "TREAT", "TRIGGERS", "TRIGGER", 
			"TRUE", "TRUNCATE", "TRUNC", "TRUSTED", "TRUST", "TUNING", "TX", "TYPES", 
			"TYPE", "TZ_OFFSET", "UB2", "UBA", "UCS2", "UID", "UNARCHIVED", "UNBOUNDED", 
			"UNBOUND", "UNCONDITIONAL", "UNDER", "UNDO", "UNDROP", "UNIFORM", "UNION", 
			"UNIQUE", "UNISTR", "UNLIMITED", "UNLOAD", "UNLOCK", "UNMATCHED", "UNNEST_INNERJ_DISTINCT_VIEW", 
			"UNNEST_NOSEMIJ_NODISTINCTVIEW", "UNNEST_SEMIJ_VIEW", "UNNEST", "UNPACKED", 
			"UNPIVOT", "UNPLUG", "UNPROTECTED", "UNQUIESCE", "UNRECOVERABLE", "UNRESTRICTED", 
			"UNSUBSCRIBE", "UNTIL", "UNUSABLE", "UNUSED", "UPDATABLE", "UPDATED", 
			"UPDATE", "UPDATEXML", "UPD_INDEXES", "UPD_JOININDEX", "UPGRADE", "UPPER", 
			"UPSERT", "UROWID", "USABLE", "USAGE", "USE_ANTI", "USE_CONCAT", "USE_CUBE", 
			"USE_HASH_AGGREGATION", "USE_HASH_GBY_FOR_PUSHDOWN", "USE_HASH", "USE_HIDDEN_PARTITIONS", 
			"USE_INVISIBLE_INDEXES", "USE_MERGE_CARTESIAN", "USE_MERGE", "USE_NL", 
			"USE_NL_WITH_INDEX", "USE_PRIVATE_OUTLINES", "USER_DATA", "USER_DEFINED", 
			"USERENV", "USERGROUP", "USER_RECYCLEBIN", "USERS", "USER_TABLESPACES", 
			"USER", "USE_SEMI", "USE_STORED_OUTLINES", "USE_TTT_FOR_GSETS", "USE", 
			"USE_VECTOR_AGGREGATION", "USE_WEAK_NAME_RESL", "USING_NO_EXPAND", "USING", 
			"UTF16BE", "UTF16LE", "UTF32", "UTF8", "V1", "V2", "VALIDATE", "VALIDATION", 
			"VALID_TIME_END", "VALUES", "VALUE", "VARCHAR2", "VARCHAR", "VARIABLE", 
			"VAR_POP", "VARRAYS", "VARRAY", "VAR_SAMP", "VARYING", "VECTOR_READ_TRACE", 
			"VECTOR_READ", "VECTOR_TRANSFORM_DIMS", "VECTOR_TRANSFORM_FACT", "VECTOR_TRANSFORM", 
			"VERIFIER", "VERIFY", "VERSIONING", "VERSIONS_ENDSCN", "VERSIONS_ENDTIME", 
			"VERSIONS_OPERATION", "VERSIONS_STARTSCN", "VERSIONS_STARTTIME", "VERSIONS", 
			"VERSIONS_XID", "VERSION", "VIEW", "VIOLATION", "VIRTUAL", "VISIBILITY", 
			"VISIBLE", "VOLUME", "VSIZE", "WAIT", "WALLET", "WARNING", "WEEKS", "WEEK", 
			"WELLFORMED", "WHENEVER", "WHEN", "WHERE", "WHILE", "WHITESPACE", "WIDTH_BUCKET", 
			"WITHIN", "WITHOUT", "WITH_PLSQL", "WITH", "WORK", "WRAPPED", "WRAPPER", 
			"WRITE", "XDB_FASTPATH_INSERT", "XDB", "X_DYN_PRUNE", "XID", "XML2OBJECT", 
			"XMLAGG", "XMLATTRIBUTES", "XMLCAST", "XMLCDATA", "XMLCOLATTVAL", "XMLCOMMENT", 
			"XMLCONCAT", "XMLDIFF", "XML_DML_RWT_STMT", "XMLELEMENT", "XMLEXISTS2", 
			"XMLEXISTS", "XMLFOREST", "XMLINDEX", "XMLINDEX_REWRITE_IN_SELECT", "XMLINDEX_REWRITE", 
			"XMLINDEX_SEL_IDX_TBL", "XMLISNODE", "XMLISVALID", "XMLNAMESPACES", "XMLPARSE", 
			"XMLPATCH", "XMLPI", "XMLQUERYVAL", "XMLQUERY", "XMLROOT", "XMLSCHEMA", 
			"XMLSERIALIZE", "XMLTABLE", "XMLTRANSFORMBLOB", "XMLTRANSFORM", "XMLTYPE", 
			"XML", "XPATHTABLE", "XS_SYS_CONTEXT", "XS", "XTRANSPORT", "YEARS", "YEAR", 
			"YES", "YMINTERVAL_UNCONSTRAINED", "ZONEMAP", "ZONE", "PREDICTION", "PREDICTION_BOUNDS", 
			"PREDICTION_COST", "PREDICTION_DETAILS", "PREDICTION_PROBABILITY", "PREDICTION_SET", 
			"CUME_DIST", "DENSE_RANK", "LISTAGG", "PERCENT_RANK", "PERCENTILE_CONT", 
			"PERCENTILE_DISC", "RANK", "AVG", "CORR", "COVAR_", "DECODE", "LAG", 
			"LEAD", "MAX", "MEDIAN", "MIN", "NTILE", "NVL", "RATIO_TO_REPORT", "REGR_", 
			"ROUND", "ROW_NUMBER", "SUBSTR", "TO_CHAR", "TRIM", "SUM", "STDDEV", 
			"VAR_", "VARIANCE", "LEAST", "GREATEST", "TO_DATE", "NATIONAL_CHAR_STRING_LIT", 
			"BIT_STRING_LIT", "HEX_STRING_LIT", "DOUBLE_PERIOD", "PERIOD", "UNSIGNED_INTEGER", 
			"APPROXIMATE_NUM_LIT", "CHAR_STRING", "DELIMITED_ID", "PERCENT", "AMPERSAND", 
			"LEFT_PAREN", "RIGHT_PAREN", "DOUBLE_ASTERISK", "ASTERISK", "PLUS_SIGN", 
			"MINUS_SIGN", "COMMA", "SOLIDUS", "AT_SIGN", "ASSIGN_OP", "BINDVAR", 
			"NOT_EQUAL_OP", "CARRET_OPERATOR_PART", "TILDE_OPERATOR_PART", "EXCLAMATION_OPERATOR_PART", 
			"GREATER_THAN_OP", "LESS_THAN_OP", "COLON", "SEMICOLON", "BAR", "EQUALS_OP", 
			"LEFT_BRACKET", "RIGHT_BRACKET", "INTRODUCER", "SINGLE_LINE_COMMENT", 
			"MULTI_LINE_COMMENT", "REGULAR_ID", "SPACES"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "OracleParser.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public OracleParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	public static class ProgramContext extends ParserRuleContext {
		public RootContext root() {
			return getRuleContext(RootContext.class,0);
		}
		public TerminalNode EOF() { return getToken(OracleParser.EOF, 0); }
		public ProgramContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_program; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleParserListener ) ((OracleParserListener)listener).enterProgram(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleParserListener ) ((OracleParserListener)listener).exitProgram(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleParserVisitor ) return ((OracleParserVisitor<? extends T>)visitor).visitProgram(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProgramContext program() throws RecognitionException {
		ProgramContext _localctx = new ProgramContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_program);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(40);
			root();
			setState(41);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RootContext extends ParserRuleContext {
		public StatementContext statement() {
			return getRuleContext(StatementContext.class,0);
		}
		public TerminalNode EOF() { return getToken(OracleParser.EOF, 0); }
		public TerminalNode SEMICOLON() { return getToken(OracleParser.SEMICOLON, 0); }
		public RootContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_root; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleParserListener ) ((OracleParserListener)listener).enterRoot(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleParserListener ) ((OracleParserListener)listener).exitRoot(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleParserVisitor ) return ((OracleParserVisitor<? extends T>)visitor).visitRoot(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RootContext root() throws RecognitionException {
		RootContext _localctx = new RootContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_root);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(43);
			statement();
			setState(45);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SEMICOLON) {
				{
				setState(44);
				match(SEMICOLON);
				}
			}

			setState(47);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StatementContext extends ParserRuleContext {
		public Create_tableContext create_table() {
			return getRuleContext(Create_tableContext.class,0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleParserListener ) ((OracleParserListener)listener).enterStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleParserListener ) ((OracleParserListener)listener).exitStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleParserVisitor ) return ((OracleParserVisitor<? extends T>)visitor).visitStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StatementContext statement() throws RecognitionException {
		StatementContext _localctx = new StatementContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(49);
			create_table();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_tableContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(OracleParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(OracleParser.TABLE, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public Relational_tableContext relational_table() {
			return getRuleContext(Relational_tableContext.class,0);
		}
		public Create_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleParserListener ) ((OracleParserListener)listener).enterCreate_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleParserListener ) ((OracleParserListener)listener).exitCreate_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleParserVisitor ) return ((OracleParserVisitor<? extends T>)visitor).visitCreate_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_tableContext create_table() throws RecognitionException {
		Create_tableContext _localctx = new Create_tableContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_create_table);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(51);
			match(CREATE);
			setState(52);
			match(TABLE);
			setState(53);
			table_name();
			setState(54);
			relational_table();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(OracleParser.PERIOD, 0); }
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Table_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleParserListener ) ((OracleParserListener)listener).enterTable_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleParserListener ) ((OracleParserListener)listener).exitTable_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleParserVisitor ) return ((OracleParserVisitor<? extends T>)visitor).visitTable_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_nameContext table_name() throws RecognitionException {
		Table_nameContext _localctx = new Table_nameContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_table_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(56);
			identifier();
			setState(59);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PERIOD) {
				{
				setState(57);
				match(PERIOD);
				setState(58);
				id_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifierContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public TerminalNode INTRODUCER() { return getToken(OracleParser.INTRODUCER, 0); }
		public Char_set_nameContext char_set_name() {
			return getRuleContext(Char_set_nameContext.class,0);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleParserListener ) ((OracleParserListener)listener).enterIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleParserListener ) ((OracleParserListener)listener).exitIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleParserVisitor ) return ((OracleParserVisitor<? extends T>)visitor).visitIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdentifierContext identifier() throws RecognitionException {
		IdentifierContext _localctx = new IdentifierContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_identifier);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(63);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTRODUCER) {
				{
				setState(61);
				match(INTRODUCER);
				setState(62);
				char_set_name();
				}
			}

			setState(65);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Char_set_nameContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public List<TerminalNode> PERIOD() { return getTokens(OracleParser.PERIOD); }
		public TerminalNode PERIOD(int i) {
			return getToken(OracleParser.PERIOD, i);
		}
		public Char_set_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_char_set_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleParserListener ) ((OracleParserListener)listener).enterChar_set_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleParserListener ) ((OracleParserListener)listener).exitChar_set_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleParserVisitor ) return ((OracleParserVisitor<? extends T>)visitor).visitChar_set_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Char_set_nameContext char_set_name() throws RecognitionException {
		Char_set_nameContext _localctx = new Char_set_nameContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_char_set_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(67);
			id_expression();
			setState(72);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(68);
				match(PERIOD);
				setState(69);
				id_expression();
				}
				}
				setState(74);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Id_expressionContext extends ParserRuleContext {
		public Regular_idContext regular_id() {
			return getRuleContext(Regular_idContext.class,0);
		}
		public TerminalNode DELIMITED_ID() { return getToken(OracleParser.DELIMITED_ID, 0); }
		public Id_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_id_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleParserListener ) ((OracleParserListener)listener).enterId_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleParserListener ) ((OracleParserListener)listener).exitId_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleParserVisitor ) return ((OracleParserVisitor<? extends T>)visitor).visitId_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Id_expressionContext id_expression() throws RecognitionException {
		Id_expressionContext _localctx = new Id_expressionContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_id_expression);
		try {
			setState(77);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(75);
				regular_id();
				}
				break;
			case DELIMITED_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(76);
				match(DELIMITED_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Relational_tableContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(OracleParser.LEFT_PAREN, 0); }
		public List<Relational_propertyContext> relational_property() {
			return getRuleContexts(Relational_propertyContext.class);
		}
		public Relational_propertyContext relational_property(int i) {
			return getRuleContext(Relational_propertyContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(OracleParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(OracleParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(OracleParser.COMMA, i);
		}
		public Relational_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relational_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleParserListener ) ((OracleParserListener)listener).enterRelational_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleParserListener ) ((OracleParserListener)listener).exitRelational_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleParserVisitor ) return ((OracleParserVisitor<? extends T>)visitor).visitRelational_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Relational_tableContext relational_table() throws RecognitionException {
		Relational_tableContext _localctx = new Relational_tableContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_relational_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(90);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(79);
				match(LEFT_PAREN);
				setState(80);
				relational_property();
				setState(85);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(81);
					match(COMMA);
					setState(82);
					relational_property();
					}
					}
					setState(87);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(88);
				match(RIGHT_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Relational_propertyContext extends ParserRuleContext {
		public Column_definitionContext column_definition() {
			return getRuleContext(Column_definitionContext.class,0);
		}
		public Relational_propertyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relational_property; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleParserListener ) ((OracleParserListener)listener).enterRelational_property(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleParserListener ) ((OracleParserListener)listener).exitRelational_property(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleParserVisitor ) return ((OracleParserVisitor<? extends T>)visitor).visitRelational_property(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Relational_propertyContext relational_property() throws RecognitionException {
		Relational_propertyContext _localctx = new Relational_propertyContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_relational_property);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(92);
			column_definition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_definitionContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public DatatypeContext datatype() {
			return getRuleContext(DatatypeContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(OracleParser.DEFAULT, 0); }
		public Default_valueContext default_value() {
			return getRuleContext(Default_valueContext.class,0);
		}
		public List<Inline_constraintContext> inline_constraint() {
			return getRuleContexts(Inline_constraintContext.class);
		}
		public Inline_constraintContext inline_constraint(int i) {
			return getRuleContext(Inline_constraintContext.class,i);
		}
		public Column_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleParserListener ) ((OracleParserListener)listener).enterColumn_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleParserListener ) ((OracleParserListener)listener).exitColumn_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleParserVisitor ) return ((OracleParserVisitor<? extends T>)visitor).visitColumn_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_definitionContext column_definition() throws RecognitionException {
		Column_definitionContext _localctx = new Column_definitionContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_column_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(94);
			column_name();
			setState(95);
			datatype();
			setState(98);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT) {
				{
				setState(96);
				match(DEFAULT);
				setState(97);
				default_value();
				}
			}

			setState(103);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==NOT || _la==NULL || _la==PRIMARY || _la==UNIQUE) {
				{
				{
				setState(100);
				inline_constraint();
				}
				}
				setState(105);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Default_valueContext extends ParserRuleContext {
		public TerminalNode UNSIGNED_INTEGER() { return getToken(OracleParser.UNSIGNED_INTEGER, 0); }
		public TerminalNode CHAR_STRING() { return getToken(OracleParser.CHAR_STRING, 0); }
		public Default_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_default_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleParserListener ) ((OracleParserListener)listener).enterDefault_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleParserListener ) ((OracleParserListener)listener).exitDefault_value(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleParserVisitor ) return ((OracleParserVisitor<? extends T>)visitor).visitDefault_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Default_valueContext default_value() throws RecognitionException {
		Default_valueContext _localctx = new Default_valueContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_default_value);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(106);
			_la = _input.LA(1);
			if ( !(_la==UNSIGNED_INTEGER || _la==CHAR_STRING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public List<TerminalNode> PERIOD() { return getTokens(OracleParser.PERIOD); }
		public TerminalNode PERIOD(int i) {
			return getToken(OracleParser.PERIOD, i);
		}
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Column_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleParserListener ) ((OracleParserListener)listener).enterColumn_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleParserListener ) ((OracleParserListener)listener).exitColumn_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleParserVisitor ) return ((OracleParserVisitor<? extends T>)visitor).visitColumn_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_nameContext column_name() throws RecognitionException {
		Column_nameContext _localctx = new Column_nameContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_column_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(108);
			identifier();
			setState(113);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(109);
				match(PERIOD);
				setState(110);
				id_expression();
				}
				}
				setState(115);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DatatypeContext extends ParserRuleContext {
		public Native_datatype_elementContext native_datatype_element() {
			return getRuleContext(Native_datatype_elementContext.class,0);
		}
		public Precision_partContext precision_part() {
			return getRuleContext(Precision_partContext.class,0);
		}
		public DatatypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datatype; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleParserListener ) ((OracleParserListener)listener).enterDatatype(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleParserListener ) ((OracleParserListener)listener).exitDatatype(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleParserVisitor ) return ((OracleParserVisitor<? extends T>)visitor).visitDatatype(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DatatypeContext datatype() throws RecognitionException {
		DatatypeContext _localctx = new DatatypeContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_datatype);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(116);
			native_datatype_element();
			setState(118);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(117);
				precision_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Inline_constraintContext extends ParserRuleContext {
		public TerminalNode NULL() { return getToken(OracleParser.NULL, 0); }
		public TerminalNode UNIQUE() { return getToken(OracleParser.UNIQUE, 0); }
		public TerminalNode PRIMARY() { return getToken(OracleParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(OracleParser.KEY, 0); }
		public Constraint_stateContext constraint_state() {
			return getRuleContext(Constraint_stateContext.class,0);
		}
		public TerminalNode NOT() { return getToken(OracleParser.NOT, 0); }
		public Inline_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_inline_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleParserListener ) ((OracleParserListener)listener).enterInline_constraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleParserListener ) ((OracleParserListener)listener).exitInline_constraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleParserVisitor ) return ((OracleParserVisitor<? extends T>)visitor).visitInline_constraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Inline_constraintContext inline_constraint() throws RecognitionException {
		Inline_constraintContext _localctx = new Inline_constraintContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_inline_constraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(127);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOT:
			case NULL:
				{
				setState(121);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(120);
					match(NOT);
					}
				}

				setState(123);
				match(NULL);
				}
				break;
			case UNIQUE:
				{
				setState(124);
				match(UNIQUE);
				}
				break;
			case PRIMARY:
				{
				setState(125);
				match(PRIMARY);
				setState(126);
				match(KEY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(130);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,13,_ctx) ) {
			case 1:
				{
				setState(129);
				constraint_state();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constraint_stateContext extends ParserRuleContext {
		public List<TerminalNode> DEFERRABLE() { return getTokens(OracleParser.DEFERRABLE); }
		public TerminalNode DEFERRABLE(int i) {
			return getToken(OracleParser.DEFERRABLE, i);
		}
		public List<TerminalNode> INITIALLY() { return getTokens(OracleParser.INITIALLY); }
		public TerminalNode INITIALLY(int i) {
			return getToken(OracleParser.INITIALLY, i);
		}
		public List<TerminalNode> IMMEDIATE() { return getTokens(OracleParser.IMMEDIATE); }
		public TerminalNode IMMEDIATE(int i) {
			return getToken(OracleParser.IMMEDIATE, i);
		}
		public List<TerminalNode> DEFERRED() { return getTokens(OracleParser.DEFERRED); }
		public TerminalNode DEFERRED(int i) {
			return getToken(OracleParser.DEFERRED, i);
		}
		public List<TerminalNode> RELY() { return getTokens(OracleParser.RELY); }
		public TerminalNode RELY(int i) {
			return getToken(OracleParser.RELY, i);
		}
		public List<TerminalNode> NORELY() { return getTokens(OracleParser.NORELY); }
		public TerminalNode NORELY(int i) {
			return getToken(OracleParser.NORELY, i);
		}
		public List<TerminalNode> ENABLE() { return getTokens(OracleParser.ENABLE); }
		public TerminalNode ENABLE(int i) {
			return getToken(OracleParser.ENABLE, i);
		}
		public List<TerminalNode> DISABLE() { return getTokens(OracleParser.DISABLE); }
		public TerminalNode DISABLE(int i) {
			return getToken(OracleParser.DISABLE, i);
		}
		public List<TerminalNode> VALIDATE() { return getTokens(OracleParser.VALIDATE); }
		public TerminalNode VALIDATE(int i) {
			return getToken(OracleParser.VALIDATE, i);
		}
		public List<TerminalNode> NOVALIDATE() { return getTokens(OracleParser.NOVALIDATE); }
		public TerminalNode NOVALIDATE(int i) {
			return getToken(OracleParser.NOVALIDATE, i);
		}
		public List<TerminalNode> NOT() { return getTokens(OracleParser.NOT); }
		public TerminalNode NOT(int i) {
			return getToken(OracleParser.NOT, i);
		}
		public Constraint_stateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraint_state; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleParserListener ) ((OracleParserListener)listener).enterConstraint_state(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleParserListener ) ((OracleParserListener)listener).exitConstraint_state(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleParserVisitor ) return ((OracleParserVisitor<? extends T>)visitor).visitConstraint_state(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constraint_stateContext constraint_state() throws RecognitionException {
		Constraint_stateContext _localctx = new Constraint_stateContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_constraint_state);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(141); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					setState(141);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case DEFERRABLE:
					case NOT:
						{
						setState(133);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(132);
							match(NOT);
							}
						}

						setState(135);
						match(DEFERRABLE);
						}
						break;
					case INITIALLY:
						{
						setState(136);
						match(INITIALLY);
						setState(137);
						_la = _input.LA(1);
						if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case NORELY:
					case RELY:
						{
						setState(138);
						_la = _input.LA(1);
						if ( !(_la==NORELY || _la==RELY) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case DISABLE:
					case ENABLE:
						{
						setState(139);
						_la = _input.LA(1);
						if ( !(_la==DISABLE || _la==ENABLE) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case NOVALIDATE:
					case VALIDATE:
						{
						setState(140);
						_la = _input.LA(1);
						if ( !(_la==NOVALIDATE || _la==VALIDATE) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(143); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,16,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Precision_partContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(OracleParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(OracleParser.RIGHT_PAREN, 0); }
		public List<NumericContext> numeric() {
			return getRuleContexts(NumericContext.class);
		}
		public NumericContext numeric(int i) {
			return getRuleContext(NumericContext.class,i);
		}
		public TerminalNode ASTERISK() { return getToken(OracleParser.ASTERISK, 0); }
		public TerminalNode COMMA() { return getToken(OracleParser.COMMA, 0); }
		public TerminalNode CHAR() { return getToken(OracleParser.CHAR, 0); }
		public TerminalNode BYTE() { return getToken(OracleParser.BYTE, 0); }
		public Precision_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_precision_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleParserListener ) ((OracleParserListener)listener).enterPrecision_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleParserListener ) ((OracleParserListener)listener).exitPrecision_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleParserVisitor ) return ((OracleParserVisitor<? extends T>)visitor).visitPrecision_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Precision_partContext precision_part() throws RecognitionException {
		Precision_partContext _localctx = new Precision_partContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_precision_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(145);
			match(LEFT_PAREN);
			setState(148);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
				{
				setState(146);
				numeric();
				}
				break;
			case ASTERISK:
				{
				setState(147);
				match(ASTERISK);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(152);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(150);
				match(COMMA);
				setState(151);
				numeric();
				}
			}

			setState(155);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BYTE || _la==CHAR) {
				{
				setState(154);
				_la = _input.LA(1);
				if ( !(_la==BYTE || _la==CHAR) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(157);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Native_datatype_elementContext extends ParserRuleContext {
		public TerminalNode BINARY_INTEGER() { return getToken(OracleParser.BINARY_INTEGER, 0); }
		public TerminalNode PLS_INTEGER() { return getToken(OracleParser.PLS_INTEGER, 0); }
		public TerminalNode NATURAL() { return getToken(OracleParser.NATURAL, 0); }
		public TerminalNode BINARY_FLOAT() { return getToken(OracleParser.BINARY_FLOAT, 0); }
		public TerminalNode BINARY_DOUBLE() { return getToken(OracleParser.BINARY_DOUBLE, 0); }
		public TerminalNode NATURALN() { return getToken(OracleParser.NATURALN, 0); }
		public TerminalNode POSITIVE() { return getToken(OracleParser.POSITIVE, 0); }
		public TerminalNode POSITIVEN() { return getToken(OracleParser.POSITIVEN, 0); }
		public TerminalNode SIGNTYPE() { return getToken(OracleParser.SIGNTYPE, 0); }
		public TerminalNode SIMPLE_INTEGER() { return getToken(OracleParser.SIMPLE_INTEGER, 0); }
		public TerminalNode NVARCHAR2() { return getToken(OracleParser.NVARCHAR2, 0); }
		public TerminalNode DEC() { return getToken(OracleParser.DEC, 0); }
		public TerminalNode INTEGER() { return getToken(OracleParser.INTEGER, 0); }
		public TerminalNode INT() { return getToken(OracleParser.INT, 0); }
		public TerminalNode NUMERIC() { return getToken(OracleParser.NUMERIC, 0); }
		public TerminalNode SMALLINT() { return getToken(OracleParser.SMALLINT, 0); }
		public TerminalNode NUMBER() { return getToken(OracleParser.NUMBER, 0); }
		public TerminalNode DECIMAL() { return getToken(OracleParser.DECIMAL, 0); }
		public TerminalNode DOUBLE() { return getToken(OracleParser.DOUBLE, 0); }
		public TerminalNode PRECISION() { return getToken(OracleParser.PRECISION, 0); }
		public TerminalNode FLOAT() { return getToken(OracleParser.FLOAT, 0); }
		public TerminalNode REAL() { return getToken(OracleParser.REAL, 0); }
		public TerminalNode NCHAR() { return getToken(OracleParser.NCHAR, 0); }
		public TerminalNode LONG() { return getToken(OracleParser.LONG, 0); }
		public TerminalNode RAW() { return getToken(OracleParser.RAW, 0); }
		public TerminalNode CHAR() { return getToken(OracleParser.CHAR, 0); }
		public TerminalNode CHARACTER() { return getToken(OracleParser.CHARACTER, 0); }
		public TerminalNode VARCHAR2() { return getToken(OracleParser.VARCHAR2, 0); }
		public TerminalNode VARCHAR() { return getToken(OracleParser.VARCHAR, 0); }
		public TerminalNode STRING() { return getToken(OracleParser.STRING, 0); }
		public TerminalNode BOOLEAN() { return getToken(OracleParser.BOOLEAN, 0); }
		public TerminalNode DATE() { return getToken(OracleParser.DATE, 0); }
		public TerminalNode ROWID() { return getToken(OracleParser.ROWID, 0); }
		public TerminalNode UROWID() { return getToken(OracleParser.UROWID, 0); }
		public TerminalNode YEAR() { return getToken(OracleParser.YEAR, 0); }
		public TerminalNode MONTH() { return getToken(OracleParser.MONTH, 0); }
		public TerminalNode DAY() { return getToken(OracleParser.DAY, 0); }
		public TerminalNode HOUR() { return getToken(OracleParser.HOUR, 0); }
		public TerminalNode MINUTE() { return getToken(OracleParser.MINUTE, 0); }
		public TerminalNode SECOND() { return getToken(OracleParser.SECOND, 0); }
		public TerminalNode TIMEZONE_HOUR() { return getToken(OracleParser.TIMEZONE_HOUR, 0); }
		public TerminalNode TIMEZONE_MINUTE() { return getToken(OracleParser.TIMEZONE_MINUTE, 0); }
		public TerminalNode TIMEZONE_REGION() { return getToken(OracleParser.TIMEZONE_REGION, 0); }
		public TerminalNode TIMEZONE_ABBR() { return getToken(OracleParser.TIMEZONE_ABBR, 0); }
		public TerminalNode TIMESTAMP() { return getToken(OracleParser.TIMESTAMP, 0); }
		public TerminalNode TIMESTAMP_UNCONSTRAINED() { return getToken(OracleParser.TIMESTAMP_UNCONSTRAINED, 0); }
		public TerminalNode TIMESTAMP_TZ_UNCONSTRAINED() { return getToken(OracleParser.TIMESTAMP_TZ_UNCONSTRAINED, 0); }
		public TerminalNode TIMESTAMP_LTZ_UNCONSTRAINED() { return getToken(OracleParser.TIMESTAMP_LTZ_UNCONSTRAINED, 0); }
		public TerminalNode YMINTERVAL_UNCONSTRAINED() { return getToken(OracleParser.YMINTERVAL_UNCONSTRAINED, 0); }
		public TerminalNode DSINTERVAL_UNCONSTRAINED() { return getToken(OracleParser.DSINTERVAL_UNCONSTRAINED, 0); }
		public TerminalNode BFILE() { return getToken(OracleParser.BFILE, 0); }
		public TerminalNode BLOB() { return getToken(OracleParser.BLOB, 0); }
		public TerminalNode CLOB() { return getToken(OracleParser.CLOB, 0); }
		public TerminalNode NCLOB() { return getToken(OracleParser.NCLOB, 0); }
		public TerminalNode MLSLABEL() { return getToken(OracleParser.MLSLABEL, 0); }
		public Native_datatype_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_native_datatype_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleParserListener ) ((OracleParserListener)listener).enterNative_datatype_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleParserListener ) ((OracleParserListener)listener).exitNative_datatype_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleParserVisitor ) return ((OracleParserVisitor<? extends T>)visitor).visitNative_datatype_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Native_datatype_elementContext native_datatype_element() throws RecognitionException {
		Native_datatype_elementContext _localctx = new Native_datatype_elementContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_native_datatype_element);
		int _la;
		try {
			setState(219);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BINARY_INTEGER:
				enterOuterAlt(_localctx, 1);
				{
				setState(159);
				match(BINARY_INTEGER);
				}
				break;
			case PLS_INTEGER:
				enterOuterAlt(_localctx, 2);
				{
				setState(160);
				match(PLS_INTEGER);
				}
				break;
			case NATURAL:
				enterOuterAlt(_localctx, 3);
				{
				setState(161);
				match(NATURAL);
				}
				break;
			case BINARY_FLOAT:
				enterOuterAlt(_localctx, 4);
				{
				setState(162);
				match(BINARY_FLOAT);
				}
				break;
			case BINARY_DOUBLE:
				enterOuterAlt(_localctx, 5);
				{
				setState(163);
				match(BINARY_DOUBLE);
				}
				break;
			case NATURALN:
				enterOuterAlt(_localctx, 6);
				{
				setState(164);
				match(NATURALN);
				}
				break;
			case POSITIVE:
				enterOuterAlt(_localctx, 7);
				{
				setState(165);
				match(POSITIVE);
				}
				break;
			case POSITIVEN:
				enterOuterAlt(_localctx, 8);
				{
				setState(166);
				match(POSITIVEN);
				}
				break;
			case SIGNTYPE:
				enterOuterAlt(_localctx, 9);
				{
				setState(167);
				match(SIGNTYPE);
				}
				break;
			case SIMPLE_INTEGER:
				enterOuterAlt(_localctx, 10);
				{
				setState(168);
				match(SIMPLE_INTEGER);
				}
				break;
			case NVARCHAR2:
				enterOuterAlt(_localctx, 11);
				{
				setState(169);
				match(NVARCHAR2);
				}
				break;
			case DEC:
				enterOuterAlt(_localctx, 12);
				{
				setState(170);
				match(DEC);
				}
				break;
			case INTEGER:
				enterOuterAlt(_localctx, 13);
				{
				setState(171);
				match(INTEGER);
				}
				break;
			case INT:
				enterOuterAlt(_localctx, 14);
				{
				setState(172);
				match(INT);
				}
				break;
			case NUMERIC:
				enterOuterAlt(_localctx, 15);
				{
				setState(173);
				match(NUMERIC);
				}
				break;
			case SMALLINT:
				enterOuterAlt(_localctx, 16);
				{
				setState(174);
				match(SMALLINT);
				}
				break;
			case NUMBER:
				enterOuterAlt(_localctx, 17);
				{
				setState(175);
				match(NUMBER);
				}
				break;
			case DECIMAL:
				enterOuterAlt(_localctx, 18);
				{
				setState(176);
				match(DECIMAL);
				}
				break;
			case DOUBLE:
				enterOuterAlt(_localctx, 19);
				{
				setState(177);
				match(DOUBLE);
				setState(179);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRECISION) {
					{
					setState(178);
					match(PRECISION);
					}
				}

				}
				break;
			case FLOAT:
				enterOuterAlt(_localctx, 20);
				{
				setState(181);
				match(FLOAT);
				}
				break;
			case REAL:
				enterOuterAlt(_localctx, 21);
				{
				setState(182);
				match(REAL);
				}
				break;
			case NCHAR:
				enterOuterAlt(_localctx, 22);
				{
				setState(183);
				match(NCHAR);
				}
				break;
			case LONG:
				enterOuterAlt(_localctx, 23);
				{
				setState(184);
				match(LONG);
				setState(186);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RAW) {
					{
					setState(185);
					match(RAW);
					}
				}

				}
				break;
			case CHAR:
				enterOuterAlt(_localctx, 24);
				{
				setState(188);
				match(CHAR);
				}
				break;
			case CHARACTER:
				enterOuterAlt(_localctx, 25);
				{
				setState(189);
				match(CHARACTER);
				}
				break;
			case VARCHAR2:
				enterOuterAlt(_localctx, 26);
				{
				setState(190);
				match(VARCHAR2);
				}
				break;
			case VARCHAR:
				enterOuterAlt(_localctx, 27);
				{
				setState(191);
				match(VARCHAR);
				}
				break;
			case STRING:
				enterOuterAlt(_localctx, 28);
				{
				setState(192);
				match(STRING);
				}
				break;
			case RAW:
				enterOuterAlt(_localctx, 29);
				{
				setState(193);
				match(RAW);
				}
				break;
			case BOOLEAN:
				enterOuterAlt(_localctx, 30);
				{
				setState(194);
				match(BOOLEAN);
				}
				break;
			case DATE:
				enterOuterAlt(_localctx, 31);
				{
				setState(195);
				match(DATE);
				}
				break;
			case ROWID:
				enterOuterAlt(_localctx, 32);
				{
				setState(196);
				match(ROWID);
				}
				break;
			case UROWID:
				enterOuterAlt(_localctx, 33);
				{
				setState(197);
				match(UROWID);
				}
				break;
			case YEAR:
				enterOuterAlt(_localctx, 34);
				{
				setState(198);
				match(YEAR);
				}
				break;
			case MONTH:
				enterOuterAlt(_localctx, 35);
				{
				setState(199);
				match(MONTH);
				}
				break;
			case DAY:
				enterOuterAlt(_localctx, 36);
				{
				setState(200);
				match(DAY);
				}
				break;
			case HOUR:
				enterOuterAlt(_localctx, 37);
				{
				setState(201);
				match(HOUR);
				}
				break;
			case MINUTE:
				enterOuterAlt(_localctx, 38);
				{
				setState(202);
				match(MINUTE);
				}
				break;
			case SECOND:
				enterOuterAlt(_localctx, 39);
				{
				setState(203);
				match(SECOND);
				}
				break;
			case TIMEZONE_HOUR:
				enterOuterAlt(_localctx, 40);
				{
				setState(204);
				match(TIMEZONE_HOUR);
				}
				break;
			case TIMEZONE_MINUTE:
				enterOuterAlt(_localctx, 41);
				{
				setState(205);
				match(TIMEZONE_MINUTE);
				}
				break;
			case TIMEZONE_REGION:
				enterOuterAlt(_localctx, 42);
				{
				setState(206);
				match(TIMEZONE_REGION);
				}
				break;
			case TIMEZONE_ABBR:
				enterOuterAlt(_localctx, 43);
				{
				setState(207);
				match(TIMEZONE_ABBR);
				}
				break;
			case TIMESTAMP:
				enterOuterAlt(_localctx, 44);
				{
				setState(208);
				match(TIMESTAMP);
				}
				break;
			case TIMESTAMP_UNCONSTRAINED:
				enterOuterAlt(_localctx, 45);
				{
				setState(209);
				match(TIMESTAMP_UNCONSTRAINED);
				}
				break;
			case TIMESTAMP_TZ_UNCONSTRAINED:
				enterOuterAlt(_localctx, 46);
				{
				setState(210);
				match(TIMESTAMP_TZ_UNCONSTRAINED);
				}
				break;
			case TIMESTAMP_LTZ_UNCONSTRAINED:
				enterOuterAlt(_localctx, 47);
				{
				setState(211);
				match(TIMESTAMP_LTZ_UNCONSTRAINED);
				}
				break;
			case YMINTERVAL_UNCONSTRAINED:
				enterOuterAlt(_localctx, 48);
				{
				setState(212);
				match(YMINTERVAL_UNCONSTRAINED);
				}
				break;
			case DSINTERVAL_UNCONSTRAINED:
				enterOuterAlt(_localctx, 49);
				{
				setState(213);
				match(DSINTERVAL_UNCONSTRAINED);
				}
				break;
			case BFILE:
				enterOuterAlt(_localctx, 50);
				{
				setState(214);
				match(BFILE);
				}
				break;
			case BLOB:
				enterOuterAlt(_localctx, 51);
				{
				setState(215);
				match(BLOB);
				}
				break;
			case CLOB:
				enterOuterAlt(_localctx, 52);
				{
				setState(216);
				match(CLOB);
				}
				break;
			case NCLOB:
				enterOuterAlt(_localctx, 53);
				{
				setState(217);
				match(NCLOB);
				}
				break;
			case MLSLABEL:
				enterOuterAlt(_localctx, 54);
				{
				setState(218);
				match(MLSLABEL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NumericContext extends ParserRuleContext {
		public TerminalNode UNSIGNED_INTEGER() { return getToken(OracleParser.UNSIGNED_INTEGER, 0); }
		public TerminalNode APPROXIMATE_NUM_LIT() { return getToken(OracleParser.APPROXIMATE_NUM_LIT, 0); }
		public NumericContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleParserListener ) ((OracleParserListener)listener).enterNumeric(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleParserListener ) ((OracleParserListener)listener).exitNumeric(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleParserVisitor ) return ((OracleParserVisitor<? extends T>)visitor).visitNumeric(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NumericContext numeric() throws RecognitionException {
		NumericContext _localctx = new NumericContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_numeric);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(221);
			_la = _input.LA(1);
			if ( !(_la==UNSIGNED_INTEGER || _la==APPROXIMATE_NUM_LIT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Regular_idContext extends ParserRuleContext {
		public TerminalNode REGULAR_ID() { return getToken(OracleParser.REGULAR_ID, 0); }
		public Regular_idContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_regular_id; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OracleParserListener ) ((OracleParserListener)listener).enterRegular_id(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OracleParserListener ) ((OracleParserListener)listener).exitRegular_id(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OracleParserVisitor ) return ((OracleParserVisitor<? extends T>)visitor).visitRegular_id(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Regular_idContext regular_id() throws RecognitionException {
		Regular_idContext _localctx = new Regular_idContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_regular_id);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(223);
			match(REGULAR_ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static final String _serializedATN =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u08cc\u00e4\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\3\2\3\2\3\2\3\3\3\3\5\3\60\n\3\3\3\3\3"+
		"\3\4\3\4\3\5\3\5\3\5\3\5\3\5\3\6\3\6\3\6\5\6>\n\6\3\7\3\7\5\7B\n\7\3\7"+
		"\3\7\3\b\3\b\3\b\7\bI\n\b\f\b\16\bL\13\b\3\t\3\t\5\tP\n\t\3\n\3\n\3\n"+
		"\3\n\7\nV\n\n\f\n\16\nY\13\n\3\n\3\n\5\n]\n\n\3\13\3\13\3\f\3\f\3\f\3"+
		"\f\5\fe\n\f\3\f\7\fh\n\f\f\f\16\fk\13\f\3\r\3\r\3\16\3\16\3\16\7\16r\n"+
		"\16\f\16\16\16u\13\16\3\17\3\17\5\17y\n\17\3\20\5\20|\n\20\3\20\3\20\3"+
		"\20\3\20\5\20\u0082\n\20\3\20\5\20\u0085\n\20\3\21\5\21\u0088\n\21\3\21"+
		"\3\21\3\21\3\21\3\21\3\21\6\21\u0090\n\21\r\21\16\21\u0091\3\22\3\22\3"+
		"\22\5\22\u0097\n\22\3\22\3\22\5\22\u009b\n\22\3\22\5\22\u009e\n\22\3\22"+
		"\3\22\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23"+
		"\3\23\3\23\3\23\3\23\3\23\3\23\3\23\5\23\u00b6\n\23\3\23\3\23\3\23\3\23"+
		"\3\23\5\23\u00bd\n\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23"+
		"\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23"+
		"\3\23\3\23\3\23\3\23\3\23\3\23\3\23\5\23\u00de\n\23\3\24\3\24\3\25\3\25"+
		"\3\25\2\2\26\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(\2\t\4\2\u08ab"+
		"\u08ab\u08ad\u08ad\4\2\u0164\u0164\u0267\u0267\4\2\u0414\u0414\u057a\u057a"+
		"\4\2\u0181\u0181\u01b9\u01b9\4\2\u043e\u043e\u0818\u0818\4\2\u0097\u0097"+
		"\u00b2\u00b2\3\2\u08ab\u08ac\2\u011e\2*\3\2\2\2\4-\3\2\2\2\6\63\3\2\2"+
		"\2\b\65\3\2\2\2\n:\3\2\2\2\fA\3\2\2\2\16E\3\2\2\2\20O\3\2\2\2\22\\\3\2"+
		"\2\2\24^\3\2\2\2\26`\3\2\2\2\30l\3\2\2\2\32n\3\2\2\2\34v\3\2\2\2\36\u0081"+
		"\3\2\2\2 \u008f\3\2\2\2\"\u0093\3\2\2\2$\u00dd\3\2\2\2&\u00df\3\2\2\2"+
		"(\u00e1\3\2\2\2*+\5\4\3\2+,\7\2\2\3,\3\3\2\2\2-/\5\6\4\2.\60\7\u08c3\2"+
		"\2/.\3\2\2\2/\60\3\2\2\2\60\61\3\2\2\2\61\62\7\2\2\3\62\5\3\2\2\2\63\64"+
		"\5\b\5\2\64\7\3\2\2\2\65\66\7\u0122\2\2\66\67\7\u077a\2\2\678\5\n\6\2"+
		"89\5\22\n\29\t\3\2\2\2:=\5\f\7\2;<\7\u08aa\2\2<>\5\20\t\2=;\3\2\2\2=>"+
		"\3\2\2\2>\13\3\2\2\2?@\7\u08c8\2\2@B\5\16\b\2A?\3\2\2\2AB\3\2\2\2BC\3"+
		"\2\2\2CD\5\20\t\2D\r\3\2\2\2EJ\5\20\t\2FG\7\u08aa\2\2GI\5\20\t\2HF\3\2"+
		"\2\2IL\3\2\2\2JH\3\2\2\2JK\3\2\2\2K\17\3\2\2\2LJ\3\2\2\2MP\5(\25\2NP\7"+
		"\u08ae\2\2OM\3\2\2\2ON\3\2\2\2P\21\3\2\2\2QR\7\u08b1\2\2RW\5\24\13\2S"+
		"T\7\u08b7\2\2TV\5\24\13\2US\3\2\2\2VY\3\2\2\2WU\3\2\2\2WX\3\2\2\2XZ\3"+
		"\2\2\2YW\3\2\2\2Z[\7\u08b2\2\2[]\3\2\2\2\\Q\3\2\2\2\\]\3\2\2\2]\23\3\2"+
		"\2\2^_\5\26\f\2_\25\3\2\2\2`a\5\32\16\2ad\5\34\17\2bc\7\u0161\2\2ce\5"+
		"\30\r\2db\3\2\2\2de\3\2\2\2ei\3\2\2\2fh\5\36\20\2gf\3\2\2\2hk\3\2\2\2"+
		"ig\3\2\2\2ij\3\2\2\2j\27\3\2\2\2ki\3\2\2\2lm\t\2\2\2m\31\3\2\2\2ns\5\f"+
		"\7\2op\7\u08aa\2\2pr\5\20\t\2qo\3\2\2\2ru\3\2\2\2sq\3\2\2\2st\3\2\2\2"+
		"t\33\3\2\2\2us\3\2\2\2vx\5$\23\2wy\5\"\22\2xw\3\2\2\2xy\3\2\2\2y\35\3"+
		"\2\2\2z|\7\u0433\2\2{z\3\2\2\2{|\3\2\2\2|}\3\2\2\2}\u0082\7\u044b\2\2"+
		"~\u0082\7\u07d4\2\2\177\u0080\7\u051a\2\2\u0080\u0082\7\u02d4\2\2\u0081"+
		"{\3\2\2\2\u0081~\3\2\2\2\u0081\177\3\2\2\2\u0082\u0084\3\2\2\2\u0083\u0085"+
		"\5 \21\2\u0084\u0083\3\2\2\2\u0084\u0085\3\2\2\2\u0085\37\3\2\2\2\u0086"+
		"\u0088\7\u0433\2\2\u0087\u0086\3\2\2\2\u0087\u0088\3\2\2\2\u0088\u0089"+
		"\3\2\2\2\u0089\u0090\7\u0163\2\2\u008a\u008b\7\u0292\2\2\u008b\u0090\t"+
		"\3\2\2\u008c\u0090\t\4\2\2\u008d\u0090\t\5\2\2\u008e\u0090\t\6\2\2\u008f"+
		"\u0087\3\2\2\2\u008f\u008a\3\2\2\2\u008f\u008c\3\2\2\2\u008f\u008d\3\2"+
		"\2\2\u008f\u008e\3\2\2\2\u0090\u0091\3\2\2\2\u0091\u008f\3\2\2\2\u0091"+
		"\u0092\3\2\2\2\u0092!\3\2\2\2\u0093\u0096\7\u08b1\2\2\u0094\u0097\5&\24"+
		"\2\u0095\u0097\7\u08b4\2\2\u0096\u0094\3\2\2\2\u0096\u0095\3\2\2\2\u0097"+
		"\u009a\3\2\2\2\u0098\u0099\7\u08b7\2\2\u0099\u009b\5&\24\2\u009a\u0098"+
		"\3\2\2\2\u009a\u009b\3\2\2\2\u009b\u009d\3\2\2\2\u009c\u009e\t\7\2\2\u009d"+
		"\u009c\3\2\2\2\u009d\u009e\3\2\2\2\u009e\u009f\3\2\2\2\u009f\u00a0\7\u08b2"+
		"\2\2\u00a0#\3\2\2\2\u00a1\u00de\7x\2\2\u00a2\u00de\7\u04ed\2\2\u00a3\u00de"+
		"\7\u0378\2\2\u00a4\u00de\7u\2\2\u00a5\u00de\7r\2\2\u00a6\u00de\7\u0379"+
		"\2\2\u00a7\u00de\7\u04fc\2\2\u00a8\u00de\7\u04fb\2\2\u00a9\u00de\7\u05fa"+
		"\2\2\u00aa\u00de\7\u05fb\2\2\u00ab\u00de\7\u0452\2\2\u00ac\u00de\7\u0158"+
		"\2\2\u00ad\u00de\7\u02ac\2\2\u00ae\u00de\7\u02b4\2\2\u00af\u00de\7\u044e"+
		"\2\2\u00b0\u00de\7\u0607\2\2\u00b1\u00de\7\u044d\2\2\u00b2\u00de\7\u0159"+
		"\2\2\u00b3\u00b5\7\u0199\2\2\u00b4\u00b6\7\u050d\2\2\u00b5\u00b4\3\2\2"+
		"\2\u00b5\u00b6\3\2\2\2\u00b6\u00de\3\2\2\2\u00b7\u00de\7\u0218\2\2\u00b8"+
		"\u00de\7\u054e\2\2\u00b9\u00de\7\u037c\2\2\u00ba\u00bc\7\u0316\2\2\u00bb"+
		"\u00bd\7\u0545\2\2\u00bc\u00bb\3\2\2\2\u00bc\u00bd\3\2\2\2\u00bd\u00de"+
		"\3\2\2\2\u00be\u00de\7\u00b2\2\2\u00bf\u00de\7\u00b1\2\2\u00c0\u00de\7"+
		"\u081d\2\2\u00c1\u00de\7\u081e\2\2\u00c2\u00de\7\u0640\2\2\u00c3\u00de"+
		"\7\u0545\2\2\u00c4\u00de\7\u0088\2\2\u00c5\u00de\7\u0149\2\2\u00c6\u00de"+
		"\7\u05a8\2\2\u00c7\u00de\7\u07f2\2\2\u00c8\u00de\7\u087b\2\2\u00c9\u00de"+
		"\7\u0366\2\2\u00ca\u00de\7\u014b\2\2\u00cb\u00de\7\u0258\2\2\u00cc\u00de"+
		"\7\u034e\2\2\u00cd\u00de\7\u05ca\2\2\u00ce\u00de\7\u0796\2\2\u00cf\u00de"+
		"\7\u0797\2\2\u00d0\u00de\7\u0799\2\2\u00d1\u00de\7\u0795\2\2\u00d2\u00de"+
		"\7\u078f\2\2\u00d3\u00de\7\u0791\2\2\u00d4\u00de\7\u0790\2\2\u00d5\u00de"+
		"\7\u078e\2\2\u00d6\u00de\7\u087d\2\2\u00d7\u00de\7\u019f\2\2\u00d8\u00de"+
		"\7n\2\2\u00d9\u00de\7\u0082\2\2\u00da\u00de\7\u00c2\2\2\u00db\u00de\7"+
		"\u037e\2\2\u00dc\u00de\7\u0353\2\2\u00dd\u00a1\3\2\2\2\u00dd\u00a2\3\2"+
		"\2\2\u00dd\u00a3\3\2\2\2\u00dd\u00a4\3\2\2\2\u00dd\u00a5\3\2\2\2\u00dd"+
		"\u00a6\3\2\2\2\u00dd\u00a7\3\2\2\2\u00dd\u00a8\3\2\2\2\u00dd\u00a9\3\2"+
		"\2\2\u00dd\u00aa\3\2\2\2\u00dd\u00ab\3\2\2\2\u00dd\u00ac\3\2\2\2\u00dd"+
		"\u00ad\3\2\2\2\u00dd\u00ae\3\2\2\2\u00dd\u00af\3\2\2\2\u00dd\u00b0\3\2"+
		"\2\2\u00dd\u00b1\3\2\2\2\u00dd\u00b2\3\2\2\2\u00dd\u00b3\3\2\2\2\u00dd"+
		"\u00b7\3\2\2\2\u00dd\u00b8\3\2\2\2\u00dd\u00b9\3\2\2\2\u00dd\u00ba\3\2"+
		"\2\2\u00dd\u00be\3\2\2\2\u00dd\u00bf\3\2\2\2\u00dd\u00c0\3\2\2\2\u00dd"+
		"\u00c1\3\2\2\2\u00dd\u00c2\3\2\2\2\u00dd\u00c3\3\2\2\2\u00dd\u00c4\3\2"+
		"\2\2\u00dd\u00c5\3\2\2\2\u00dd\u00c6\3\2\2\2\u00dd\u00c7\3\2\2\2\u00dd"+
		"\u00c8\3\2\2\2\u00dd\u00c9\3\2\2\2\u00dd\u00ca\3\2\2\2\u00dd\u00cb\3\2"+
		"\2\2\u00dd\u00cc\3\2\2\2\u00dd\u00cd\3\2\2\2\u00dd\u00ce\3\2\2\2\u00dd"+
		"\u00cf\3\2\2\2\u00dd\u00d0\3\2\2\2\u00dd\u00d1\3\2\2\2\u00dd\u00d2\3\2"+
		"\2\2\u00dd\u00d3\3\2\2\2\u00dd\u00d4\3\2\2\2\u00dd\u00d5\3\2\2\2\u00dd"+
		"\u00d6\3\2\2\2\u00dd\u00d7\3\2\2\2\u00dd\u00d8\3\2\2\2\u00dd\u00d9\3\2"+
		"\2\2\u00dd\u00da\3\2\2\2\u00dd\u00db\3\2\2\2\u00dd\u00dc\3\2\2\2\u00de"+
		"%\3\2\2\2\u00df\u00e0\t\b\2\2\u00e0\'\3\2\2\2\u00e1\u00e2\7\u08cb\2\2"+
		"\u00e2)\3\2\2\2\31/=AJOW\\disx{\u0081\u0084\u0087\u008f\u0091\u0096\u009a"+
		"\u009d\u00b5\u00bc\u00dd";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}