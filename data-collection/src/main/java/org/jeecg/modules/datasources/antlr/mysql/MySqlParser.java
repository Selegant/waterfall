// Generated from /Users/ye/work/hz/waterfall/data-collection/src/main/java/org/jeecg/modules/datasources/antlr/mysql/MySqlParser.g4 by ANTLR 4.9.1
package org.jeecg.modules.datasources.antlr.mysql;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class MySqlParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.9.1", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		SPACE=1, SPEC_MYSQL_COMMENT=2, COMMENT_INPUT=3, LINE_COMMENT=4, ADD=5, 
		ALL=6, ALTER=7, ALWAYS=8, ANALYZE=9, AND=10, AS=11, ASC=12, BEFORE=13, 
		BETWEEN=14, BOTH=15, BY=16, CALL=17, CASCADE=18, CASE=19, CAST=20, CHANGE=21, 
		CHARACTER=22, CHECK=23, COLLATE=24, COLUMN=25, CONDITION=26, CONSTRAINT=27, 
		CONTINUE=28, CONVERT=29, CREATE=30, CROSS=31, CURRENT=32, CURRENT_USER=33, 
		CURSOR=34, DATABASE=35, DATABASES=36, DECLARE=37, DEFAULT=38, DELAYED=39, 
		DELETE=40, DESC=41, DESCRIBE=42, DETERMINISTIC=43, DIAGNOSTICS=44, DISTINCT=45, 
		DISTINCTROW=46, DROP=47, EACH=48, ELSE=49, ELSEIF=50, EMPTY=51, ENCLOSED=52, 
		ESCAPED=53, EXISTS=54, EXIT=55, EXPLAIN=56, FALSE=57, FETCH=58, FOR=59, 
		FORCE=60, FOREIGN=61, FROM=62, FULLTEXT=63, GENERATED=64, GET=65, GRANT=66, 
		GROUP=67, HAVING=68, HIGH_PRIORITY=69, IF=70, IGNORE=71, IN=72, INDEX=73, 
		INFILE=74, INNER=75, INOUT=76, INSERT=77, INTERVAL=78, INTO=79, IS=80, 
		ITERATE=81, JOIN=82, KEY=83, KEYS=84, KILL=85, LEADING=86, LEAVE=87, LEFT=88, 
		LIKE=89, LIMIT=90, LINEAR=91, LINES=92, LOAD=93, LOCK=94, LOOP=95, LOW_PRIORITY=96, 
		MASTER_BIND=97, MASTER_SSL_VERIFY_SERVER_CERT=98, MATCH=99, MAXVALUE=100, 
		MODIFIES=101, NATURAL=102, NOT=103, NO_WRITE_TO_BINLOG=104, NULL_LITERAL=105, 
		NUMBER=106, ON=107, OPTIMIZE=108, OPTION=109, OPTIONALLY=110, OR=111, 
		ORDER=112, OUT=113, OUTER=114, OUTFILE=115, PARTITION=116, PRIMARY=117, 
		PROCEDURE=118, PURGE=119, RANGE=120, READ=121, READS=122, REFERENCES=123, 
		REGEXP=124, RELEASE=125, RENAME=126, REPEAT=127, REPLACE=128, REQUIRE=129, 
		RESIGNAL=130, RESTRICT=131, RETURN=132, REVOKE=133, RIGHT=134, RLIKE=135, 
		SCHEMA=136, SCHEMAS=137, SELECT=138, SET=139, SEPARATOR=140, SHOW=141, 
		SIGNAL=142, SPATIAL=143, SQL=144, SQLEXCEPTION=145, SQLSTATE=146, SQLWARNING=147, 
		SQL_BIG_RESULT=148, SQL_CALC_FOUND_ROWS=149, SQL_SMALL_RESULT=150, SSL=151, 
		STACKED=152, STARTING=153, STRAIGHT_JOIN=154, TABLE=155, TERMINATED=156, 
		THEN=157, TO=158, TRAILING=159, TRIGGER=160, TRUE=161, UNDO=162, UNION=163, 
		UNIQUE=164, UNLOCK=165, UNSIGNED=166, UPDATE=167, USAGE=168, USE=169, 
		USING=170, VALUES=171, WHEN=172, WHERE=173, WHILE=174, WITH=175, WRITE=176, 
		XOR=177, ZEROFILL=178, TINYINT=179, SMALLINT=180, MEDIUMINT=181, MIDDLEINT=182, 
		INT=183, INT1=184, INT2=185, INT3=186, INT4=187, INT8=188, INTEGER=189, 
		BIGINT=190, REAL=191, DOUBLE=192, PRECISION=193, FLOAT=194, FLOAT4=195, 
		FLOAT8=196, DECIMAL=197, DEC=198, NUMERIC=199, DATE=200, TIME=201, TIMESTAMP=202, 
		DATETIME=203, YEAR=204, CHAR=205, VARCHAR=206, NVARCHAR=207, NATIONAL=208, 
		BINARY=209, VARBINARY=210, TINYBLOB=211, BLOB=212, MEDIUMBLOB=213, LONG=214, 
		LONGBLOB=215, TINYTEXT=216, TEXT=217, MEDIUMTEXT=218, LONGTEXT=219, ENUM=220, 
		VARYING=221, SERIAL=222, YEAR_MONTH=223, DAY_HOUR=224, DAY_MINUTE=225, 
		DAY_SECOND=226, HOUR_MINUTE=227, HOUR_SECOND=228, MINUTE_SECOND=229, SECOND_MICROSECOND=230, 
		MINUTE_MICROSECOND=231, HOUR_MICROSECOND=232, DAY_MICROSECOND=233, JSON_ARRAY=234, 
		JSON_OBJECT=235, JSON_QUOTE=236, JSON_CONTAINS=237, JSON_CONTAINS_PATH=238, 
		JSON_EXTRACT=239, JSON_KEYS=240, JSON_OVERLAPS=241, JSON_SEARCH=242, JSON_VALUE=243, 
		JSON_ARRAY_APPEND=244, JSON_ARRAY_INSERT=245, JSON_INSERT=246, JSON_MERGE=247, 
		JSON_MERGE_PATCH=248, JSON_MERGE_PRESERVE=249, JSON_REMOVE=250, JSON_REPLACE=251, 
		JSON_SET=252, JSON_UNQUOTE=253, JSON_DEPTH=254, JSON_LENGTH=255, JSON_TYPE=256, 
		JSON_VALID=257, JSON_TABLE=258, JSON_SCHEMA_VALID=259, JSON_SCHEMA_VALIDATION_REPORT=260, 
		JSON_PRETTY=261, JSON_STORAGE_FREE=262, JSON_STORAGE_SIZE=263, JSON_ARRAYAGG=264, 
		JSON_OBJECTAGG=265, AVG=266, BIT_AND=267, BIT_OR=268, BIT_XOR=269, COUNT=270, 
		GROUP_CONCAT=271, MAX=272, MIN=273, STD=274, STDDEV=275, STDDEV_POP=276, 
		STDDEV_SAMP=277, SUM=278, VAR_POP=279, VAR_SAMP=280, VARIANCE=281, CURRENT_DATE=282, 
		CURRENT_TIME=283, CURRENT_TIMESTAMP=284, LOCALTIME=285, CURDATE=286, CURTIME=287, 
		DATE_ADD=288, DATE_SUB=289, EXTRACT=290, LOCALTIMESTAMP=291, NOW=292, 
		POSITION=293, SUBSTR=294, SUBSTRING=295, SYSDATE=296, TRIM=297, UTC_DATE=298, 
		UTC_TIME=299, UTC_TIMESTAMP=300, ACCOUNT=301, ACTION=302, AFTER=303, AGGREGATE=304, 
		ALGORITHM=305, ANY=306, AT=307, AUTHORS=308, AUTOCOMMIT=309, AUTOEXTEND_SIZE=310, 
		AUTO_INCREMENT=311, AVG_ROW_LENGTH=312, BEGIN=313, BINLOG=314, BIT=315, 
		BLOCK=316, BOOL=317, BOOLEAN=318, BTREE=319, CACHE=320, CASCADED=321, 
		CHAIN=322, CHANGED=323, CHANNEL=324, CHECKSUM=325, PAGE_CHECKSUM=326, 
		CIPHER=327, CLASS_ORIGIN=328, CLIENT=329, CLOSE=330, COALESCE=331, CODE=332, 
		COLUMNS=333, COLUMN_FORMAT=334, COLUMN_NAME=335, COMMENT=336, COMMIT=337, 
		COMPACT=338, COMPLETION=339, COMPRESSED=340, COMPRESSION=341, CONCURRENT=342, 
		CONNECT=343, CONNECTION=344, CONSISTENT=345, CONSTRAINT_CATALOG=346, CONSTRAINT_SCHEMA=347, 
		CONSTRAINT_NAME=348, CONTAINS=349, CONTEXT=350, CONTRIBUTORS=351, COPY=352, 
		CPU=353, CURSOR_NAME=354, DATA=355, DATAFILE=356, DEALLOCATE=357, DEFAULT_AUTH=358, 
		DEFINER=359, DELAY_KEY_WRITE=360, DES_KEY_FILE=361, DIRECTORY=362, DISABLE=363, 
		DISCARD=364, DISK=365, DO=366, DUMPFILE=367, DUPLICATE=368, DYNAMIC=369, 
		ENABLE=370, ENCRYPTION=371, END=372, ENDS=373, ENGINE=374, ENGINES=375, 
		ERROR=376, ERRORS=377, ESCAPE=378, EVEN=379, EVENT=380, EVENTS=381, EVERY=382, 
		EXCHANGE=383, EXCLUSIVE=384, EXPIRE=385, EXPORT=386, EXTENDED=387, EXTENT_SIZE=388, 
		FAST=389, FAULTS=390, FIELDS=391, FILE_BLOCK_SIZE=392, FILTER=393, FIRST=394, 
		FIXED=395, FLUSH=396, FOLLOWS=397, FOUND=398, FULL=399, FUNCTION=400, 
		GENERAL=401, GLOBAL=402, GRANTS=403, GROUP_REPLICATION=404, HANDLER=405, 
		HASH=406, HELP=407, HOST=408, HOSTS=409, IDENTIFIED=410, IGNORE_SERVER_IDS=411, 
		IMPORT=412, INDEXES=413, INITIAL_SIZE=414, INPLACE=415, INSERT_METHOD=416, 
		INSTALL=417, INSTANCE=418, INVISIBLE=419, INVOKER=420, IO=421, IO_THREAD=422, 
		IPC=423, ISOLATION=424, ISSUER=425, JSON=426, KEY_BLOCK_SIZE=427, LANGUAGE=428, 
		LAST=429, LEAVES=430, LESS=431, LEVEL=432, LIST=433, LOCAL=434, LOGFILE=435, 
		LOGS=436, MASTER=437, MASTER_AUTO_POSITION=438, MASTER_CONNECT_RETRY=439, 
		MASTER_DELAY=440, MASTER_HEARTBEAT_PERIOD=441, MASTER_HOST=442, MASTER_LOG_FILE=443, 
		MASTER_LOG_POS=444, MASTER_PASSWORD=445, MASTER_PORT=446, MASTER_RETRY_COUNT=447, 
		MASTER_SSL=448, MASTER_SSL_CA=449, MASTER_SSL_CAPATH=450, MASTER_SSL_CERT=451, 
		MASTER_SSL_CIPHER=452, MASTER_SSL_CRL=453, MASTER_SSL_CRLPATH=454, MASTER_SSL_KEY=455, 
		MASTER_TLS_VERSION=456, MASTER_USER=457, MAX_CONNECTIONS_PER_HOUR=458, 
		MAX_QUERIES_PER_HOUR=459, MAX_ROWS=460, MAX_SIZE=461, MAX_UPDATES_PER_HOUR=462, 
		MAX_USER_CONNECTIONS=463, MEDIUM=464, MEMBER=465, MERGE=466, MESSAGE_TEXT=467, 
		MID=468, MIGRATE=469, MIN_ROWS=470, MODE=471, MODIFY=472, MUTEX=473, MYSQL=474, 
		MYSQL_ERRNO=475, NAME=476, NAMES=477, NCHAR=478, NEVER=479, NEXT=480, 
		NO=481, NODEGROUP=482, NONE=483, ODBC=484, OFFLINE=485, OFFSET=486, OF=487, 
		OJ=488, OLD_PASSWORD=489, ONE=490, ONLINE=491, ONLY=492, OPEN=493, OPTIMIZER_COSTS=494, 
		OPTIONS=495, OWNER=496, PACK_KEYS=497, PAGE=498, PARSER=499, PARTIAL=500, 
		PARTITIONING=501, PARTITIONS=502, PASSWORD=503, PHASE=504, PLUGIN=505, 
		PLUGIN_DIR=506, PLUGINS=507, PORT=508, PRECEDES=509, PREPARE=510, PRESERVE=511, 
		PREV=512, PROCESSLIST=513, PROFILE=514, PROFILES=515, PROXY=516, QUERY=517, 
		QUICK=518, REBUILD=519, RECOVER=520, REDO_BUFFER_SIZE=521, REDUNDANT=522, 
		RELAY=523, RELAY_LOG_FILE=524, RELAY_LOG_POS=525, RELAYLOG=526, REMOVE=527, 
		REORGANIZE=528, REPAIR=529, REPLICATE_DO_DB=530, REPLICATE_DO_TABLE=531, 
		REPLICATE_IGNORE_DB=532, REPLICATE_IGNORE_TABLE=533, REPLICATE_REWRITE_DB=534, 
		REPLICATE_WILD_DO_TABLE=535, REPLICATE_WILD_IGNORE_TABLE=536, REPLICATION=537, 
		RESET=538, RESUME=539, RETURNED_SQLSTATE=540, RETURNING=541, RETURNS=542, 
		ROLE=543, ROLLBACK=544, ROLLUP=545, ROTATE=546, ROW=547, ROWS=548, ROW_FORMAT=549, 
		SAVEPOINT=550, SCHEDULE=551, SECURITY=552, SERVER=553, SESSION=554, SHARE=555, 
		SHARED=556, SIGNED=557, SIMPLE=558, SLAVE=559, SLOW=560, SNAPSHOT=561, 
		SOCKET=562, SOME=563, SONAME=564, SOUNDS=565, SOURCE=566, SQL_AFTER_GTIDS=567, 
		SQL_AFTER_MTS_GAPS=568, SQL_BEFORE_GTIDS=569, SQL_BUFFER_RESULT=570, SQL_CACHE=571, 
		SQL_NO_CACHE=572, SQL_THREAD=573, START=574, STARTS=575, STATS_AUTO_RECALC=576, 
		STATS_PERSISTENT=577, STATS_SAMPLE_PAGES=578, STATUS=579, STOP=580, STORAGE=581, 
		STORED=582, STRING=583, SUBCLASS_ORIGIN=584, SUBJECT=585, SUBPARTITION=586, 
		SUBPARTITIONS=587, SUSPEND=588, SWAPS=589, SWITCHES=590, TABLE_NAME=591, 
		TABLESPACE=592, TABLE_TYPE=593, TEMPORARY=594, TEMPTABLE=595, THAN=596, 
		TRADITIONAL=597, TRANSACTION=598, TRANSACTIONAL=599, TRIGGERS=600, TRUNCATE=601, 
		UNDEFINED=602, UNDOFILE=603, UNDO_BUFFER_SIZE=604, UNINSTALL=605, UNKNOWN=606, 
		UNTIL=607, UPGRADE=608, USER=609, USE_FRM=610, USER_RESOURCES=611, VALIDATION=612, 
		VALUE=613, VARIABLES=614, VIEW=615, VIRTUAL=616, VISIBLE=617, WAIT=618, 
		WARNINGS=619, WITHOUT=620, WORK=621, WRAPPER=622, X509=623, XA=624, XML=625, 
		EUR=626, USA=627, JIS=628, ISO=629, INTERNAL=630, QUARTER=631, MONTH=632, 
		DAY=633, HOUR=634, MINUTE=635, WEEK=636, SECOND=637, MICROSECOND=638, 
		TABLES=639, ROUTINE=640, EXECUTE=641, FILE=642, PROCESS=643, RELOAD=644, 
		SHUTDOWN=645, SUPER=646, PRIVILEGES=647, APPLICATION_PASSWORD_ADMIN=648, 
		AUDIT_ADMIN=649, BACKUP_ADMIN=650, BINLOG_ADMIN=651, BINLOG_ENCRYPTION_ADMIN=652, 
		CLONE_ADMIN=653, CONNECTION_ADMIN=654, ENCRYPTION_KEY_ADMIN=655, FIREWALL_ADMIN=656, 
		FIREWALL_USER=657, FLUSH_OPTIMIZER_COSTS=658, FLUSH_STATUS=659, FLUSH_TABLES=660, 
		FLUSH_USER_RESOURCES=661, GROUP_REPLICATION_ADMIN=662, INNODB_REDO_LOG_ARCHIVE=663, 
		INNODB_REDO_LOG_ENABLE=664, NDB_STORED_USER=665, PERSIST_RO_VARIABLES_ADMIN=666, 
		REPLICATION_APPLIER=667, REPLICATION_SLAVE_ADMIN=668, RESOURCE_GROUP_ADMIN=669, 
		RESOURCE_GROUP_USER=670, ROLE_ADMIN=671, SERVICE_CONNECTION_ADMIN=672, 
		SESSION_VARIABLES_ADMIN=673, SET_USER_ID=674, SHOW_ROUTINE=675, SYSTEM_VARIABLES_ADMIN=676, 
		TABLE_ENCRYPTION_ADMIN=677, VERSION_TOKEN_ADMIN=678, XA_RECOVER_ADMIN=679, 
		ARMSCII8=680, ASCII=681, BIG5=682, CP1250=683, CP1251=684, CP1256=685, 
		CP1257=686, CP850=687, CP852=688, CP866=689, CP932=690, DEC8=691, EUCJPMS=692, 
		EUCKR=693, GB2312=694, GBK=695, GEOSTD8=696, GREEK=697, HEBREW=698, HP8=699, 
		KEYBCS2=700, KOI8R=701, KOI8U=702, LATIN1=703, LATIN2=704, LATIN5=705, 
		LATIN7=706, MACCE=707, MACROMAN=708, SJIS=709, SWE7=710, TIS620=711, UCS2=712, 
		UJIS=713, UTF16=714, UTF16LE=715, UTF32=716, UTF8=717, UTF8MB3=718, UTF8MB4=719, 
		ARCHIVE=720, BLACKHOLE=721, CSV=722, FEDERATED=723, INNODB=724, MEMORY=725, 
		MRG_MYISAM=726, MYISAM=727, NDB=728, NDBCLUSTER=729, PERFORMANCE_SCHEMA=730, 
		TOKUDB=731, REPEATABLE=732, COMMITTED=733, UNCOMMITTED=734, SERIALIZABLE=735, 
		GEOMETRYCOLLECTION=736, GEOMCOLLECTION=737, GEOMETRY=738, LINESTRING=739, 
		MULTILINESTRING=740, MULTIPOINT=741, MULTIPOLYGON=742, POINT=743, POLYGON=744, 
		ABS=745, ACOS=746, ADDDATE=747, ADDTIME=748, AES_DECRYPT=749, AES_ENCRYPT=750, 
		AREA=751, ASBINARY=752, ASIN=753, ASTEXT=754, ASWKB=755, ASWKT=756, ASYMMETRIC_DECRYPT=757, 
		ASYMMETRIC_DERIVE=758, ASYMMETRIC_ENCRYPT=759, ASYMMETRIC_SIGN=760, ASYMMETRIC_VERIFY=761, 
		ATAN=762, ATAN2=763, BENCHMARK=764, BIN=765, BIT_COUNT=766, BIT_LENGTH=767, 
		BUFFER=768, CATALOG_NAME=769, CEIL=770, CEILING=771, CENTROID=772, CHARACTER_LENGTH=773, 
		CHARSET=774, CHAR_LENGTH=775, COERCIBILITY=776, COLLATION=777, COMPRESS=778, 
		CONCAT=779, CONCAT_WS=780, CONNECTION_ID=781, CONV=782, CONVERT_TZ=783, 
		COS=784, COT=785, CRC32=786, CREATE_ASYMMETRIC_PRIV_KEY=787, CREATE_ASYMMETRIC_PUB_KEY=788, 
		CREATE_DH_PARAMETERS=789, CREATE_DIGEST=790, CROSSES=791, DATEDIFF=792, 
		DATE_FORMAT=793, DAYNAME=794, DAYOFMONTH=795, DAYOFWEEK=796, DAYOFYEAR=797, 
		DECODE=798, DEGREES=799, DES_DECRYPT=800, DES_ENCRYPT=801, DIMENSION=802, 
		DISJOINT=803, ELT=804, ENCODE=805, ENCRYPT=806, ENDPOINT=807, ENVELOPE=808, 
		EQUALS=809, EXP=810, EXPORT_SET=811, EXTERIORRING=812, EXTRACTVALUE=813, 
		FIELD=814, FIND_IN_SET=815, FLOOR=816, FORMAT=817, FOUND_ROWS=818, FROM_BASE64=819, 
		FROM_DAYS=820, FROM_UNIXTIME=821, GEOMCOLLFROMTEXT=822, GEOMCOLLFROMWKB=823, 
		GEOMETRYCOLLECTIONFROMTEXT=824, GEOMETRYCOLLECTIONFROMWKB=825, GEOMETRYFROMTEXT=826, 
		GEOMETRYFROMWKB=827, GEOMETRYN=828, GEOMETRYTYPE=829, GEOMFROMTEXT=830, 
		GEOMFROMWKB=831, GET_FORMAT=832, GET_LOCK=833, GLENGTH=834, GREATEST=835, 
		GTID_SUBSET=836, GTID_SUBTRACT=837, HEX=838, IFNULL=839, INET6_ATON=840, 
		INET6_NTOA=841, INET_ATON=842, INET_NTOA=843, INSTR=844, INTERIORRINGN=845, 
		INTERSECTS=846, ISCLOSED=847, ISEMPTY=848, ISNULL=849, ISSIMPLE=850, IS_FREE_LOCK=851, 
		IS_IPV4=852, IS_IPV4_COMPAT=853, IS_IPV4_MAPPED=854, IS_IPV6=855, IS_USED_LOCK=856, 
		LAST_INSERT_ID=857, LCASE=858, LEAST=859, LENGTH=860, LINEFROMTEXT=861, 
		LINEFROMWKB=862, LINESTRINGFROMTEXT=863, LINESTRINGFROMWKB=864, LN=865, 
		LOAD_FILE=866, LOCATE=867, LOG=868, LOG10=869, LOG2=870, LOWER=871, LPAD=872, 
		LTRIM=873, MAKEDATE=874, MAKETIME=875, MAKE_SET=876, MASTER_POS_WAIT=877, 
		MBRCONTAINS=878, MBRDISJOINT=879, MBREQUAL=880, MBRINTERSECTS=881, MBROVERLAPS=882, 
		MBRTOUCHES=883, MBRWITHIN=884, MD5=885, MLINEFROMTEXT=886, MLINEFROMWKB=887, 
		MONTHNAME=888, MPOINTFROMTEXT=889, MPOINTFROMWKB=890, MPOLYFROMTEXT=891, 
		MPOLYFROMWKB=892, MULTILINESTRINGFROMTEXT=893, MULTILINESTRINGFROMWKB=894, 
		MULTIPOINTFROMTEXT=895, MULTIPOINTFROMWKB=896, MULTIPOLYGONFROMTEXT=897, 
		MULTIPOLYGONFROMWKB=898, NAME_CONST=899, NULLIF=900, NUMGEOMETRIES=901, 
		NUMINTERIORRINGS=902, NUMPOINTS=903, OCT=904, OCTET_LENGTH=905, ORD=906, 
		OVERLAPS=907, PERIOD_ADD=908, PERIOD_DIFF=909, PI=910, POINTFROMTEXT=911, 
		POINTFROMWKB=912, POINTN=913, POLYFROMTEXT=914, POLYFROMWKB=915, POLYGONFROMTEXT=916, 
		POLYGONFROMWKB=917, POW=918, POWER=919, QUOTE=920, RADIANS=921, RAND=922, 
		RANDOM_BYTES=923, RELEASE_LOCK=924, REVERSE=925, ROUND=926, ROW_COUNT=927, 
		RPAD=928, RTRIM=929, SEC_TO_TIME=930, SESSION_USER=931, SHA=932, SHA1=933, 
		SHA2=934, SCHEMA_NAME=935, SIGN=936, SIN=937, SLEEP=938, SOUNDEX=939, 
		SQL_THREAD_WAIT_AFTER_GTIDS=940, SQRT=941, SRID=942, STARTPOINT=943, STRCMP=944, 
		STR_TO_DATE=945, ST_AREA=946, ST_ASBINARY=947, ST_ASTEXT=948, ST_ASWKB=949, 
		ST_ASWKT=950, ST_BUFFER=951, ST_CENTROID=952, ST_CONTAINS=953, ST_CROSSES=954, 
		ST_DIFFERENCE=955, ST_DIMENSION=956, ST_DISJOINT=957, ST_DISTANCE=958, 
		ST_ENDPOINT=959, ST_ENVELOPE=960, ST_EQUALS=961, ST_EXTERIORRING=962, 
		ST_GEOMCOLLFROMTEXT=963, ST_GEOMCOLLFROMTXT=964, ST_GEOMCOLLFROMWKB=965, 
		ST_GEOMETRYCOLLECTIONFROMTEXT=966, ST_GEOMETRYCOLLECTIONFROMWKB=967, ST_GEOMETRYFROMTEXT=968, 
		ST_GEOMETRYFROMWKB=969, ST_GEOMETRYN=970, ST_GEOMETRYTYPE=971, ST_GEOMFROMTEXT=972, 
		ST_GEOMFROMWKB=973, ST_INTERIORRINGN=974, ST_INTERSECTION=975, ST_INTERSECTS=976, 
		ST_ISCLOSED=977, ST_ISEMPTY=978, ST_ISSIMPLE=979, ST_LINEFROMTEXT=980, 
		ST_LINEFROMWKB=981, ST_LINESTRINGFROMTEXT=982, ST_LINESTRINGFROMWKB=983, 
		ST_NUMGEOMETRIES=984, ST_NUMINTERIORRING=985, ST_NUMINTERIORRINGS=986, 
		ST_NUMPOINTS=987, ST_OVERLAPS=988, ST_POINTFROMTEXT=989, ST_POINTFROMWKB=990, 
		ST_POINTN=991, ST_POLYFROMTEXT=992, ST_POLYFROMWKB=993, ST_POLYGONFROMTEXT=994, 
		ST_POLYGONFROMWKB=995, ST_SRID=996, ST_STARTPOINT=997, ST_SYMDIFFERENCE=998, 
		ST_TOUCHES=999, ST_UNION=1000, ST_WITHIN=1001, ST_X=1002, ST_Y=1003, SUBDATE=1004, 
		SUBSTRING_INDEX=1005, SUBTIME=1006, SYSTEM_USER=1007, TAN=1008, TIMEDIFF=1009, 
		TIMESTAMPADD=1010, TIMESTAMPDIFF=1011, TIME_FORMAT=1012, TIME_TO_SEC=1013, 
		TOUCHES=1014, TO_BASE64=1015, TO_DAYS=1016, TO_SECONDS=1017, UCASE=1018, 
		UNCOMPRESS=1019, UNCOMPRESSED_LENGTH=1020, UNHEX=1021, UNIX_TIMESTAMP=1022, 
		UPDATEXML=1023, UPPER=1024, UUID=1025, UUID_SHORT=1026, VALIDATE_PASSWORD_STRENGTH=1027, 
		VERSION=1028, WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS=1029, WEEKDAY=1030, WEEKOFYEAR=1031, 
		WEIGHT_STRING=1032, WITHIN=1033, YEARWEEK=1034, Y_FUNCTION=1035, X_FUNCTION=1036, 
		VAR_ASSIGN=1037, PLUS_ASSIGN=1038, MINUS_ASSIGN=1039, MULT_ASSIGN=1040, 
		DIV_ASSIGN=1041, MOD_ASSIGN=1042, AND_ASSIGN=1043, XOR_ASSIGN=1044, OR_ASSIGN=1045, 
		STAR=1046, DIVIDE=1047, MODULE=1048, PLUS=1049, MINUSMINUS=1050, MINUS=1051, 
		DIV=1052, MOD=1053, EQUAL_SYMBOL=1054, GREATER_SYMBOL=1055, LESS_SYMBOL=1056, 
		EXCLAMATION_SYMBOL=1057, BIT_NOT_OP=1058, BIT_OR_OP=1059, BIT_AND_OP=1060, 
		BIT_XOR_OP=1061, DOT=1062, LR_BRACKET=1063, RR_BRACKET=1064, COMMA=1065, 
		SEMI=1066, AT_SIGN=1067, ZERO_DECIMAL=1068, ONE_DECIMAL=1069, TWO_DECIMAL=1070, 
		SINGLE_QUOTE_SYMB=1071, DOUBLE_QUOTE_SYMB=1072, REVERSE_QUOTE_SYMB=1073, 
		COLON_SYMB=1074, CHARSET_REVERSE_QOUTE_STRING=1075, FILESIZE_LITERAL=1076, 
		START_NATIONAL_STRING_LITERAL=1077, STRING_LITERAL=1078, DECIMAL_LITERAL=1079, 
		HEXADECIMAL_LITERAL=1080, REAL_LITERAL=1081, NULL_SPEC_LITERAL=1082, BIT_STRING=1083, 
		STRING_CHARSET_NAME=1084, DOT_ID=1085, ID=1086, REVERSE_QUOTE_ID=1087, 
		STRING_USER_NAME=1088, IP_ADDRESS=1089, LOCAL_ID=1090, GLOBAL_ID=1091, 
		ERROR_RECONGNIGION=1092, OPTIONAL=1093;
	public static final int
		RULE_program = 0, RULE_root = 1, RULE_statement = 2, RULE_createTable = 3, 
		RULE_tableName = 4, RULE_createDefinitions = 5, RULE_tableOption = 6, 
		RULE_collationName = 7, RULE_createDefinition = 8, RULE_tableConstraint = 9, 
		RULE_indexColumnNames = 10, RULE_indexOption = 11, RULE_referenceDefinition = 12, 
		RULE_referenceAction = 13, RULE_columnDefinition = 14, RULE_indexColumnName = 15, 
		RULE_charsetName = 16, RULE_columnConstraint = 17, RULE_defaultValue = 18, 
		RULE_unaryOperator = 19, RULE_constant = 20, RULE_stringLiteral = 21, 
		RULE_currentTimestamp = 22, RULE_ifNotExists = 23, RULE_dataType = 24, 
		RULE_lengthOneDimension = 25, RULE_lengthTwoDimension = 26, RULE_lengthTwoOptionalDimension = 27, 
		RULE_identifier = 28, RULE_simpleId = 29, RULE_fileSizeLiteral = 30, RULE_referenceControlType = 31, 
		RULE_indexType = 32, RULE_decimalLiteral = 33, RULE_hexadecimalLiteral = 34, 
		RULE_booleanLiteral = 35, RULE_collectionOptions = 36, RULE_engineName = 37, 
		RULE_logicalOperator = 38, RULE_nullNotnull = 39, RULE_charsetNameBase = 40, 
		RULE_keywordsCanBeId = 41, RULE_functionNameBase = 42;
	private static String[] makeRuleNames() {
		return new String[] {
			"program", "root", "statement", "createTable", "tableName", "createDefinitions", 
			"tableOption", "collationName", "createDefinition", "tableConstraint", 
			"indexColumnNames", "indexOption", "referenceDefinition", "referenceAction", 
			"columnDefinition", "indexColumnName", "charsetName", "columnConstraint", 
			"defaultValue", "unaryOperator", "constant", "stringLiteral", "currentTimestamp", 
			"ifNotExists", "dataType", "lengthOneDimension", "lengthTwoDimension", 
			"lengthTwoOptionalDimension", "identifier", "simpleId", "fileSizeLiteral", 
			"referenceControlType", "indexType", "decimalLiteral", "hexadecimalLiteral", 
			"booleanLiteral", "collectionOptions", "engineName", "logicalOperator", 
			"nullNotnull", "charsetNameBase", "keywordsCanBeId", "functionNameBase"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, null, null, null, null, "'ADD'", "'ALL'", "'ALTER'", "'ALWAYS'", 
			"'ANALYZE'", "'AND'", "'AS'", "'ASC'", "'BEFORE'", "'BETWEEN'", "'BOTH'", 
			"'BY'", "'CALL'", "'CASCADE'", "'CASE'", "'CAST'", "'CHANGE'", "'CHARACTER'", 
			"'CHECK'", "'COLLATE'", "'COLUMN'", "'CONDITION'", "'CONSTRAINT'", "'CONTINUE'", 
			"'CONVERT'", "'CREATE'", "'CROSS'", "'CURRENT'", "'CURRENT_USER'", "'CURSOR'", 
			"'DATABASE'", "'DATABASES'", "'DECLARE'", "'DEFAULT'", "'DELAYED'", "'DELETE'", 
			"'DESC'", "'DESCRIBE'", "'DETERMINISTIC'", "'DIAGNOSTICS'", "'DISTINCT'", 
			"'DISTINCTROW'", "'DROP'", "'EACH'", "'ELSE'", "'ELSEIF'", "'EMPTY'", 
			"'ENCLOSED'", "'ESCAPED'", "'EXISTS'", "'EXIT'", "'EXPLAIN'", "'FALSE'", 
			"'FETCH'", "'FOR'", "'FORCE'", "'FOREIGN'", "'FROM'", "'FULLTEXT'", "'GENERATED'", 
			"'GET'", "'GRANT'", "'GROUP'", "'HAVING'", "'HIGH_PRIORITY'", "'IF'", 
			"'IGNORE'", "'IN'", "'INDEX'", "'INFILE'", "'INNER'", "'INOUT'", "'INSERT'", 
			"'INTERVAL'", "'INTO'", "'IS'", "'ITERATE'", "'JOIN'", "'KEY'", "'KEYS'", 
			"'KILL'", "'LEADING'", "'LEAVE'", "'LEFT'", "'LIKE'", "'LIMIT'", "'LINEAR'", 
			"'LINES'", "'LOAD'", "'LOCK'", "'LOOP'", "'LOW_PRIORITY'", "'MASTER_BIND'", 
			"'MASTER_SSL_VERIFY_SERVER_CERT'", "'MATCH'", "'MAXVALUE'", "'MODIFIES'", 
			"'NATURAL'", "'NOT'", "'NO_WRITE_TO_BINLOG'", "'NULL'", "'NUMBER'", "'ON'", 
			"'OPTIMIZE'", "'OPTION'", "'OPTIONALLY'", "'OR'", "'ORDER'", "'OUT'", 
			"'OUTER'", "'OUTFILE'", "'PARTITION'", "'PRIMARY'", "'PROCEDURE'", "'PURGE'", 
			"'RANGE'", "'READ'", "'READS'", "'REFERENCES'", "'REGEXP'", "'RELEASE'", 
			"'RENAME'", "'REPEAT'", "'REPLACE'", "'REQUIRE'", "'RESIGNAL'", "'RESTRICT'", 
			"'RETURN'", "'REVOKE'", "'RIGHT'", "'RLIKE'", "'SCHEMA'", "'SCHEMAS'", 
			"'SELECT'", "'SET'", "'SEPARATOR'", "'SHOW'", "'SIGNAL'", "'SPATIAL'", 
			"'SQL'", "'SQLEXCEPTION'", "'SQLSTATE'", "'SQLWARNING'", "'SQL_BIG_RESULT'", 
			"'SQL_CALC_FOUND_ROWS'", "'SQL_SMALL_RESULT'", "'SSL'", "'STACKED'", 
			"'STARTING'", "'STRAIGHT_JOIN'", "'TABLE'", "'TERMINATED'", "'THEN'", 
			"'TO'", "'TRAILING'", "'TRIGGER'", "'TRUE'", "'UNDO'", "'UNION'", "'UNIQUE'", 
			"'UNLOCK'", "'UNSIGNED'", "'UPDATE'", "'USAGE'", "'USE'", "'USING'", 
			"'VALUES'", "'WHEN'", "'WHERE'", "'WHILE'", "'WITH'", "'WRITE'", "'XOR'", 
			"'ZEROFILL'", "'TINYINT'", "'SMALLINT'", "'MEDIUMINT'", "'MIDDLEINT'", 
			null, "'INT1'", "'INT2'", "'INT3'", "'INT4'", "'INT8'", "'INTEGER'", 
			"'BIGINT'", "'REAL'", null, "'PRECISION'", "'FLOAT'", "'FLOAT4'", "'FLOAT8'", 
			"'DECIMAL'", "'DEC'", "'NUMERIC'", "'DATE'", "'TIME'", "'TIMESTAMP'", 
			null, "'YEAR'", "'CHAR'", null, "'NVARCHAR'", "'NATIONAL'", "'BINARY'", 
			"'VARBINARY'", "'TINYBLOB'", "'BLOB'", "'MEDIUMBLOB'", "'LONG'", "'LONGBLOB'", 
			"'TINYTEXT'", null, "'MEDIUMTEXT'", "'LONGTEXT'", "'ENUM'", "'VARYING'", 
			"'SERIAL'", "'YEAR_MONTH'", "'DAY_HOUR'", "'DAY_MINUTE'", "'DAY_SECOND'", 
			"'HOUR_MINUTE'", "'HOUR_SECOND'", "'MINUTE_SECOND'", "'SECOND_MICROSECOND'", 
			"'MINUTE_MICROSECOND'", "'HOUR_MICROSECOND'", "'DAY_MICROSECOND'", "'JSON_ARRAY'", 
			"'JSON_OBJECT'", "'JSON_QUOTE'", "'JSON_CONTAINS'", "'JSON_CONTAINS_PATH'", 
			"'JSON_EXTRACT'", "'JSON_KEYS'", "'JSON_OVERLAPS'", "'JSON_SEARCH'", 
			"'JSON_VALUE'", "'JSON_ARRAY_APPEND'", "'JSON_ARRAY_INSERT'", "'JSON_INSERT'", 
			"'JSON_MERGE'", "'JSON_MERGE_PATCH'", "'JSON_MERGE_PRESERVE'", "'JSON_REMOVE'", 
			"'JSON_REPLACE'", "'JSON_SET'", "'JSON_UNQUOTE'", "'JSON_DEPTH'", "'JSON_LENGTH'", 
			"'JSON_TYPE'", "'JSON_VALID'", "'JSON_TABLE'", "'JSON_SCHEMA_VALID'", 
			"'JSON_SCHEMA_VALIDATION_REPORT'", "'JSON_PRETTY'", "'JSON_STORAGE_FREE'", 
			"'JSON_STORAGE_SIZE'", "'JSON_ARRAYAGG'", "'JSON_OBJECTAGG'", "'AVG'", 
			"'BIT_AND'", "'BIT_OR'", "'BIT_XOR'", "'COUNT'", "'GROUP_CONCAT'", "'MAX'", 
			"'MIN'", "'STD'", "'STDDEV'", "'STDDEV_POP'", "'STDDEV_SAMP'", "'SUM'", 
			"'VAR_POP'", "'VAR_SAMP'", "'VARIANCE'", "'CURRENT_DATE'", "'CURRENT_TIME'", 
			"'CURRENT_TIMESTAMP'", "'LOCALTIME'", "'CURDATE'", "'CURTIME'", "'DATE_ADD'", 
			"'DATE_SUB'", "'EXTRACT'", "'LOCALTIMESTAMP'", "'NOW'", "'POSITION'", 
			"'SUBSTR'", "'SUBSTRING'", "'SYSDATE'", "'TRIM'", "'UTC_DATE'", "'UTC_TIME'", 
			"'UTC_TIMESTAMP'", "'ACCOUNT'", "'ACTION'", "'AFTER'", "'AGGREGATE'", 
			"'ALGORITHM'", "'ANY'", "'AT'", "'AUTHORS'", "'AUTOCOMMIT'", "'AUTOEXTEND_SIZE'", 
			"'AUTO_INCREMENT'", "'AVG_ROW_LENGTH'", "'BEGIN'", "'BINLOG'", "'BIT'", 
			"'BLOCK'", "'BOOL'", "'BOOLEAN'", "'BTREE'", "'CACHE'", "'CASCADED'", 
			"'CHAIN'", "'CHANGED'", "'CHANNEL'", "'CHECKSUM'", "'PAGE_CHECKSUM'", 
			"'CIPHER'", "'CLASS_ORIGIN'", "'CLIENT'", "'CLOSE'", "'COALESCE'", "'CODE'", 
			"'COLUMNS'", "'COLUMN_FORMAT'", "'COLUMN_NAME'", "'COMMENT'", "'COMMIT'", 
			"'COMPACT'", "'COMPLETION'", "'COMPRESSED'", "'COMPRESSION'", "'CONCURRENT'", 
			"'CONNECT'", "'CONNECTION'", "'CONSISTENT'", "'CONSTRAINT_CATALOG'", 
			"'CONSTRAINT_SCHEMA'", "'CONSTRAINT_NAME'", "'CONTAINS'", "'CONTEXT'", 
			"'CONTRIBUTORS'", "'COPY'", "'CPU'", "'CURSOR_NAME'", "'DATA'", "'DATAFILE'", 
			"'DEALLOCATE'", "'DEFAULT_AUTH'", "'DEFINER'", "'DELAY_KEY_WRITE'", "'DES_KEY_FILE'", 
			"'DIRECTORY'", "'DISABLE'", "'DISCARD'", "'DISK'", "'DO'", "'DUMPFILE'", 
			"'DUPLICATE'", "'DYNAMIC'", "'ENABLE'", "'ENCRYPTION'", "'END'", "'ENDS'", 
			"'ENGINE'", "'ENGINES'", "'ERROR'", "'ERRORS'", "'ESCAPE'", "'EVEN'", 
			"'EVENT'", "'EVENTS'", "'EVERY'", "'EXCHANGE'", "'EXCLUSIVE'", "'EXPIRE'", 
			"'EXPORT'", "'EXTENDED'", "'EXTENT_SIZE'", "'FAST'", "'FAULTS'", "'FIELDS'", 
			"'FILE_BLOCK_SIZE'", "'FILTER'", "'FIRST'", "'FIXED'", "'FLUSH'", "'FOLLOWS'", 
			"'FOUND'", "'FULL'", "'FUNCTION'", "'GENERAL'", "'GLOBAL'", "'GRANTS'", 
			"'GROUP_REPLICATION'", "'HANDLER'", "'HASH'", "'HELP'", "'HOST'", "'HOSTS'", 
			"'IDENTIFIED'", "'IGNORE_SERVER_IDS'", "'IMPORT'", "'INDEXES'", "'INITIAL_SIZE'", 
			"'INPLACE'", "'INSERT_METHOD'", "'INSTALL'", "'INSTANCE'", "'INVISIBLE'", 
			"'INVOKER'", "'IO'", "'IO_THREAD'", "'IPC'", "'ISOLATION'", "'ISSUER'", 
			"'JSON'", "'KEY_BLOCK_SIZE'", "'LANGUAGE'", "'LAST'", "'LEAVES'", "'LESS'", 
			"'LEVEL'", "'LIST'", "'LOCAL'", "'LOGFILE'", "'LOGS'", "'MASTER'", "'MASTER_AUTO_POSITION'", 
			"'MASTER_CONNECT_RETRY'", "'MASTER_DELAY'", "'MASTER_HEARTBEAT_PERIOD'", 
			"'MASTER_HOST'", "'MASTER_LOG_FILE'", "'MASTER_LOG_POS'", "'MASTER_PASSWORD'", 
			"'MASTER_PORT'", "'MASTER_RETRY_COUNT'", "'MASTER_SSL'", "'MASTER_SSL_CA'", 
			"'MASTER_SSL_CAPATH'", "'MASTER_SSL_CERT'", "'MASTER_SSL_CIPHER'", "'MASTER_SSL_CRL'", 
			"'MASTER_SSL_CRLPATH'", "'MASTER_SSL_KEY'", "'MASTER_TLS_VERSION'", "'MASTER_USER'", 
			"'MAX_CONNECTIONS_PER_HOUR'", "'MAX_QUERIES_PER_HOUR'", "'MAX_ROWS'", 
			"'MAX_SIZE'", "'MAX_UPDATES_PER_HOUR'", "'MAX_USER_CONNECTIONS'", "'MEDIUM'", 
			"'MEMBER'", "'MERGE'", "'MESSAGE_TEXT'", "'MID'", "'MIGRATE'", "'MIN_ROWS'", 
			"'MODE'", "'MODIFY'", "'MUTEX'", "'MYSQL'", "'MYSQL_ERRNO'", "'NAME'", 
			"'NAMES'", "'NCHAR'", "'NEVER'", "'NEXT'", "'NO'", "'NODEGROUP'", "'NONE'", 
			"'ODBC'", "'OFFLINE'", "'OFFSET'", "'OF'", "'OJ'", "'OLD_PASSWORD'", 
			"'ONE'", "'ONLINE'", "'ONLY'", "'OPEN'", "'OPTIMIZER_COSTS'", "'OPTIONS'", 
			"'OWNER'", "'PACK_KEYS'", "'PAGE'", "'PARSER'", "'PARTIAL'", "'PARTITIONING'", 
			"'PARTITIONS'", "'PASSWORD'", "'PHASE'", "'PLUGIN'", "'PLUGIN_DIR'", 
			"'PLUGINS'", "'PORT'", "'PRECEDES'", "'PREPARE'", "'PRESERVE'", "'PREV'", 
			"'PROCESSLIST'", "'PROFILE'", "'PROFILES'", "'PROXY'", "'QUERY'", "'QUICK'", 
			"'REBUILD'", "'RECOVER'", "'REDO_BUFFER_SIZE'", "'REDUNDANT'", "'RELAY'", 
			"'RELAY_LOG_FILE'", "'RELAY_LOG_POS'", "'RELAYLOG'", "'REMOVE'", "'REORGANIZE'", 
			"'REPAIR'", "'REPLICATE_DO_DB'", "'REPLICATE_DO_TABLE'", "'REPLICATE_IGNORE_DB'", 
			"'REPLICATE_IGNORE_TABLE'", "'REPLICATE_REWRITE_DB'", "'REPLICATE_WILD_DO_TABLE'", 
			"'REPLICATE_WILD_IGNORE_TABLE'", "'REPLICATION'", "'RESET'", "'RESUME'", 
			"'RETURNED_SQLSTATE'", "'RETURNING'", "'RETURNS'", "'ROLE'", "'ROLLBACK'", 
			"'ROLLUP'", "'ROTATE'", "'ROW'", "'ROWS'", "'ROW_FORMAT'", "'SAVEPOINT'", 
			"'SCHEDULE'", "'SECURITY'", "'SERVER'", "'SESSION'", "'SHARE'", "'SHARED'", 
			"'SIGNED'", "'SIMPLE'", "'SLAVE'", "'SLOW'", "'SNAPSHOT'", "'SOCKET'", 
			"'SOME'", "'SONAME'", "'SOUNDS'", "'SOURCE'", "'SQL_AFTER_GTIDS'", "'SQL_AFTER_MTS_GAPS'", 
			"'SQL_BEFORE_GTIDS'", "'SQL_BUFFER_RESULT'", "'SQL_CACHE'", "'SQL_NO_CACHE'", 
			"'SQL_THREAD'", "'START'", "'STARTS'", "'STATS_AUTO_RECALC'", "'STATS_PERSISTENT'", 
			"'STATS_SAMPLE_PAGES'", "'STATUS'", "'STOP'", "'STORAGE'", "'STORED'", 
			"'STRING'", "'SUBCLASS_ORIGIN'", "'SUBJECT'", "'SUBPARTITION'", "'SUBPARTITIONS'", 
			"'SUSPEND'", "'SWAPS'", "'SWITCHES'", "'TABLE_NAME'", "'TABLESPACE'", 
			"'TABLE_TYPE'", "'TEMPORARY'", "'TEMPTABLE'", "'THAN'", "'TRADITIONAL'", 
			"'TRANSACTION'", "'TRANSACTIONAL'", "'TRIGGERS'", "'TRUNCATE'", "'UNDEFINED'", 
			"'UNDOFILE'", "'UNDO_BUFFER_SIZE'", "'UNINSTALL'", "'UNKNOWN'", "'UNTIL'", 
			"'UPGRADE'", "'USER'", "'USE_FRM'", "'USER_RESOURCES'", "'VALIDATION'", 
			"'VALUE'", "'VARIABLES'", "'VIEW'", "'VIRTUAL'", "'VISIBLE'", "'WAIT'", 
			"'WARNINGS'", "'WITHOUT'", "'WORK'", "'WRAPPER'", "'X509'", "'XA'", "'XML'", 
			"'EUR'", "'USA'", "'JIS'", "'ISO'", "'INTERNAL'", "'QUARTER'", "'MONTH'", 
			"'DAY'", "'HOUR'", "'MINUTE'", "'WEEK'", "'SECOND'", "'MICROSECOND'", 
			"'TABLES'", "'ROUTINE'", "'EXECUTE'", "'FILE'", "'PROCESS'", "'RELOAD'", 
			"'SHUTDOWN'", "'SUPER'", "'PRIVILEGES'", "'APPLICATION_PASSWORD_ADMIN'", 
			"'AUDIT_ADMIN'", "'BACKUP_ADMIN'", "'BINLOG_ADMIN'", "'BINLOG_ENCRYPTION_ADMIN'", 
			"'CLONE_ADMIN'", "'CONNECTION_ADMIN'", "'ENCRYPTION_KEY_ADMIN'", "'FIREWALL_ADMIN'", 
			"'FIREWALL_USER'", "'FLUSH_OPTIMIZER_COSTS'", "'FLUSH_STATUS'", "'FLUSH_TABLES'", 
			"'FLUSH_USER_RESOURCES'", "'GROUP_REPLICATION_ADMIN'", "'INNODB_REDO_LOG_ARCHIVE'", 
			"'INNODB_REDO_LOG_ENABLE'", "'NDB_STORED_USER'", "'PERSIST_RO_VARIABLES_ADMIN'", 
			"'REPLICATION_APPLIER'", "'REPLICATION_SLAVE_ADMIN'", "'RESOURCE_GROUP_ADMIN'", 
			"'RESOURCE_GROUP_USER'", "'ROLE_ADMIN'", "'SERVICE_CONNECTION_ADMIN'", 
			null, "'SET_USER_ID'", "'SHOW_ROUTINE'", "'SYSTEM_VARIABLES_ADMIN'", 
			"'TABLE_ENCRYPTION_ADMIN'", "'VERSION_TOKEN_ADMIN'", "'XA_RECOVER_ADMIN'", 
			"'ARMSCII8'", "'ASCII'", "'BIG5'", "'CP1250'", "'CP1251'", "'CP1256'", 
			"'CP1257'", "'CP850'", "'CP852'", "'CP866'", "'CP932'", "'DEC8'", "'EUCJPMS'", 
			"'EUCKR'", "'GB2312'", "'GBK'", "'GEOSTD8'", "'GREEK'", "'HEBREW'", "'HP8'", 
			"'KEYBCS2'", "'KOI8R'", "'KOI8U'", "'LATIN1'", "'LATIN2'", "'LATIN5'", 
			"'LATIN7'", "'MACCE'", "'MACROMAN'", "'SJIS'", "'SWE7'", "'TIS620'", 
			"'UCS2'", "'UJIS'", "'UTF16'", "'UTF16LE'", "'UTF32'", null, "'UTF8MB3'", 
			null, "'ARCHIVE'", "'BLACKHOLE'", "'CSV'", "'FEDERATED'", "'INNODB'", 
			"'MEMORY'", "'MRG_MYISAM'", "'MYISAM'", "'NDB'", "'NDBCLUSTER'", "'PERFORMANCE_SCHEMA'", 
			"'TOKUDB'", "'REPEATABLE'", "'COMMITTED'", "'UNCOMMITTED'", "'SERIALIZABLE'", 
			"'GEOMETRYCOLLECTION'", "'GEOMCOLLECTION'", "'GEOMETRY'", "'LINESTRING'", 
			"'MULTILINESTRING'", "'MULTIPOINT'", "'MULTIPOLYGON'", "'POINT'", "'POLYGON'", 
			"'ABS'", "'ACOS'", "'ADDDATE'", "'ADDTIME'", "'AES_DECRYPT'", "'AES_ENCRYPT'", 
			"'AREA'", "'ASBINARY'", "'ASIN'", "'ASTEXT'", "'ASWKB'", "'ASWKT'", "'ASYMMETRIC_DECRYPT'", 
			"'ASYMMETRIC_DERIVE'", "'ASYMMETRIC_ENCRYPT'", "'ASYMMETRIC_SIGN'", "'ASYMMETRIC_VERIFY'", 
			"'ATAN'", "'ATAN2'", "'BENCHMARK'", "'BIN'", "'BIT_COUNT'", "'BIT_LENGTH'", 
			"'BUFFER'", "'CATALOG_NAME'", "'CEIL'", "'CEILING'", "'CENTROID'", "'CHARACTER_LENGTH'", 
			"'CHARSET'", "'CHAR_LENGTH'", "'COERCIBILITY'", "'COLLATION'", "'COMPRESS'", 
			"'CONCAT'", "'CONCAT_WS'", "'CONNECTION_ID'", "'CONV'", "'CONVERT_TZ'", 
			"'COS'", "'COT'", "'CRC32'", "'CREATE_ASYMMETRIC_PRIV_KEY'", "'CREATE_ASYMMETRIC_PUB_KEY'", 
			"'CREATE_DH_PARAMETERS'", "'CREATE_DIGEST'", "'CROSSES'", "'DATEDIFF'", 
			"'DATE_FORMAT'", "'DAYNAME'", "'DAYOFMONTH'", "'DAYOFWEEK'", "'DAYOFYEAR'", 
			"'DECODE'", "'DEGREES'", "'DES_DECRYPT'", "'DES_ENCRYPT'", "'DIMENSION'", 
			"'DISJOINT'", "'ELT'", "'ENCODE'", "'ENCRYPT'", "'ENDPOINT'", "'ENVELOPE'", 
			"'EQUALS'", "'EXP'", "'EXPORT_SET'", "'EXTERIORRING'", "'EXTRACTVALUE'", 
			"'FIELD'", "'FIND_IN_SET'", "'FLOOR'", "'FORMAT'", "'FOUND_ROWS'", "'FROM_BASE64'", 
			"'FROM_DAYS'", "'FROM_UNIXTIME'", "'GEOMCOLLFROMTEXT'", "'GEOMCOLLFROMWKB'", 
			"'GEOMETRYCOLLECTIONFROMTEXT'", "'GEOMETRYCOLLECTIONFROMWKB'", "'GEOMETRYFROMTEXT'", 
			"'GEOMETRYFROMWKB'", "'GEOMETRYN'", "'GEOMETRYTYPE'", "'GEOMFROMTEXT'", 
			"'GEOMFROMWKB'", "'GET_FORMAT'", "'GET_LOCK'", "'GLENGTH'", "'GREATEST'", 
			"'GTID_SUBSET'", "'GTID_SUBTRACT'", "'HEX'", "'IFNULL'", "'INET6_ATON'", 
			"'INET6_NTOA'", "'INET_ATON'", "'INET_NTOA'", "'INSTR'", "'INTERIORRINGN'", 
			"'INTERSECTS'", "'ISCLOSED'", "'ISEMPTY'", "'ISNULL'", "'ISSIMPLE'", 
			"'IS_FREE_LOCK'", "'IS_IPV4'", "'IS_IPV4_COMPAT'", "'IS_IPV4_MAPPED'", 
			"'IS_IPV6'", "'IS_USED_LOCK'", "'LAST_INSERT_ID'", "'LCASE'", "'LEAST'", 
			"'LENGTH'", "'LINEFROMTEXT'", "'LINEFROMWKB'", "'LINESTRINGFROMTEXT'", 
			"'LINESTRINGFROMWKB'", "'LN'", "'LOAD_FILE'", "'LOCATE'", "'LOG'", "'LOG10'", 
			"'LOG2'", "'LOWER'", "'LPAD'", "'LTRIM'", "'MAKEDATE'", "'MAKETIME'", 
			"'MAKE_SET'", "'MASTER_POS_WAIT'", "'MBRCONTAINS'", "'MBRDISJOINT'", 
			"'MBREQUAL'", "'MBRINTERSECTS'", "'MBROVERLAPS'", "'MBRTOUCHES'", "'MBRWITHIN'", 
			"'MD5'", "'MLINEFROMTEXT'", "'MLINEFROMWKB'", "'MONTHNAME'", "'MPOINTFROMTEXT'", 
			"'MPOINTFROMWKB'", "'MPOLYFROMTEXT'", "'MPOLYFROMWKB'", "'MULTILINESTRINGFROMTEXT'", 
			"'MULTILINESTRINGFROMWKB'", "'MULTIPOINTFROMTEXT'", "'MULTIPOINTFROMWKB'", 
			"'MULTIPOLYGONFROMTEXT'", "'MULTIPOLYGONFROMWKB'", "'NAME_CONST'", "'NULLIF'", 
			"'NUMGEOMETRIES'", "'NUMINTERIORRINGS'", "'NUMPOINTS'", "'OCT'", "'OCTET_LENGTH'", 
			"'ORD'", "'OVERLAPS'", "'PERIOD_ADD'", "'PERIOD_DIFF'", "'PI'", "'POINTFROMTEXT'", 
			"'POINTFROMWKB'", "'POINTN'", "'POLYFROMTEXT'", "'POLYFROMWKB'", "'POLYGONFROMTEXT'", 
			"'POLYGONFROMWKB'", "'POW'", "'POWER'", "'QUOTE'", "'RADIANS'", "'RAND'", 
			"'RANDOM_BYTES'", "'RELEASE_LOCK'", "'REVERSE'", "'ROUND'", "'ROW_COUNT'", 
			"'RPAD'", "'RTRIM'", "'SEC_TO_TIME'", "'SESSION_USER'", "'SHA'", "'SHA1'", 
			"'SHA2'", "'SCHEMA_NAME'", "'SIGN'", "'SIN'", "'SLEEP'", "'SOUNDEX'", 
			"'SQL_THREAD_WAIT_AFTER_GTIDS'", "'SQRT'", "'SRID'", "'STARTPOINT'", 
			"'STRCMP'", "'STR_TO_DATE'", "'ST_AREA'", "'ST_ASBINARY'", "'ST_ASTEXT'", 
			"'ST_ASWKB'", "'ST_ASWKT'", "'ST_BUFFER'", "'ST_CENTROID'", "'ST_CONTAINS'", 
			"'ST_CROSSES'", "'ST_DIFFERENCE'", "'ST_DIMENSION'", "'ST_DISJOINT'", 
			"'ST_DISTANCE'", "'ST_ENDPOINT'", "'ST_ENVELOPE'", "'ST_EQUALS'", "'ST_EXTERIORRING'", 
			"'ST_GEOMCOLLFROMTEXT'", "'ST_GEOMCOLLFROMTXT'", "'ST_GEOMCOLLFROMWKB'", 
			"'ST_GEOMETRYCOLLECTIONFROMTEXT'", "'ST_GEOMETRYCOLLECTIONFROMWKB'", 
			"'ST_GEOMETRYFROMTEXT'", "'ST_GEOMETRYFROMWKB'", "'ST_GEOMETRYN'", "'ST_GEOMETRYTYPE'", 
			"'ST_GEOMFROMTEXT'", "'ST_GEOMFROMWKB'", "'ST_INTERIORRINGN'", "'ST_INTERSECTION'", 
			"'ST_INTERSECTS'", "'ST_ISCLOSED'", "'ST_ISEMPTY'", "'ST_ISSIMPLE'", 
			"'ST_LINEFROMTEXT'", "'ST_LINEFROMWKB'", "'ST_LINESTRINGFROMTEXT'", "'ST_LINESTRINGFROMWKB'", 
			"'ST_NUMGEOMETRIES'", "'ST_NUMINTERIORRING'", "'ST_NUMINTERIORRINGS'", 
			"'ST_NUMPOINTS'", "'ST_OVERLAPS'", "'ST_POINTFROMTEXT'", "'ST_POINTFROMWKB'", 
			"'ST_POINTN'", "'ST_POLYFROMTEXT'", "'ST_POLYFROMWKB'", "'ST_POLYGONFROMTEXT'", 
			"'ST_POLYGONFROMWKB'", "'ST_SRID'", "'ST_STARTPOINT'", "'ST_SYMDIFFERENCE'", 
			"'ST_TOUCHES'", "'ST_UNION'", "'ST_WITHIN'", "'ST_X'", "'ST_Y'", "'SUBDATE'", 
			"'SUBSTRING_INDEX'", "'SUBTIME'", "'SYSTEM_USER'", "'TAN'", "'TIMEDIFF'", 
			"'TIMESTAMPADD'", "'TIMESTAMPDIFF'", "'TIME_FORMAT'", "'TIME_TO_SEC'", 
			"'TOUCHES'", "'TO_BASE64'", "'TO_DAYS'", "'TO_SECONDS'", "'UCASE'", "'UNCOMPRESS'", 
			"'UNCOMPRESSED_LENGTH'", "'UNHEX'", "'UNIX_TIMESTAMP'", "'UPDATEXML'", 
			"'UPPER'", "'UUID'", "'UUID_SHORT'", "'VALIDATE_PASSWORD_STRENGTH'", 
			"'VERSION'", "'WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS'", "'WEEKDAY'", "'WEEKOFYEAR'", 
			"'WEIGHT_STRING'", "'WITHIN'", "'YEARWEEK'", "'Y'", "'X'", "':='", "'+='", 
			"'-='", "'*='", "'/='", "'%='", "'&='", "'^='", "'|='", "'*'", "'/'", 
			"'%'", "'+'", "'--'", "'-'", "'DIV'", "'MOD'", "'='", "'>'", "'<'", "'!'", 
			"'~'", "'|'", "'&'", "'^'", "'.'", "'('", "')'", "','", "';'", "'@'", 
			"'0'", "'1'", "'2'", "'''", "'\"'", "'`'", "':'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, "SPACE", "SPEC_MYSQL_COMMENT", "COMMENT_INPUT", "LINE_COMMENT", 
			"ADD", "ALL", "ALTER", "ALWAYS", "ANALYZE", "AND", "AS", "ASC", "BEFORE", 
			"BETWEEN", "BOTH", "BY", "CALL", "CASCADE", "CASE", "CAST", "CHANGE", 
			"CHARACTER", "CHECK", "COLLATE", "COLUMN", "CONDITION", "CONSTRAINT", 
			"CONTINUE", "CONVERT", "CREATE", "CROSS", "CURRENT", "CURRENT_USER", 
			"CURSOR", "DATABASE", "DATABASES", "DECLARE", "DEFAULT", "DELAYED", "DELETE", 
			"DESC", "DESCRIBE", "DETERMINISTIC", "DIAGNOSTICS", "DISTINCT", "DISTINCTROW", 
			"DROP", "EACH", "ELSE", "ELSEIF", "EMPTY", "ENCLOSED", "ESCAPED", "EXISTS", 
			"EXIT", "EXPLAIN", "FALSE", "FETCH", "FOR", "FORCE", "FOREIGN", "FROM", 
			"FULLTEXT", "GENERATED", "GET", "GRANT", "GROUP", "HAVING", "HIGH_PRIORITY", 
			"IF", "IGNORE", "IN", "INDEX", "INFILE", "INNER", "INOUT", "INSERT", 
			"INTERVAL", "INTO", "IS", "ITERATE", "JOIN", "KEY", "KEYS", "KILL", "LEADING", 
			"LEAVE", "LEFT", "LIKE", "LIMIT", "LINEAR", "LINES", "LOAD", "LOCK", 
			"LOOP", "LOW_PRIORITY", "MASTER_BIND", "MASTER_SSL_VERIFY_SERVER_CERT", 
			"MATCH", "MAXVALUE", "MODIFIES", "NATURAL", "NOT", "NO_WRITE_TO_BINLOG", 
			"NULL_LITERAL", "NUMBER", "ON", "OPTIMIZE", "OPTION", "OPTIONALLY", "OR", 
			"ORDER", "OUT", "OUTER", "OUTFILE", "PARTITION", "PRIMARY", "PROCEDURE", 
			"PURGE", "RANGE", "READ", "READS", "REFERENCES", "REGEXP", "RELEASE", 
			"RENAME", "REPEAT", "REPLACE", "REQUIRE", "RESIGNAL", "RESTRICT", "RETURN", 
			"REVOKE", "RIGHT", "RLIKE", "SCHEMA", "SCHEMAS", "SELECT", "SET", "SEPARATOR", 
			"SHOW", "SIGNAL", "SPATIAL", "SQL", "SQLEXCEPTION", "SQLSTATE", "SQLWARNING", 
			"SQL_BIG_RESULT", "SQL_CALC_FOUND_ROWS", "SQL_SMALL_RESULT", "SSL", "STACKED", 
			"STARTING", "STRAIGHT_JOIN", "TABLE", "TERMINATED", "THEN", "TO", "TRAILING", 
			"TRIGGER", "TRUE", "UNDO", "UNION", "UNIQUE", "UNLOCK", "UNSIGNED", "UPDATE", 
			"USAGE", "USE", "USING", "VALUES", "WHEN", "WHERE", "WHILE", "WITH", 
			"WRITE", "XOR", "ZEROFILL", "TINYINT", "SMALLINT", "MEDIUMINT", "MIDDLEINT", 
			"INT", "INT1", "INT2", "INT3", "INT4", "INT8", "INTEGER", "BIGINT", "REAL", 
			"DOUBLE", "PRECISION", "FLOAT", "FLOAT4", "FLOAT8", "DECIMAL", "DEC", 
			"NUMERIC", "DATE", "TIME", "TIMESTAMP", "DATETIME", "YEAR", "CHAR", "VARCHAR", 
			"NVARCHAR", "NATIONAL", "BINARY", "VARBINARY", "TINYBLOB", "BLOB", "MEDIUMBLOB", 
			"LONG", "LONGBLOB", "TINYTEXT", "TEXT", "MEDIUMTEXT", "LONGTEXT", "ENUM", 
			"VARYING", "SERIAL", "YEAR_MONTH", "DAY_HOUR", "DAY_MINUTE", "DAY_SECOND", 
			"HOUR_MINUTE", "HOUR_SECOND", "MINUTE_SECOND", "SECOND_MICROSECOND", 
			"MINUTE_MICROSECOND", "HOUR_MICROSECOND", "DAY_MICROSECOND", "JSON_ARRAY", 
			"JSON_OBJECT", "JSON_QUOTE", "JSON_CONTAINS", "JSON_CONTAINS_PATH", "JSON_EXTRACT", 
			"JSON_KEYS", "JSON_OVERLAPS", "JSON_SEARCH", "JSON_VALUE", "JSON_ARRAY_APPEND", 
			"JSON_ARRAY_INSERT", "JSON_INSERT", "JSON_MERGE", "JSON_MERGE_PATCH", 
			"JSON_MERGE_PRESERVE", "JSON_REMOVE", "JSON_REPLACE", "JSON_SET", "JSON_UNQUOTE", 
			"JSON_DEPTH", "JSON_LENGTH", "JSON_TYPE", "JSON_VALID", "JSON_TABLE", 
			"JSON_SCHEMA_VALID", "JSON_SCHEMA_VALIDATION_REPORT", "JSON_PRETTY", 
			"JSON_STORAGE_FREE", "JSON_STORAGE_SIZE", "JSON_ARRAYAGG", "JSON_OBJECTAGG", 
			"AVG", "BIT_AND", "BIT_OR", "BIT_XOR", "COUNT", "GROUP_CONCAT", "MAX", 
			"MIN", "STD", "STDDEV", "STDDEV_POP", "STDDEV_SAMP", "SUM", "VAR_POP", 
			"VAR_SAMP", "VARIANCE", "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", 
			"LOCALTIME", "CURDATE", "CURTIME", "DATE_ADD", "DATE_SUB", "EXTRACT", 
			"LOCALTIMESTAMP", "NOW", "POSITION", "SUBSTR", "SUBSTRING", "SYSDATE", 
			"TRIM", "UTC_DATE", "UTC_TIME", "UTC_TIMESTAMP", "ACCOUNT", "ACTION", 
			"AFTER", "AGGREGATE", "ALGORITHM", "ANY", "AT", "AUTHORS", "AUTOCOMMIT", 
			"AUTOEXTEND_SIZE", "AUTO_INCREMENT", "AVG_ROW_LENGTH", "BEGIN", "BINLOG", 
			"BIT", "BLOCK", "BOOL", "BOOLEAN", "BTREE", "CACHE", "CASCADED", "CHAIN", 
			"CHANGED", "CHANNEL", "CHECKSUM", "PAGE_CHECKSUM", "CIPHER", "CLASS_ORIGIN", 
			"CLIENT", "CLOSE", "COALESCE", "CODE", "COLUMNS", "COLUMN_FORMAT", "COLUMN_NAME", 
			"COMMENT", "COMMIT", "COMPACT", "COMPLETION", "COMPRESSED", "COMPRESSION", 
			"CONCURRENT", "CONNECT", "CONNECTION", "CONSISTENT", "CONSTRAINT_CATALOG", 
			"CONSTRAINT_SCHEMA", "CONSTRAINT_NAME", "CONTAINS", "CONTEXT", "CONTRIBUTORS", 
			"COPY", "CPU", "CURSOR_NAME", "DATA", "DATAFILE", "DEALLOCATE", "DEFAULT_AUTH", 
			"DEFINER", "DELAY_KEY_WRITE", "DES_KEY_FILE", "DIRECTORY", "DISABLE", 
			"DISCARD", "DISK", "DO", "DUMPFILE", "DUPLICATE", "DYNAMIC", "ENABLE", 
			"ENCRYPTION", "END", "ENDS", "ENGINE", "ENGINES", "ERROR", "ERRORS", 
			"ESCAPE", "EVEN", "EVENT", "EVENTS", "EVERY", "EXCHANGE", "EXCLUSIVE", 
			"EXPIRE", "EXPORT", "EXTENDED", "EXTENT_SIZE", "FAST", "FAULTS", "FIELDS", 
			"FILE_BLOCK_SIZE", "FILTER", "FIRST", "FIXED", "FLUSH", "FOLLOWS", "FOUND", 
			"FULL", "FUNCTION", "GENERAL", "GLOBAL", "GRANTS", "GROUP_REPLICATION", 
			"HANDLER", "HASH", "HELP", "HOST", "HOSTS", "IDENTIFIED", "IGNORE_SERVER_IDS", 
			"IMPORT", "INDEXES", "INITIAL_SIZE", "INPLACE", "INSERT_METHOD", "INSTALL", 
			"INSTANCE", "INVISIBLE", "INVOKER", "IO", "IO_THREAD", "IPC", "ISOLATION", 
			"ISSUER", "JSON", "KEY_BLOCK_SIZE", "LANGUAGE", "LAST", "LEAVES", "LESS", 
			"LEVEL", "LIST", "LOCAL", "LOGFILE", "LOGS", "MASTER", "MASTER_AUTO_POSITION", 
			"MASTER_CONNECT_RETRY", "MASTER_DELAY", "MASTER_HEARTBEAT_PERIOD", "MASTER_HOST", 
			"MASTER_LOG_FILE", "MASTER_LOG_POS", "MASTER_PASSWORD", "MASTER_PORT", 
			"MASTER_RETRY_COUNT", "MASTER_SSL", "MASTER_SSL_CA", "MASTER_SSL_CAPATH", 
			"MASTER_SSL_CERT", "MASTER_SSL_CIPHER", "MASTER_SSL_CRL", "MASTER_SSL_CRLPATH", 
			"MASTER_SSL_KEY", "MASTER_TLS_VERSION", "MASTER_USER", "MAX_CONNECTIONS_PER_HOUR", 
			"MAX_QUERIES_PER_HOUR", "MAX_ROWS", "MAX_SIZE", "MAX_UPDATES_PER_HOUR", 
			"MAX_USER_CONNECTIONS", "MEDIUM", "MEMBER", "MERGE", "MESSAGE_TEXT", 
			"MID", "MIGRATE", "MIN_ROWS", "MODE", "MODIFY", "MUTEX", "MYSQL", "MYSQL_ERRNO", 
			"NAME", "NAMES", "NCHAR", "NEVER", "NEXT", "NO", "NODEGROUP", "NONE", 
			"ODBC", "OFFLINE", "OFFSET", "OF", "OJ", "OLD_PASSWORD", "ONE", "ONLINE", 
			"ONLY", "OPEN", "OPTIMIZER_COSTS", "OPTIONS", "OWNER", "PACK_KEYS", "PAGE", 
			"PARSER", "PARTIAL", "PARTITIONING", "PARTITIONS", "PASSWORD", "PHASE", 
			"PLUGIN", "PLUGIN_DIR", "PLUGINS", "PORT", "PRECEDES", "PREPARE", "PRESERVE", 
			"PREV", "PROCESSLIST", "PROFILE", "PROFILES", "PROXY", "QUERY", "QUICK", 
			"REBUILD", "RECOVER", "REDO_BUFFER_SIZE", "REDUNDANT", "RELAY", "RELAY_LOG_FILE", 
			"RELAY_LOG_POS", "RELAYLOG", "REMOVE", "REORGANIZE", "REPAIR", "REPLICATE_DO_DB", 
			"REPLICATE_DO_TABLE", "REPLICATE_IGNORE_DB", "REPLICATE_IGNORE_TABLE", 
			"REPLICATE_REWRITE_DB", "REPLICATE_WILD_DO_TABLE", "REPLICATE_WILD_IGNORE_TABLE", 
			"REPLICATION", "RESET", "RESUME", "RETURNED_SQLSTATE", "RETURNING", "RETURNS", 
			"ROLE", "ROLLBACK", "ROLLUP", "ROTATE", "ROW", "ROWS", "ROW_FORMAT", 
			"SAVEPOINT", "SCHEDULE", "SECURITY", "SERVER", "SESSION", "SHARE", "SHARED", 
			"SIGNED", "SIMPLE", "SLAVE", "SLOW", "SNAPSHOT", "SOCKET", "SOME", "SONAME", 
			"SOUNDS", "SOURCE", "SQL_AFTER_GTIDS", "SQL_AFTER_MTS_GAPS", "SQL_BEFORE_GTIDS", 
			"SQL_BUFFER_RESULT", "SQL_CACHE", "SQL_NO_CACHE", "SQL_THREAD", "START", 
			"STARTS", "STATS_AUTO_RECALC", "STATS_PERSISTENT", "STATS_SAMPLE_PAGES", 
			"STATUS", "STOP", "STORAGE", "STORED", "STRING", "SUBCLASS_ORIGIN", "SUBJECT", 
			"SUBPARTITION", "SUBPARTITIONS", "SUSPEND", "SWAPS", "SWITCHES", "TABLE_NAME", 
			"TABLESPACE", "TABLE_TYPE", "TEMPORARY", "TEMPTABLE", "THAN", "TRADITIONAL", 
			"TRANSACTION", "TRANSACTIONAL", "TRIGGERS", "TRUNCATE", "UNDEFINED", 
			"UNDOFILE", "UNDO_BUFFER_SIZE", "UNINSTALL", "UNKNOWN", "UNTIL", "UPGRADE", 
			"USER", "USE_FRM", "USER_RESOURCES", "VALIDATION", "VALUE", "VARIABLES", 
			"VIEW", "VIRTUAL", "VISIBLE", "WAIT", "WARNINGS", "WITHOUT", "WORK", 
			"WRAPPER", "X509", "XA", "XML", "EUR", "USA", "JIS", "ISO", "INTERNAL", 
			"QUARTER", "MONTH", "DAY", "HOUR", "MINUTE", "WEEK", "SECOND", "MICROSECOND", 
			"TABLES", "ROUTINE", "EXECUTE", "FILE", "PROCESS", "RELOAD", "SHUTDOWN", 
			"SUPER", "PRIVILEGES", "APPLICATION_PASSWORD_ADMIN", "AUDIT_ADMIN", "BACKUP_ADMIN", 
			"BINLOG_ADMIN", "BINLOG_ENCRYPTION_ADMIN", "CLONE_ADMIN", "CONNECTION_ADMIN", 
			"ENCRYPTION_KEY_ADMIN", "FIREWALL_ADMIN", "FIREWALL_USER", "FLUSH_OPTIMIZER_COSTS", 
			"FLUSH_STATUS", "FLUSH_TABLES", "FLUSH_USER_RESOURCES", "GROUP_REPLICATION_ADMIN", 
			"INNODB_REDO_LOG_ARCHIVE", "INNODB_REDO_LOG_ENABLE", "NDB_STORED_USER", 
			"PERSIST_RO_VARIABLES_ADMIN", "REPLICATION_APPLIER", "REPLICATION_SLAVE_ADMIN", 
			"RESOURCE_GROUP_ADMIN", "RESOURCE_GROUP_USER", "ROLE_ADMIN", "SERVICE_CONNECTION_ADMIN", 
			"SESSION_VARIABLES_ADMIN", "SET_USER_ID", "SHOW_ROUTINE", "SYSTEM_VARIABLES_ADMIN", 
			"TABLE_ENCRYPTION_ADMIN", "VERSION_TOKEN_ADMIN", "XA_RECOVER_ADMIN", 
			"ARMSCII8", "ASCII", "BIG5", "CP1250", "CP1251", "CP1256", "CP1257", 
			"CP850", "CP852", "CP866", "CP932", "DEC8", "EUCJPMS", "EUCKR", "GB2312", 
			"GBK", "GEOSTD8", "GREEK", "HEBREW", "HP8", "KEYBCS2", "KOI8R", "KOI8U", 
			"LATIN1", "LATIN2", "LATIN5", "LATIN7", "MACCE", "MACROMAN", "SJIS", 
			"SWE7", "TIS620", "UCS2", "UJIS", "UTF16", "UTF16LE", "UTF32", "UTF8", 
			"UTF8MB3", "UTF8MB4", "ARCHIVE", "BLACKHOLE", "CSV", "FEDERATED", "INNODB", 
			"MEMORY", "MRG_MYISAM", "MYISAM", "NDB", "NDBCLUSTER", "PERFORMANCE_SCHEMA", 
			"TOKUDB", "REPEATABLE", "COMMITTED", "UNCOMMITTED", "SERIALIZABLE", "GEOMETRYCOLLECTION", 
			"GEOMCOLLECTION", "GEOMETRY", "LINESTRING", "MULTILINESTRING", "MULTIPOINT", 
			"MULTIPOLYGON", "POINT", "POLYGON", "ABS", "ACOS", "ADDDATE", "ADDTIME", 
			"AES_DECRYPT", "AES_ENCRYPT", "AREA", "ASBINARY", "ASIN", "ASTEXT", "ASWKB", 
			"ASWKT", "ASYMMETRIC_DECRYPT", "ASYMMETRIC_DERIVE", "ASYMMETRIC_ENCRYPT", 
			"ASYMMETRIC_SIGN", "ASYMMETRIC_VERIFY", "ATAN", "ATAN2", "BENCHMARK", 
			"BIN", "BIT_COUNT", "BIT_LENGTH", "BUFFER", "CATALOG_NAME", "CEIL", "CEILING", 
			"CENTROID", "CHARACTER_LENGTH", "CHARSET", "CHAR_LENGTH", "COERCIBILITY", 
			"COLLATION", "COMPRESS", "CONCAT", "CONCAT_WS", "CONNECTION_ID", "CONV", 
			"CONVERT_TZ", "COS", "COT", "CRC32", "CREATE_ASYMMETRIC_PRIV_KEY", "CREATE_ASYMMETRIC_PUB_KEY", 
			"CREATE_DH_PARAMETERS", "CREATE_DIGEST", "CROSSES", "DATEDIFF", "DATE_FORMAT", 
			"DAYNAME", "DAYOFMONTH", "DAYOFWEEK", "DAYOFYEAR", "DECODE", "DEGREES", 
			"DES_DECRYPT", "DES_ENCRYPT", "DIMENSION", "DISJOINT", "ELT", "ENCODE", 
			"ENCRYPT", "ENDPOINT", "ENVELOPE", "EQUALS", "EXP", "EXPORT_SET", "EXTERIORRING", 
			"EXTRACTVALUE", "FIELD", "FIND_IN_SET", "FLOOR", "FORMAT", "FOUND_ROWS", 
			"FROM_BASE64", "FROM_DAYS", "FROM_UNIXTIME", "GEOMCOLLFROMTEXT", "GEOMCOLLFROMWKB", 
			"GEOMETRYCOLLECTIONFROMTEXT", "GEOMETRYCOLLECTIONFROMWKB", "GEOMETRYFROMTEXT", 
			"GEOMETRYFROMWKB", "GEOMETRYN", "GEOMETRYTYPE", "GEOMFROMTEXT", "GEOMFROMWKB", 
			"GET_FORMAT", "GET_LOCK", "GLENGTH", "GREATEST", "GTID_SUBSET", "GTID_SUBTRACT", 
			"HEX", "IFNULL", "INET6_ATON", "INET6_NTOA", "INET_ATON", "INET_NTOA", 
			"INSTR", "INTERIORRINGN", "INTERSECTS", "ISCLOSED", "ISEMPTY", "ISNULL", 
			"ISSIMPLE", "IS_FREE_LOCK", "IS_IPV4", "IS_IPV4_COMPAT", "IS_IPV4_MAPPED", 
			"IS_IPV6", "IS_USED_LOCK", "LAST_INSERT_ID", "LCASE", "LEAST", "LENGTH", 
			"LINEFROMTEXT", "LINEFROMWKB", "LINESTRINGFROMTEXT", "LINESTRINGFROMWKB", 
			"LN", "LOAD_FILE", "LOCATE", "LOG", "LOG10", "LOG2", "LOWER", "LPAD", 
			"LTRIM", "MAKEDATE", "MAKETIME", "MAKE_SET", "MASTER_POS_WAIT", "MBRCONTAINS", 
			"MBRDISJOINT", "MBREQUAL", "MBRINTERSECTS", "MBROVERLAPS", "MBRTOUCHES", 
			"MBRWITHIN", "MD5", "MLINEFROMTEXT", "MLINEFROMWKB", "MONTHNAME", "MPOINTFROMTEXT", 
			"MPOINTFROMWKB", "MPOLYFROMTEXT", "MPOLYFROMWKB", "MULTILINESTRINGFROMTEXT", 
			"MULTILINESTRINGFROMWKB", "MULTIPOINTFROMTEXT", "MULTIPOINTFROMWKB", 
			"MULTIPOLYGONFROMTEXT", "MULTIPOLYGONFROMWKB", "NAME_CONST", "NULLIF", 
			"NUMGEOMETRIES", "NUMINTERIORRINGS", "NUMPOINTS", "OCT", "OCTET_LENGTH", 
			"ORD", "OVERLAPS", "PERIOD_ADD", "PERIOD_DIFF", "PI", "POINTFROMTEXT", 
			"POINTFROMWKB", "POINTN", "POLYFROMTEXT", "POLYFROMWKB", "POLYGONFROMTEXT", 
			"POLYGONFROMWKB", "POW", "POWER", "QUOTE", "RADIANS", "RAND", "RANDOM_BYTES", 
			"RELEASE_LOCK", "REVERSE", "ROUND", "ROW_COUNT", "RPAD", "RTRIM", "SEC_TO_TIME", 
			"SESSION_USER", "SHA", "SHA1", "SHA2", "SCHEMA_NAME", "SIGN", "SIN", 
			"SLEEP", "SOUNDEX", "SQL_THREAD_WAIT_AFTER_GTIDS", "SQRT", "SRID", "STARTPOINT", 
			"STRCMP", "STR_TO_DATE", "ST_AREA", "ST_ASBINARY", "ST_ASTEXT", "ST_ASWKB", 
			"ST_ASWKT", "ST_BUFFER", "ST_CENTROID", "ST_CONTAINS", "ST_CROSSES", 
			"ST_DIFFERENCE", "ST_DIMENSION", "ST_DISJOINT", "ST_DISTANCE", "ST_ENDPOINT", 
			"ST_ENVELOPE", "ST_EQUALS", "ST_EXTERIORRING", "ST_GEOMCOLLFROMTEXT", 
			"ST_GEOMCOLLFROMTXT", "ST_GEOMCOLLFROMWKB", "ST_GEOMETRYCOLLECTIONFROMTEXT", 
			"ST_GEOMETRYCOLLECTIONFROMWKB", "ST_GEOMETRYFROMTEXT", "ST_GEOMETRYFROMWKB", 
			"ST_GEOMETRYN", "ST_GEOMETRYTYPE", "ST_GEOMFROMTEXT", "ST_GEOMFROMWKB", 
			"ST_INTERIORRINGN", "ST_INTERSECTION", "ST_INTERSECTS", "ST_ISCLOSED", 
			"ST_ISEMPTY", "ST_ISSIMPLE", "ST_LINEFROMTEXT", "ST_LINEFROMWKB", "ST_LINESTRINGFROMTEXT", 
			"ST_LINESTRINGFROMWKB", "ST_NUMGEOMETRIES", "ST_NUMINTERIORRING", "ST_NUMINTERIORRINGS", 
			"ST_NUMPOINTS", "ST_OVERLAPS", "ST_POINTFROMTEXT", "ST_POINTFROMWKB", 
			"ST_POINTN", "ST_POLYFROMTEXT", "ST_POLYFROMWKB", "ST_POLYGONFROMTEXT", 
			"ST_POLYGONFROMWKB", "ST_SRID", "ST_STARTPOINT", "ST_SYMDIFFERENCE", 
			"ST_TOUCHES", "ST_UNION", "ST_WITHIN", "ST_X", "ST_Y", "SUBDATE", "SUBSTRING_INDEX", 
			"SUBTIME", "SYSTEM_USER", "TAN", "TIMEDIFF", "TIMESTAMPADD", "TIMESTAMPDIFF", 
			"TIME_FORMAT", "TIME_TO_SEC", "TOUCHES", "TO_BASE64", "TO_DAYS", "TO_SECONDS", 
			"UCASE", "UNCOMPRESS", "UNCOMPRESSED_LENGTH", "UNHEX", "UNIX_TIMESTAMP", 
			"UPDATEXML", "UPPER", "UUID", "UUID_SHORT", "VALIDATE_PASSWORD_STRENGTH", 
			"VERSION", "WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS", "WEEKDAY", "WEEKOFYEAR", 
			"WEIGHT_STRING", "WITHIN", "YEARWEEK", "Y_FUNCTION", "X_FUNCTION", "VAR_ASSIGN", 
			"PLUS_ASSIGN", "MINUS_ASSIGN", "MULT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", 
			"AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN", "STAR", "DIVIDE", "MODULE", 
			"PLUS", "MINUSMINUS", "MINUS", "DIV", "MOD", "EQUAL_SYMBOL", "GREATER_SYMBOL", 
			"LESS_SYMBOL", "EXCLAMATION_SYMBOL", "BIT_NOT_OP", "BIT_OR_OP", "BIT_AND_OP", 
			"BIT_XOR_OP", "DOT", "LR_BRACKET", "RR_BRACKET", "COMMA", "SEMI", "AT_SIGN", 
			"ZERO_DECIMAL", "ONE_DECIMAL", "TWO_DECIMAL", "SINGLE_QUOTE_SYMB", "DOUBLE_QUOTE_SYMB", 
			"REVERSE_QUOTE_SYMB", "COLON_SYMB", "CHARSET_REVERSE_QOUTE_STRING", "FILESIZE_LITERAL", 
			"START_NATIONAL_STRING_LITERAL", "STRING_LITERAL", "DECIMAL_LITERAL", 
			"HEXADECIMAL_LITERAL", "REAL_LITERAL", "NULL_SPEC_LITERAL", "BIT_STRING", 
			"STRING_CHARSET_NAME", "DOT_ID", "ID", "REVERSE_QUOTE_ID", "STRING_USER_NAME", 
			"IP_ADDRESS", "LOCAL_ID", "GLOBAL_ID", "ERROR_RECONGNIGION", "OPTIONAL"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "MySqlParser.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public MySqlParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	public static class ProgramContext extends ParserRuleContext {
		public RootContext root() {
			return getRuleContext(RootContext.class,0);
		}
		public TerminalNode EOF() { return getToken(MySqlParser.EOF, 0); }
		public ProgramContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_program; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterProgram(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitProgram(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitProgram(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProgramContext program() throws RecognitionException {
		ProgramContext _localctx = new ProgramContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_program);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(86);
			root();
			setState(87);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RootContext extends ParserRuleContext {
		public StatementContext statement() {
			return getRuleContext(StatementContext.class,0);
		}
		public TerminalNode EOF() { return getToken(MySqlParser.EOF, 0); }
		public TerminalNode SEMI() { return getToken(MySqlParser.SEMI, 0); }
		public RootContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_root; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRoot(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRoot(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRoot(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RootContext root() throws RecognitionException {
		RootContext _localctx = new RootContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_root);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(89);
			statement();
			setState(91);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SEMI) {
				{
				setState(90);
				match(SEMI);
				}
			}

			setState(93);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StatementContext extends ParserRuleContext {
		public CreateTableContext createTable() {
			return getRuleContext(CreateTableContext.class,0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StatementContext statement() throws RecognitionException {
		StatementContext _localctx = new StatementContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(95);
			createTable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTableContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode TEMPORARY() { return getToken(MySqlParser.TEMPORARY, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public CreateDefinitionsContext createDefinitions() {
			return getRuleContext(CreateDefinitionsContext.class,0);
		}
		public List<TableOptionContext> tableOption() {
			return getRuleContexts(TableOptionContext.class);
		}
		public TableOptionContext tableOption(int i) {
			return getRuleContext(TableOptionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public CreateTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCreateTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTableContext createTable() throws RecognitionException {
		CreateTableContext _localctx = new CreateTableContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_createTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(97);
			match(CREATE);
			setState(99);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TEMPORARY) {
				{
				setState(98);
				match(TEMPORARY);
				}
			}

			setState(101);
			match(TABLE);
			setState(103);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(102);
				ifNotExists();
				}
			}

			setState(105);
			tableName();
			setState(107);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(106);
				createDefinitions();
				}
			}

			setState(119);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CHARACTER) | (1L << COLLATE) | (1L << DEFAULT))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (AUTO_INCREMENT - 311)) | (1L << (COMMENT - 311)) | (1L << (ENGINE - 311)))) != 0) || _la==CHARSET) {
				{
				setState(109);
				tableOption();
				setState(116);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CHARACTER) | (1L << COLLATE) | (1L << DEFAULT))) != 0) || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (AUTO_INCREMENT - 311)) | (1L << (COMMENT - 311)) | (1L << (ENGINE - 311)))) != 0) || _la==CHARSET || _la==COMMA) {
					{
					{
					setState(111);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(110);
						match(COMMA);
						}
					}

					setState(113);
					tableOption();
					}
					}
					setState(118);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableNameContext extends ParserRuleContext {
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode DOT_ID() { return getToken(MySqlParser.DOT_ID, 0); }
		public TerminalNode DOT() { return getToken(MySqlParser.DOT, 0); }
		public TableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableNameContext tableName() throws RecognitionException {
		TableNameContext _localctx = new TableNameContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_tableName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(121);
			identifier();
			setState(125);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DOT_ID:
				{
				setState(122);
				match(DOT_ID);
				}
				break;
			case DOT:
				{
				setState(123);
				match(DOT);
				setState(124);
				identifier();
				}
				break;
			case EOF:
			case CHARACTER:
			case COLLATE:
			case DEFAULT:
			case MATCH:
			case ON:
			case AUTO_INCREMENT:
			case COMMENT:
			case ENGINE:
			case CHARSET:
			case LR_BRACKET:
			case RR_BRACKET:
			case COMMA:
			case SEMI:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDefinitionsContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<CreateDefinitionContext> createDefinition() {
			return getRuleContexts(CreateDefinitionContext.class);
		}
		public CreateDefinitionContext createDefinition(int i) {
			return getRuleContext(CreateDefinitionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public CreateDefinitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDefinitions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateDefinitions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateDefinitions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCreateDefinitions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDefinitionsContext createDefinitions() throws RecognitionException {
		CreateDefinitionsContext _localctx = new CreateDefinitionsContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_createDefinitions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(127);
			match(LR_BRACKET);
			setState(128);
			createDefinition();
			setState(133);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(129);
				match(COMMA);
				setState(130);
				createDefinition();
				}
				}
				setState(135);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(136);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableOptionContext extends ParserRuleContext {
		public TableOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableOption; }
	 
		public TableOptionContext() { }
		public void copyFrom(TableOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class TableOptionEngineContext extends TableOptionContext {
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public TableOptionEngineContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionEngine(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionEngine(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionEngine(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionAutoIncrementContext extends TableOptionContext {
		public TerminalNode AUTO_INCREMENT() { return getToken(MySqlParser.AUTO_INCREMENT, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionAutoIncrementContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionAutoIncrement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionAutoIncrement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionAutoIncrement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionCharsetContext extends TableOptionContext {
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode CHARSET() { return getToken(MySqlParser.CHARSET, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public List<TerminalNode> DEFAULT() { return getTokens(MySqlParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(MySqlParser.DEFAULT, i);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionCharsetContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionCharset(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionCharset(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionCharset(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionCollateContext extends TableOptionContext {
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionCollateContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionCollate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionCollate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionCollate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionCommentContext extends TableOptionContext {
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionCommentContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionComment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionComment(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableOptionComment(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableOptionContext tableOption() throws RecognitionException {
		TableOptionContext _localctx = new TableOptionContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_tableOption);
		int _la;
		try {
			setState(178);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,19,_ctx) ) {
			case 1:
				_localctx = new TableOptionEngineContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(138);
				match(ENGINE);
				setState(140);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(139);
					match(EQUAL_SYMBOL);
					}
				}

				setState(143);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONNECT || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & ((1L << (ARCHIVE - 720)) | (1L << (BLACKHOLE - 720)) | (1L << (CSV - 720)) | (1L << (FEDERATED - 720)) | (1L << (INNODB - 720)) | (1L << (MEMORY - 720)) | (1L << (MRG_MYISAM - 720)) | (1L << (MYISAM - 720)) | (1L << (NDB - 720)) | (1L << (NDBCLUSTER - 720)) | (1L << (PERFORMANCE_SCHEMA - 720)) | (1L << (TOKUDB - 720)))) != 0) || ((((_la - 1078)) & ~0x3f) == 0 && ((1L << (_la - 1078)) & ((1L << (STRING_LITERAL - 1078)) | (1L << (ID - 1078)) | (1L << (REVERSE_QUOTE_ID - 1078)))) != 0)) {
					{
					setState(142);
					engineName();
					}
				}

				}
				break;
			case 2:
				_localctx = new TableOptionAutoIncrementContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(145);
				match(AUTO_INCREMENT);
				setState(147);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(146);
					match(EQUAL_SYMBOL);
					}
				}

				setState(149);
				decimalLiteral();
				}
				break;
			case 3:
				_localctx = new TableOptionCharsetContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(151);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(150);
					match(DEFAULT);
					}
				}

				setState(156);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CHARACTER:
					{
					setState(153);
					match(CHARACTER);
					setState(154);
					match(SET);
					}
					break;
				case CHARSET:
					{
					setState(155);
					match(CHARSET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(159);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(158);
					match(EQUAL_SYMBOL);
					}
				}

				setState(163);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINARY:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
					{
					setState(161);
					charsetName();
					}
					break;
				case DEFAULT:
					{
					setState(162);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				_localctx = new TableOptionCollateContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(166);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(165);
					match(DEFAULT);
					}
				}

				setState(168);
				match(COLLATE);
				setState(170);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(169);
					match(EQUAL_SYMBOL);
					}
				}

				setState(172);
				collationName();
				}
				break;
			case 5:
				_localctx = new TableOptionCommentContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(173);
				match(COMMENT);
				setState(175);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(174);
					match(EQUAL_SYMBOL);
					}
				}

				setState(177);
				match(STRING_LITERAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CollationNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public CollationNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collationName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCollationName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCollationName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCollationName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CollationNameContext collationName() throws RecognitionException {
		CollationNameContext _localctx = new CollationNameContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_collationName);
		try {
			setState(182);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,20,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(180);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(181);
				match(STRING_LITERAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDefinitionContext extends ParserRuleContext {
		public ColumnDefinitionContext columnDefinition() {
			return getRuleContext(ColumnDefinitionContext.class,0);
		}
		public TableConstraintContext tableConstraint() {
			return getRuleContext(TableConstraintContext.class,0);
		}
		public CreateDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCreateDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDefinitionContext createDefinition() throws RecognitionException {
		CreateDefinitionContext _localctx = new CreateDefinitionContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_createDefinition);
		try {
			setState(186);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case GROUP:
			case LEFT:
			case NUMBER:
			case ORDER:
			case RIGHT:
			case SCHEMA:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case GROUP_CONCAT:
			case MAX:
			case MIN:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case NDB_STORED_USER:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case MOD:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
			case OPTIONAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(184);
				columnDefinition();
				}
				break;
			case CONSTRAINT:
			case FOREIGN:
			case PRIMARY:
			case UNIQUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(185);
				tableConstraint();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableConstraintContext extends ParserRuleContext {
		public TableConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableConstraint; }
	 
		public TableConstraintContext() { }
		public void copyFrom(TableConstraintContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class UniqueKeyTableConstraintContext extends TableConstraintContext {
		public IdentifierContext name;
		public Token indexFormat;
		public IdentifierContext index;
		public TerminalNode UNIQUE() { return getToken(MySqlParser.UNIQUE, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public UniqueKeyTableConstraintContext(TableConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUniqueKeyTableConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUniqueKeyTableConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUniqueKeyTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PrimaryKeyTableConstraintContext extends TableConstraintContext {
		public IdentifierContext name;
		public IdentifierContext index;
		public TerminalNode PRIMARY() { return getToken(MySqlParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public PrimaryKeyTableConstraintContext(TableConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPrimaryKeyTableConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPrimaryKeyTableConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPrimaryKeyTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ForeignKeyTableConstraintContext extends TableConstraintContext {
		public IdentifierContext name;
		public IdentifierContext index;
		public TerminalNode FOREIGN() { return getToken(MySqlParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public ReferenceDefinitionContext referenceDefinition() {
			return getRuleContext(ReferenceDefinitionContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public ForeignKeyTableConstraintContext(TableConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterForeignKeyTableConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitForeignKeyTableConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitForeignKeyTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableConstraintContext tableConstraint() throws RecognitionException {
		TableConstraintContext _localctx = new TableConstraintContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_tableConstraint);
		int _la;
		try {
			setState(246);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,36,_ctx) ) {
			case 1:
				_localctx = new PrimaryKeyTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(192);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(188);
					match(CONSTRAINT);
					setState(190);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (GROUP - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (NUMBER - 106)) | (1L << (ORDER - 106)) | (1L << (RIGHT - 106)) | (1L << (SCHEMA - 106)) | (1L << (STACKED - 106)))) != 0) || ((((_la - 200)) & ~0x3f) == 0 && ((1L << (_la - 200)) & ((1L << (DATE - 200)) | (1L << (TIME - 200)) | (1L << (TIMESTAMP - 200)) | (1L << (YEAR - 200)) | (1L << (SERIAL - 200)) | (1L << (JSON_ARRAY - 200)) | (1L << (JSON_OBJECT - 200)) | (1L << (JSON_QUOTE - 200)) | (1L << (JSON_CONTAINS - 200)) | (1L << (JSON_CONTAINS_PATH - 200)) | (1L << (JSON_EXTRACT - 200)) | (1L << (JSON_KEYS - 200)) | (1L << (JSON_OVERLAPS - 200)) | (1L << (JSON_SEARCH - 200)) | (1L << (JSON_VALUE - 200)) | (1L << (JSON_ARRAY_APPEND - 200)) | (1L << (JSON_ARRAY_INSERT - 200)) | (1L << (JSON_INSERT - 200)) | (1L << (JSON_MERGE - 200)) | (1L << (JSON_MERGE_PATCH - 200)) | (1L << (JSON_MERGE_PRESERVE - 200)) | (1L << (JSON_REMOVE - 200)) | (1L << (JSON_REPLACE - 200)) | (1L << (JSON_SET - 200)) | (1L << (JSON_UNQUOTE - 200)) | (1L << (JSON_DEPTH - 200)) | (1L << (JSON_LENGTH - 200)) | (1L << (JSON_TYPE - 200)) | (1L << (JSON_VALID - 200)) | (1L << (JSON_TABLE - 200)) | (1L << (JSON_SCHEMA_VALID - 200)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 200)) | (1L << (JSON_PRETTY - 200)) | (1L << (JSON_STORAGE_FREE - 200)) | (1L << (JSON_STORAGE_SIZE - 200)))) != 0) || ((((_la - 264)) & ~0x3f) == 0 && ((1L << (_la - 264)) & ((1L << (JSON_ARRAYAGG - 264)) | (1L << (JSON_OBJECTAGG - 264)) | (1L << (AVG - 264)) | (1L << (BIT_AND - 264)) | (1L << (BIT_OR - 264)) | (1L << (BIT_XOR - 264)) | (1L << (COUNT - 264)) | (1L << (GROUP_CONCAT - 264)) | (1L << (MAX - 264)) | (1L << (MIN - 264)) | (1L << (STD - 264)) | (1L << (STDDEV - 264)) | (1L << (STDDEV_POP - 264)) | (1L << (STDDEV_SAMP - 264)) | (1L << (SUM - 264)) | (1L << (VAR_POP - 264)) | (1L << (VAR_SAMP - 264)) | (1L << (VARIANCE - 264)) | (1L << (POSITION - 264)) | (1L << (ACCOUNT - 264)) | (1L << (ACTION - 264)) | (1L << (AFTER - 264)) | (1L << (AGGREGATE - 264)) | (1L << (ALGORITHM - 264)) | (1L << (ANY - 264)) | (1L << (AT - 264)) | (1L << (AUTHORS - 264)) | (1L << (AUTOCOMMIT - 264)) | (1L << (AUTOEXTEND_SIZE - 264)) | (1L << (AUTO_INCREMENT - 264)) | (1L << (AVG_ROW_LENGTH - 264)) | (1L << (BEGIN - 264)) | (1L << (BINLOG - 264)) | (1L << (BIT - 264)) | (1L << (BLOCK - 264)) | (1L << (BOOL - 264)) | (1L << (BOOLEAN - 264)) | (1L << (BTREE - 264)) | (1L << (CACHE - 264)) | (1L << (CASCADED - 264)) | (1L << (CHAIN - 264)) | (1L << (CHANGED - 264)) | (1L << (CHANNEL - 264)) | (1L << (CHECKSUM - 264)) | (1L << (PAGE_CHECKSUM - 264)) | (1L << (CIPHER - 264)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (CLASS_ORIGIN - 328)) | (1L << (CLIENT - 328)) | (1L << (CLOSE - 328)) | (1L << (COALESCE - 328)) | (1L << (CODE - 328)) | (1L << (COLUMNS - 328)) | (1L << (COLUMN_FORMAT - 328)) | (1L << (COLUMN_NAME - 328)) | (1L << (COMMENT - 328)) | (1L << (COMMIT - 328)) | (1L << (COMPACT - 328)) | (1L << (COMPLETION - 328)) | (1L << (COMPRESSED - 328)) | (1L << (COMPRESSION - 328)) | (1L << (CONCURRENT - 328)) | (1L << (CONNECT - 328)) | (1L << (CONNECTION - 328)) | (1L << (CONSISTENT - 328)) | (1L << (CONSTRAINT_CATALOG - 328)) | (1L << (CONSTRAINT_SCHEMA - 328)) | (1L << (CONSTRAINT_NAME - 328)) | (1L << (CONTAINS - 328)) | (1L << (CONTEXT - 328)) | (1L << (CONTRIBUTORS - 328)) | (1L << (COPY - 328)) | (1L << (CPU - 328)) | (1L << (CURSOR_NAME - 328)) | (1L << (DATA - 328)) | (1L << (DATAFILE - 328)) | (1L << (DEALLOCATE - 328)) | (1L << (DEFAULT_AUTH - 328)) | (1L << (DEFINER - 328)) | (1L << (DELAY_KEY_WRITE - 328)) | (1L << (DES_KEY_FILE - 328)) | (1L << (DIRECTORY - 328)) | (1L << (DISABLE - 328)) | (1L << (DISCARD - 328)) | (1L << (DISK - 328)) | (1L << (DO - 328)) | (1L << (DUMPFILE - 328)) | (1L << (DUPLICATE - 328)) | (1L << (DYNAMIC - 328)) | (1L << (ENABLE - 328)) | (1L << (ENCRYPTION - 328)) | (1L << (END - 328)) | (1L << (ENDS - 328)) | (1L << (ENGINE - 328)) | (1L << (ENGINES - 328)) | (1L << (ERROR - 328)) | (1L << (ERRORS - 328)) | (1L << (ESCAPE - 328)) | (1L << (EVEN - 328)) | (1L << (EVENT - 328)) | (1L << (EVENTS - 328)) | (1L << (EVERY - 328)) | (1L << (EXCHANGE - 328)) | (1L << (EXCLUSIVE - 328)) | (1L << (EXPIRE - 328)) | (1L << (EXPORT - 328)) | (1L << (EXTENDED - 328)) | (1L << (EXTENT_SIZE - 328)) | (1L << (FAST - 328)) | (1L << (FAULTS - 328)) | (1L << (FIELDS - 328)))) != 0) || ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (FILE_BLOCK_SIZE - 392)) | (1L << (FILTER - 392)) | (1L << (FIRST - 392)) | (1L << (FIXED - 392)) | (1L << (FLUSH - 392)) | (1L << (FOLLOWS - 392)) | (1L << (FOUND - 392)) | (1L << (FULL - 392)) | (1L << (FUNCTION - 392)) | (1L << (GENERAL - 392)) | (1L << (GLOBAL - 392)) | (1L << (GRANTS - 392)) | (1L << (GROUP_REPLICATION - 392)) | (1L << (HANDLER - 392)) | (1L << (HASH - 392)) | (1L << (HELP - 392)) | (1L << (HOST - 392)) | (1L << (HOSTS - 392)) | (1L << (IDENTIFIED - 392)) | (1L << (IGNORE_SERVER_IDS - 392)) | (1L << (IMPORT - 392)) | (1L << (INDEXES - 392)) | (1L << (INITIAL_SIZE - 392)) | (1L << (INPLACE - 392)) | (1L << (INSERT_METHOD - 392)) | (1L << (INSTALL - 392)) | (1L << (INSTANCE - 392)) | (1L << (INVISIBLE - 392)) | (1L << (INVOKER - 392)) | (1L << (IO - 392)) | (1L << (IO_THREAD - 392)) | (1L << (IPC - 392)) | (1L << (ISOLATION - 392)) | (1L << (ISSUER - 392)) | (1L << (JSON - 392)) | (1L << (KEY_BLOCK_SIZE - 392)) | (1L << (LANGUAGE - 392)) | (1L << (LAST - 392)) | (1L << (LEAVES - 392)) | (1L << (LESS - 392)) | (1L << (LEVEL - 392)) | (1L << (LIST - 392)) | (1L << (LOCAL - 392)) | (1L << (LOGFILE - 392)) | (1L << (LOGS - 392)) | (1L << (MASTER - 392)) | (1L << (MASTER_AUTO_POSITION - 392)) | (1L << (MASTER_CONNECT_RETRY - 392)) | (1L << (MASTER_DELAY - 392)) | (1L << (MASTER_HEARTBEAT_PERIOD - 392)) | (1L << (MASTER_HOST - 392)) | (1L << (MASTER_LOG_FILE - 392)) | (1L << (MASTER_LOG_POS - 392)) | (1L << (MASTER_PASSWORD - 392)) | (1L << (MASTER_PORT - 392)) | (1L << (MASTER_RETRY_COUNT - 392)) | (1L << (MASTER_SSL - 392)) | (1L << (MASTER_SSL_CA - 392)) | (1L << (MASTER_SSL_CAPATH - 392)) | (1L << (MASTER_SSL_CERT - 392)) | (1L << (MASTER_SSL_CIPHER - 392)) | (1L << (MASTER_SSL_CRL - 392)) | (1L << (MASTER_SSL_CRLPATH - 392)) | (1L << (MASTER_SSL_KEY - 392)))) != 0) || ((((_la - 456)) & ~0x3f) == 0 && ((1L << (_la - 456)) & ((1L << (MASTER_TLS_VERSION - 456)) | (1L << (MASTER_USER - 456)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 456)) | (1L << (MAX_QUERIES_PER_HOUR - 456)) | (1L << (MAX_ROWS - 456)) | (1L << (MAX_SIZE - 456)) | (1L << (MAX_UPDATES_PER_HOUR - 456)) | (1L << (MAX_USER_CONNECTIONS - 456)) | (1L << (MEDIUM - 456)) | (1L << (MEMBER - 456)) | (1L << (MERGE - 456)) | (1L << (MESSAGE_TEXT - 456)) | (1L << (MID - 456)) | (1L << (MIGRATE - 456)) | (1L << (MIN_ROWS - 456)) | (1L << (MODE - 456)) | (1L << (MODIFY - 456)) | (1L << (MUTEX - 456)) | (1L << (MYSQL - 456)) | (1L << (MYSQL_ERRNO - 456)) | (1L << (NAME - 456)) | (1L << (NAMES - 456)) | (1L << (NCHAR - 456)) | (1L << (NEVER - 456)) | (1L << (NEXT - 456)) | (1L << (NO - 456)) | (1L << (NODEGROUP - 456)) | (1L << (NONE - 456)) | (1L << (ODBC - 456)) | (1L << (OFFLINE - 456)) | (1L << (OFFSET - 456)) | (1L << (OF - 456)) | (1L << (OJ - 456)) | (1L << (OLD_PASSWORD - 456)) | (1L << (ONE - 456)) | (1L << (ONLINE - 456)) | (1L << (ONLY - 456)) | (1L << (OPEN - 456)) | (1L << (OPTIMIZER_COSTS - 456)) | (1L << (OPTIONS - 456)) | (1L << (OWNER - 456)) | (1L << (PACK_KEYS - 456)) | (1L << (PAGE - 456)) | (1L << (PARSER - 456)) | (1L << (PARTIAL - 456)) | (1L << (PARTITIONING - 456)) | (1L << (PARTITIONS - 456)) | (1L << (PASSWORD - 456)) | (1L << (PHASE - 456)) | (1L << (PLUGIN - 456)) | (1L << (PLUGIN_DIR - 456)) | (1L << (PLUGINS - 456)) | (1L << (PORT - 456)) | (1L << (PRECEDES - 456)) | (1L << (PREPARE - 456)) | (1L << (PRESERVE - 456)) | (1L << (PREV - 456)) | (1L << (PROCESSLIST - 456)) | (1L << (PROFILE - 456)) | (1L << (PROFILES - 456)) | (1L << (PROXY - 456)) | (1L << (QUERY - 456)) | (1L << (QUICK - 456)) | (1L << (REBUILD - 456)))) != 0) || ((((_la - 520)) & ~0x3f) == 0 && ((1L << (_la - 520)) & ((1L << (RECOVER - 520)) | (1L << (REDO_BUFFER_SIZE - 520)) | (1L << (REDUNDANT - 520)) | (1L << (RELAY - 520)) | (1L << (RELAY_LOG_FILE - 520)) | (1L << (RELAY_LOG_POS - 520)) | (1L << (RELAYLOG - 520)) | (1L << (REMOVE - 520)) | (1L << (REORGANIZE - 520)) | (1L << (REPAIR - 520)) | (1L << (REPLICATE_DO_DB - 520)) | (1L << (REPLICATE_DO_TABLE - 520)) | (1L << (REPLICATE_IGNORE_DB - 520)) | (1L << (REPLICATE_IGNORE_TABLE - 520)) | (1L << (REPLICATE_REWRITE_DB - 520)) | (1L << (REPLICATE_WILD_DO_TABLE - 520)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 520)) | (1L << (REPLICATION - 520)) | (1L << (RESET - 520)) | (1L << (RESUME - 520)) | (1L << (RETURNED_SQLSTATE - 520)) | (1L << (RETURNS - 520)) | (1L << (ROLE - 520)) | (1L << (ROLLBACK - 520)) | (1L << (ROLLUP - 520)) | (1L << (ROTATE - 520)) | (1L << (ROW - 520)) | (1L << (ROWS - 520)) | (1L << (ROW_FORMAT - 520)) | (1L << (SAVEPOINT - 520)) | (1L << (SCHEDULE - 520)) | (1L << (SECURITY - 520)) | (1L << (SERVER - 520)) | (1L << (SESSION - 520)) | (1L << (SHARE - 520)) | (1L << (SHARED - 520)) | (1L << (SIGNED - 520)) | (1L << (SIMPLE - 520)) | (1L << (SLAVE - 520)) | (1L << (SLOW - 520)) | (1L << (SNAPSHOT - 520)) | (1L << (SOCKET - 520)) | (1L << (SOME - 520)) | (1L << (SONAME - 520)) | (1L << (SOUNDS - 520)) | (1L << (SOURCE - 520)) | (1L << (SQL_AFTER_GTIDS - 520)) | (1L << (SQL_AFTER_MTS_GAPS - 520)) | (1L << (SQL_BEFORE_GTIDS - 520)) | (1L << (SQL_BUFFER_RESULT - 520)) | (1L << (SQL_CACHE - 520)) | (1L << (SQL_NO_CACHE - 520)) | (1L << (SQL_THREAD - 520)) | (1L << (START - 520)) | (1L << (STARTS - 520)) | (1L << (STATS_AUTO_RECALC - 520)) | (1L << (STATS_PERSISTENT - 520)) | (1L << (STATS_SAMPLE_PAGES - 520)) | (1L << (STATUS - 520)) | (1L << (STOP - 520)) | (1L << (STORAGE - 520)) | (1L << (STRING - 520)))) != 0) || ((((_la - 584)) & ~0x3f) == 0 && ((1L << (_la - 584)) & ((1L << (SUBCLASS_ORIGIN - 584)) | (1L << (SUBJECT - 584)) | (1L << (SUBPARTITION - 584)) | (1L << (SUBPARTITIONS - 584)) | (1L << (SUSPEND - 584)) | (1L << (SWAPS - 584)) | (1L << (SWITCHES - 584)) | (1L << (TABLE_NAME - 584)) | (1L << (TABLESPACE - 584)) | (1L << (TEMPORARY - 584)) | (1L << (TEMPTABLE - 584)) | (1L << (THAN - 584)) | (1L << (TRADITIONAL - 584)) | (1L << (TRANSACTION - 584)) | (1L << (TRANSACTIONAL - 584)) | (1L << (TRIGGERS - 584)) | (1L << (TRUNCATE - 584)) | (1L << (UNDEFINED - 584)) | (1L << (UNDOFILE - 584)) | (1L << (UNDO_BUFFER_SIZE - 584)) | (1L << (UNINSTALL - 584)) | (1L << (UNKNOWN - 584)) | (1L << (UNTIL - 584)) | (1L << (UPGRADE - 584)) | (1L << (USER - 584)) | (1L << (USE_FRM - 584)) | (1L << (USER_RESOURCES - 584)) | (1L << (VALIDATION - 584)) | (1L << (VALUE - 584)) | (1L << (VARIABLES - 584)) | (1L << (VIEW - 584)) | (1L << (VISIBLE - 584)) | (1L << (WAIT - 584)) | (1L << (WARNINGS - 584)) | (1L << (WITHOUT - 584)) | (1L << (WORK - 584)) | (1L << (WRAPPER - 584)) | (1L << (X509 - 584)) | (1L << (XA - 584)) | (1L << (XML - 584)) | (1L << (INTERNAL - 584)) | (1L << (QUARTER - 584)) | (1L << (MONTH - 584)) | (1L << (DAY - 584)) | (1L << (HOUR - 584)) | (1L << (MINUTE - 584)) | (1L << (WEEK - 584)) | (1L << (SECOND - 584)) | (1L << (MICROSECOND - 584)))) != 0) || ((((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & ((1L << (AUDIT_ADMIN - 649)) | (1L << (BACKUP_ADMIN - 649)) | (1L << (BINLOG_ADMIN - 649)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 649)) | (1L << (CLONE_ADMIN - 649)) | (1L << (CONNECTION_ADMIN - 649)) | (1L << (ENCRYPTION_KEY_ADMIN - 649)) | (1L << (FIREWALL_ADMIN - 649)) | (1L << (FIREWALL_USER - 649)) | (1L << (GROUP_REPLICATION_ADMIN - 649)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 649)) | (1L << (NDB_STORED_USER - 649)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 649)) | (1L << (REPLICATION_APPLIER - 649)) | (1L << (REPLICATION_SLAVE_ADMIN - 649)) | (1L << (RESOURCE_GROUP_ADMIN - 649)) | (1L << (RESOURCE_GROUP_USER - 649)) | (1L << (ROLE_ADMIN - 649)) | (1L << (SESSION_VARIABLES_ADMIN - 649)) | (1L << (SET_USER_ID - 649)) | (1L << (SHOW_ROUTINE - 649)) | (1L << (SYSTEM_VARIABLES_ADMIN - 649)) | (1L << (TABLE_ENCRYPTION_ADMIN - 649)) | (1L << (VERSION_TOKEN_ADMIN - 649)) | (1L << (XA_RECOVER_ADMIN - 649)))) != 0) || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & ((1L << (ARCHIVE - 720)) | (1L << (BLACKHOLE - 720)) | (1L << (CSV - 720)) | (1L << (FEDERATED - 720)) | (1L << (INNODB - 720)) | (1L << (MEMORY - 720)) | (1L << (MRG_MYISAM - 720)) | (1L << (MYISAM - 720)) | (1L << (NDB - 720)) | (1L << (NDBCLUSTER - 720)) | (1L << (PERFORMANCE_SCHEMA - 720)) | (1L << (TOKUDB - 720)) | (1L << (GEOMETRYCOLLECTION - 720)) | (1L << (LINESTRING - 720)) | (1L << (MULTILINESTRING - 720)) | (1L << (MULTIPOINT - 720)) | (1L << (MULTIPOLYGON - 720)) | (1L << (POINT - 720)) | (1L << (POLYGON - 720)) | (1L << (ABS - 720)) | (1L << (ACOS - 720)) | (1L << (ADDDATE - 720)) | (1L << (ADDTIME - 720)) | (1L << (AES_DECRYPT - 720)) | (1L << (AES_ENCRYPT - 720)) | (1L << (AREA - 720)) | (1L << (ASBINARY - 720)) | (1L << (ASIN - 720)) | (1L << (ASTEXT - 720)) | (1L << (ASWKB - 720)) | (1L << (ASWKT - 720)) | (1L << (ASYMMETRIC_DECRYPT - 720)) | (1L << (ASYMMETRIC_DERIVE - 720)) | (1L << (ASYMMETRIC_ENCRYPT - 720)) | (1L << (ASYMMETRIC_SIGN - 720)) | (1L << (ASYMMETRIC_VERIFY - 720)) | (1L << (ATAN - 720)) | (1L << (ATAN2 - 720)) | (1L << (BENCHMARK - 720)) | (1L << (BIN - 720)) | (1L << (BIT_COUNT - 720)) | (1L << (BIT_LENGTH - 720)) | (1L << (BUFFER - 720)) | (1L << (CATALOG_NAME - 720)) | (1L << (CEIL - 720)) | (1L << (CEILING - 720)) | (1L << (CENTROID - 720)) | (1L << (CHARACTER_LENGTH - 720)) | (1L << (CHARSET - 720)) | (1L << (CHAR_LENGTH - 720)) | (1L << (COERCIBILITY - 720)) | (1L << (COLLATION - 720)) | (1L << (COMPRESS - 720)) | (1L << (CONCAT - 720)) | (1L << (CONCAT_WS - 720)) | (1L << (CONNECTION_ID - 720)) | (1L << (CONV - 720)) | (1L << (CONVERT_TZ - 720)))) != 0) || ((((_la - 784)) & ~0x3f) == 0 && ((1L << (_la - 784)) & ((1L << (COS - 784)) | (1L << (COT - 784)) | (1L << (CRC32 - 784)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 784)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 784)) | (1L << (CREATE_DH_PARAMETERS - 784)) | (1L << (CREATE_DIGEST - 784)) | (1L << (CROSSES - 784)) | (1L << (DATEDIFF - 784)) | (1L << (DATE_FORMAT - 784)) | (1L << (DAYNAME - 784)) | (1L << (DAYOFMONTH - 784)) | (1L << (DAYOFWEEK - 784)) | (1L << (DAYOFYEAR - 784)) | (1L << (DECODE - 784)) | (1L << (DEGREES - 784)) | (1L << (DES_DECRYPT - 784)) | (1L << (DES_ENCRYPT - 784)) | (1L << (DIMENSION - 784)) | (1L << (DISJOINT - 784)) | (1L << (ELT - 784)) | (1L << (ENCODE - 784)) | (1L << (ENCRYPT - 784)) | (1L << (ENDPOINT - 784)) | (1L << (ENVELOPE - 784)) | (1L << (EQUALS - 784)) | (1L << (EXP - 784)) | (1L << (EXPORT_SET - 784)) | (1L << (EXTERIORRING - 784)) | (1L << (EXTRACTVALUE - 784)) | (1L << (FIELD - 784)) | (1L << (FIND_IN_SET - 784)) | (1L << (FLOOR - 784)) | (1L << (FORMAT - 784)) | (1L << (FOUND_ROWS - 784)) | (1L << (FROM_BASE64 - 784)) | (1L << (FROM_DAYS - 784)) | (1L << (FROM_UNIXTIME - 784)) | (1L << (GEOMCOLLFROMTEXT - 784)) | (1L << (GEOMCOLLFROMWKB - 784)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 784)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 784)) | (1L << (GEOMETRYFROMTEXT - 784)) | (1L << (GEOMETRYFROMWKB - 784)) | (1L << (GEOMETRYN - 784)) | (1L << (GEOMETRYTYPE - 784)) | (1L << (GEOMFROMTEXT - 784)) | (1L << (GEOMFROMWKB - 784)) | (1L << (GET_FORMAT - 784)) | (1L << (GET_LOCK - 784)) | (1L << (GLENGTH - 784)) | (1L << (GREATEST - 784)) | (1L << (GTID_SUBSET - 784)) | (1L << (GTID_SUBTRACT - 784)) | (1L << (HEX - 784)) | (1L << (IFNULL - 784)) | (1L << (INET6_ATON - 784)) | (1L << (INET6_NTOA - 784)) | (1L << (INET_ATON - 784)) | (1L << (INET_NTOA - 784)) | (1L << (INSTR - 784)) | (1L << (INTERIORRINGN - 784)) | (1L << (INTERSECTS - 784)) | (1L << (ISCLOSED - 784)))) != 0) || ((((_la - 848)) & ~0x3f) == 0 && ((1L << (_la - 848)) & ((1L << (ISEMPTY - 848)) | (1L << (ISNULL - 848)) | (1L << (ISSIMPLE - 848)) | (1L << (IS_FREE_LOCK - 848)) | (1L << (IS_IPV4 - 848)) | (1L << (IS_IPV4_COMPAT - 848)) | (1L << (IS_IPV4_MAPPED - 848)) | (1L << (IS_IPV6 - 848)) | (1L << (IS_USED_LOCK - 848)) | (1L << (LAST_INSERT_ID - 848)) | (1L << (LCASE - 848)) | (1L << (LEAST - 848)) | (1L << (LENGTH - 848)) | (1L << (LINEFROMTEXT - 848)) | (1L << (LINEFROMWKB - 848)) | (1L << (LINESTRINGFROMTEXT - 848)) | (1L << (LINESTRINGFROMWKB - 848)) | (1L << (LN - 848)) | (1L << (LOAD_FILE - 848)) | (1L << (LOCATE - 848)) | (1L << (LOG - 848)) | (1L << (LOG10 - 848)) | (1L << (LOG2 - 848)) | (1L << (LOWER - 848)) | (1L << (LPAD - 848)) | (1L << (LTRIM - 848)) | (1L << (MAKEDATE - 848)) | (1L << (MAKETIME - 848)) | (1L << (MAKE_SET - 848)) | (1L << (MASTER_POS_WAIT - 848)) | (1L << (MBRCONTAINS - 848)) | (1L << (MBRDISJOINT - 848)) | (1L << (MBREQUAL - 848)) | (1L << (MBRINTERSECTS - 848)) | (1L << (MBROVERLAPS - 848)) | (1L << (MBRTOUCHES - 848)) | (1L << (MBRWITHIN - 848)) | (1L << (MD5 - 848)) | (1L << (MLINEFROMTEXT - 848)) | (1L << (MLINEFROMWKB - 848)) | (1L << (MONTHNAME - 848)) | (1L << (MPOINTFROMTEXT - 848)) | (1L << (MPOINTFROMWKB - 848)) | (1L << (MPOLYFROMTEXT - 848)) | (1L << (MPOLYFROMWKB - 848)) | (1L << (MULTILINESTRINGFROMTEXT - 848)) | (1L << (MULTILINESTRINGFROMWKB - 848)) | (1L << (MULTIPOINTFROMTEXT - 848)) | (1L << (MULTIPOINTFROMWKB - 848)) | (1L << (MULTIPOLYGONFROMTEXT - 848)) | (1L << (MULTIPOLYGONFROMWKB - 848)) | (1L << (NAME_CONST - 848)) | (1L << (NULLIF - 848)) | (1L << (NUMGEOMETRIES - 848)) | (1L << (NUMINTERIORRINGS - 848)) | (1L << (NUMPOINTS - 848)) | (1L << (OCT - 848)) | (1L << (OCTET_LENGTH - 848)) | (1L << (ORD - 848)) | (1L << (OVERLAPS - 848)) | (1L << (PERIOD_ADD - 848)) | (1L << (PERIOD_DIFF - 848)) | (1L << (PI - 848)) | (1L << (POINTFROMTEXT - 848)))) != 0) || ((((_la - 912)) & ~0x3f) == 0 && ((1L << (_la - 912)) & ((1L << (POINTFROMWKB - 912)) | (1L << (POINTN - 912)) | (1L << (POLYFROMTEXT - 912)) | (1L << (POLYFROMWKB - 912)) | (1L << (POLYGONFROMTEXT - 912)) | (1L << (POLYGONFROMWKB - 912)) | (1L << (POW - 912)) | (1L << (POWER - 912)) | (1L << (QUOTE - 912)) | (1L << (RADIANS - 912)) | (1L << (RAND - 912)) | (1L << (RANDOM_BYTES - 912)) | (1L << (RELEASE_LOCK - 912)) | (1L << (REVERSE - 912)) | (1L << (ROUND - 912)) | (1L << (ROW_COUNT - 912)) | (1L << (RPAD - 912)) | (1L << (RTRIM - 912)) | (1L << (SEC_TO_TIME - 912)) | (1L << (SESSION_USER - 912)) | (1L << (SHA - 912)) | (1L << (SHA1 - 912)) | (1L << (SHA2 - 912)) | (1L << (SCHEMA_NAME - 912)) | (1L << (SIGN - 912)) | (1L << (SIN - 912)) | (1L << (SLEEP - 912)) | (1L << (SOUNDEX - 912)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 912)) | (1L << (SQRT - 912)) | (1L << (SRID - 912)) | (1L << (STARTPOINT - 912)) | (1L << (STRCMP - 912)) | (1L << (STR_TO_DATE - 912)) | (1L << (ST_AREA - 912)) | (1L << (ST_ASBINARY - 912)) | (1L << (ST_ASTEXT - 912)) | (1L << (ST_ASWKB - 912)) | (1L << (ST_ASWKT - 912)) | (1L << (ST_BUFFER - 912)) | (1L << (ST_CENTROID - 912)) | (1L << (ST_CONTAINS - 912)) | (1L << (ST_CROSSES - 912)) | (1L << (ST_DIFFERENCE - 912)) | (1L << (ST_DIMENSION - 912)) | (1L << (ST_DISJOINT - 912)) | (1L << (ST_DISTANCE - 912)) | (1L << (ST_ENDPOINT - 912)) | (1L << (ST_ENVELOPE - 912)) | (1L << (ST_EQUALS - 912)) | (1L << (ST_EXTERIORRING - 912)) | (1L << (ST_GEOMCOLLFROMTEXT - 912)) | (1L << (ST_GEOMCOLLFROMTXT - 912)) | (1L << (ST_GEOMCOLLFROMWKB - 912)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 912)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 912)) | (1L << (ST_GEOMETRYFROMTEXT - 912)) | (1L << (ST_GEOMETRYFROMWKB - 912)) | (1L << (ST_GEOMETRYN - 912)) | (1L << (ST_GEOMETRYTYPE - 912)) | (1L << (ST_GEOMFROMTEXT - 912)) | (1L << (ST_GEOMFROMWKB - 912)) | (1L << (ST_INTERIORRINGN - 912)) | (1L << (ST_INTERSECTION - 912)))) != 0) || ((((_la - 976)) & ~0x3f) == 0 && ((1L << (_la - 976)) & ((1L << (ST_INTERSECTS - 976)) | (1L << (ST_ISCLOSED - 976)) | (1L << (ST_ISEMPTY - 976)) | (1L << (ST_ISSIMPLE - 976)) | (1L << (ST_LINEFROMTEXT - 976)) | (1L << (ST_LINEFROMWKB - 976)) | (1L << (ST_LINESTRINGFROMTEXT - 976)) | (1L << (ST_LINESTRINGFROMWKB - 976)) | (1L << (ST_NUMGEOMETRIES - 976)) | (1L << (ST_NUMINTERIORRING - 976)) | (1L << (ST_NUMINTERIORRINGS - 976)) | (1L << (ST_NUMPOINTS - 976)) | (1L << (ST_OVERLAPS - 976)) | (1L << (ST_POINTFROMTEXT - 976)) | (1L << (ST_POINTFROMWKB - 976)) | (1L << (ST_POINTN - 976)) | (1L << (ST_POLYFROMTEXT - 976)) | (1L << (ST_POLYFROMWKB - 976)) | (1L << (ST_POLYGONFROMTEXT - 976)) | (1L << (ST_POLYGONFROMWKB - 976)) | (1L << (ST_SRID - 976)) | (1L << (ST_STARTPOINT - 976)) | (1L << (ST_SYMDIFFERENCE - 976)) | (1L << (ST_TOUCHES - 976)) | (1L << (ST_UNION - 976)) | (1L << (ST_WITHIN - 976)) | (1L << (ST_X - 976)) | (1L << (ST_Y - 976)) | (1L << (SUBDATE - 976)) | (1L << (SUBSTRING_INDEX - 976)) | (1L << (SUBTIME - 976)) | (1L << (SYSTEM_USER - 976)) | (1L << (TAN - 976)) | (1L << (TIMEDIFF - 976)) | (1L << (TIMESTAMPADD - 976)) | (1L << (TIMESTAMPDIFF - 976)) | (1L << (TIME_FORMAT - 976)) | (1L << (TIME_TO_SEC - 976)) | (1L << (TOUCHES - 976)) | (1L << (TO_BASE64 - 976)) | (1L << (TO_DAYS - 976)) | (1L << (TO_SECONDS - 976)) | (1L << (UCASE - 976)) | (1L << (UNCOMPRESS - 976)) | (1L << (UNCOMPRESSED_LENGTH - 976)) | (1L << (UNHEX - 976)) | (1L << (UNIX_TIMESTAMP - 976)) | (1L << (UPDATEXML - 976)) | (1L << (UPPER - 976)) | (1L << (UUID - 976)) | (1L << (UUID_SHORT - 976)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 976)) | (1L << (VERSION - 976)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 976)) | (1L << (WEEKDAY - 976)) | (1L << (WEEKOFYEAR - 976)) | (1L << (WEIGHT_STRING - 976)) | (1L << (WITHIN - 976)) | (1L << (YEARWEEK - 976)) | (1L << (Y_FUNCTION - 976)) | (1L << (X_FUNCTION - 976)))) != 0) || ((((_la - 1053)) & ~0x3f) == 0 && ((1L << (_la - 1053)) & ((1L << (MOD - 1053)) | (1L << (STRING_LITERAL - 1053)) | (1L << (ID - 1053)) | (1L << (REVERSE_QUOTE_ID - 1053)) | (1L << (OPTIONAL - 1053)))) != 0)) {
						{
						setState(189);
						((PrimaryKeyTableConstraintContext)_localctx).name = identifier();
						}
					}

					}
				}

				setState(194);
				match(PRIMARY);
				setState(195);
				match(KEY);
				setState(197);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (GROUP - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (NUMBER - 106)) | (1L << (ORDER - 106)) | (1L << (RIGHT - 106)) | (1L << (SCHEMA - 106)) | (1L << (STACKED - 106)))) != 0) || ((((_la - 200)) & ~0x3f) == 0 && ((1L << (_la - 200)) & ((1L << (DATE - 200)) | (1L << (TIME - 200)) | (1L << (TIMESTAMP - 200)) | (1L << (YEAR - 200)) | (1L << (SERIAL - 200)) | (1L << (JSON_ARRAY - 200)) | (1L << (JSON_OBJECT - 200)) | (1L << (JSON_QUOTE - 200)) | (1L << (JSON_CONTAINS - 200)) | (1L << (JSON_CONTAINS_PATH - 200)) | (1L << (JSON_EXTRACT - 200)) | (1L << (JSON_KEYS - 200)) | (1L << (JSON_OVERLAPS - 200)) | (1L << (JSON_SEARCH - 200)) | (1L << (JSON_VALUE - 200)) | (1L << (JSON_ARRAY_APPEND - 200)) | (1L << (JSON_ARRAY_INSERT - 200)) | (1L << (JSON_INSERT - 200)) | (1L << (JSON_MERGE - 200)) | (1L << (JSON_MERGE_PATCH - 200)) | (1L << (JSON_MERGE_PRESERVE - 200)) | (1L << (JSON_REMOVE - 200)) | (1L << (JSON_REPLACE - 200)) | (1L << (JSON_SET - 200)) | (1L << (JSON_UNQUOTE - 200)) | (1L << (JSON_DEPTH - 200)) | (1L << (JSON_LENGTH - 200)) | (1L << (JSON_TYPE - 200)) | (1L << (JSON_VALID - 200)) | (1L << (JSON_TABLE - 200)) | (1L << (JSON_SCHEMA_VALID - 200)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 200)) | (1L << (JSON_PRETTY - 200)) | (1L << (JSON_STORAGE_FREE - 200)) | (1L << (JSON_STORAGE_SIZE - 200)))) != 0) || ((((_la - 264)) & ~0x3f) == 0 && ((1L << (_la - 264)) & ((1L << (JSON_ARRAYAGG - 264)) | (1L << (JSON_OBJECTAGG - 264)) | (1L << (AVG - 264)) | (1L << (BIT_AND - 264)) | (1L << (BIT_OR - 264)) | (1L << (BIT_XOR - 264)) | (1L << (COUNT - 264)) | (1L << (GROUP_CONCAT - 264)) | (1L << (MAX - 264)) | (1L << (MIN - 264)) | (1L << (STD - 264)) | (1L << (STDDEV - 264)) | (1L << (STDDEV_POP - 264)) | (1L << (STDDEV_SAMP - 264)) | (1L << (SUM - 264)) | (1L << (VAR_POP - 264)) | (1L << (VAR_SAMP - 264)) | (1L << (VARIANCE - 264)) | (1L << (POSITION - 264)) | (1L << (ACCOUNT - 264)) | (1L << (ACTION - 264)) | (1L << (AFTER - 264)) | (1L << (AGGREGATE - 264)) | (1L << (ALGORITHM - 264)) | (1L << (ANY - 264)) | (1L << (AT - 264)) | (1L << (AUTHORS - 264)) | (1L << (AUTOCOMMIT - 264)) | (1L << (AUTOEXTEND_SIZE - 264)) | (1L << (AUTO_INCREMENT - 264)) | (1L << (AVG_ROW_LENGTH - 264)) | (1L << (BEGIN - 264)) | (1L << (BINLOG - 264)) | (1L << (BIT - 264)) | (1L << (BLOCK - 264)) | (1L << (BOOL - 264)) | (1L << (BOOLEAN - 264)) | (1L << (BTREE - 264)) | (1L << (CACHE - 264)) | (1L << (CASCADED - 264)) | (1L << (CHAIN - 264)) | (1L << (CHANGED - 264)) | (1L << (CHANNEL - 264)) | (1L << (CHECKSUM - 264)) | (1L << (PAGE_CHECKSUM - 264)) | (1L << (CIPHER - 264)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (CLASS_ORIGIN - 328)) | (1L << (CLIENT - 328)) | (1L << (CLOSE - 328)) | (1L << (COALESCE - 328)) | (1L << (CODE - 328)) | (1L << (COLUMNS - 328)) | (1L << (COLUMN_FORMAT - 328)) | (1L << (COLUMN_NAME - 328)) | (1L << (COMMENT - 328)) | (1L << (COMMIT - 328)) | (1L << (COMPACT - 328)) | (1L << (COMPLETION - 328)) | (1L << (COMPRESSED - 328)) | (1L << (COMPRESSION - 328)) | (1L << (CONCURRENT - 328)) | (1L << (CONNECT - 328)) | (1L << (CONNECTION - 328)) | (1L << (CONSISTENT - 328)) | (1L << (CONSTRAINT_CATALOG - 328)) | (1L << (CONSTRAINT_SCHEMA - 328)) | (1L << (CONSTRAINT_NAME - 328)) | (1L << (CONTAINS - 328)) | (1L << (CONTEXT - 328)) | (1L << (CONTRIBUTORS - 328)) | (1L << (COPY - 328)) | (1L << (CPU - 328)) | (1L << (CURSOR_NAME - 328)) | (1L << (DATA - 328)) | (1L << (DATAFILE - 328)) | (1L << (DEALLOCATE - 328)) | (1L << (DEFAULT_AUTH - 328)) | (1L << (DEFINER - 328)) | (1L << (DELAY_KEY_WRITE - 328)) | (1L << (DES_KEY_FILE - 328)) | (1L << (DIRECTORY - 328)) | (1L << (DISABLE - 328)) | (1L << (DISCARD - 328)) | (1L << (DISK - 328)) | (1L << (DO - 328)) | (1L << (DUMPFILE - 328)) | (1L << (DUPLICATE - 328)) | (1L << (DYNAMIC - 328)) | (1L << (ENABLE - 328)) | (1L << (ENCRYPTION - 328)) | (1L << (END - 328)) | (1L << (ENDS - 328)) | (1L << (ENGINE - 328)) | (1L << (ENGINES - 328)) | (1L << (ERROR - 328)) | (1L << (ERRORS - 328)) | (1L << (ESCAPE - 328)) | (1L << (EVEN - 328)) | (1L << (EVENT - 328)) | (1L << (EVENTS - 328)) | (1L << (EVERY - 328)) | (1L << (EXCHANGE - 328)) | (1L << (EXCLUSIVE - 328)) | (1L << (EXPIRE - 328)) | (1L << (EXPORT - 328)) | (1L << (EXTENDED - 328)) | (1L << (EXTENT_SIZE - 328)) | (1L << (FAST - 328)) | (1L << (FAULTS - 328)) | (1L << (FIELDS - 328)))) != 0) || ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (FILE_BLOCK_SIZE - 392)) | (1L << (FILTER - 392)) | (1L << (FIRST - 392)) | (1L << (FIXED - 392)) | (1L << (FLUSH - 392)) | (1L << (FOLLOWS - 392)) | (1L << (FOUND - 392)) | (1L << (FULL - 392)) | (1L << (FUNCTION - 392)) | (1L << (GENERAL - 392)) | (1L << (GLOBAL - 392)) | (1L << (GRANTS - 392)) | (1L << (GROUP_REPLICATION - 392)) | (1L << (HANDLER - 392)) | (1L << (HASH - 392)) | (1L << (HELP - 392)) | (1L << (HOST - 392)) | (1L << (HOSTS - 392)) | (1L << (IDENTIFIED - 392)) | (1L << (IGNORE_SERVER_IDS - 392)) | (1L << (IMPORT - 392)) | (1L << (INDEXES - 392)) | (1L << (INITIAL_SIZE - 392)) | (1L << (INPLACE - 392)) | (1L << (INSERT_METHOD - 392)) | (1L << (INSTALL - 392)) | (1L << (INSTANCE - 392)) | (1L << (INVISIBLE - 392)) | (1L << (INVOKER - 392)) | (1L << (IO - 392)) | (1L << (IO_THREAD - 392)) | (1L << (IPC - 392)) | (1L << (ISOLATION - 392)) | (1L << (ISSUER - 392)) | (1L << (JSON - 392)) | (1L << (KEY_BLOCK_SIZE - 392)) | (1L << (LANGUAGE - 392)) | (1L << (LAST - 392)) | (1L << (LEAVES - 392)) | (1L << (LESS - 392)) | (1L << (LEVEL - 392)) | (1L << (LIST - 392)) | (1L << (LOCAL - 392)) | (1L << (LOGFILE - 392)) | (1L << (LOGS - 392)) | (1L << (MASTER - 392)) | (1L << (MASTER_AUTO_POSITION - 392)) | (1L << (MASTER_CONNECT_RETRY - 392)) | (1L << (MASTER_DELAY - 392)) | (1L << (MASTER_HEARTBEAT_PERIOD - 392)) | (1L << (MASTER_HOST - 392)) | (1L << (MASTER_LOG_FILE - 392)) | (1L << (MASTER_LOG_POS - 392)) | (1L << (MASTER_PASSWORD - 392)) | (1L << (MASTER_PORT - 392)) | (1L << (MASTER_RETRY_COUNT - 392)) | (1L << (MASTER_SSL - 392)) | (1L << (MASTER_SSL_CA - 392)) | (1L << (MASTER_SSL_CAPATH - 392)) | (1L << (MASTER_SSL_CERT - 392)) | (1L << (MASTER_SSL_CIPHER - 392)) | (1L << (MASTER_SSL_CRL - 392)) | (1L << (MASTER_SSL_CRLPATH - 392)) | (1L << (MASTER_SSL_KEY - 392)))) != 0) || ((((_la - 456)) & ~0x3f) == 0 && ((1L << (_la - 456)) & ((1L << (MASTER_TLS_VERSION - 456)) | (1L << (MASTER_USER - 456)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 456)) | (1L << (MAX_QUERIES_PER_HOUR - 456)) | (1L << (MAX_ROWS - 456)) | (1L << (MAX_SIZE - 456)) | (1L << (MAX_UPDATES_PER_HOUR - 456)) | (1L << (MAX_USER_CONNECTIONS - 456)) | (1L << (MEDIUM - 456)) | (1L << (MEMBER - 456)) | (1L << (MERGE - 456)) | (1L << (MESSAGE_TEXT - 456)) | (1L << (MID - 456)) | (1L << (MIGRATE - 456)) | (1L << (MIN_ROWS - 456)) | (1L << (MODE - 456)) | (1L << (MODIFY - 456)) | (1L << (MUTEX - 456)) | (1L << (MYSQL - 456)) | (1L << (MYSQL_ERRNO - 456)) | (1L << (NAME - 456)) | (1L << (NAMES - 456)) | (1L << (NCHAR - 456)) | (1L << (NEVER - 456)) | (1L << (NEXT - 456)) | (1L << (NO - 456)) | (1L << (NODEGROUP - 456)) | (1L << (NONE - 456)) | (1L << (ODBC - 456)) | (1L << (OFFLINE - 456)) | (1L << (OFFSET - 456)) | (1L << (OF - 456)) | (1L << (OJ - 456)) | (1L << (OLD_PASSWORD - 456)) | (1L << (ONE - 456)) | (1L << (ONLINE - 456)) | (1L << (ONLY - 456)) | (1L << (OPEN - 456)) | (1L << (OPTIMIZER_COSTS - 456)) | (1L << (OPTIONS - 456)) | (1L << (OWNER - 456)) | (1L << (PACK_KEYS - 456)) | (1L << (PAGE - 456)) | (1L << (PARSER - 456)) | (1L << (PARTIAL - 456)) | (1L << (PARTITIONING - 456)) | (1L << (PARTITIONS - 456)) | (1L << (PASSWORD - 456)) | (1L << (PHASE - 456)) | (1L << (PLUGIN - 456)) | (1L << (PLUGIN_DIR - 456)) | (1L << (PLUGINS - 456)) | (1L << (PORT - 456)) | (1L << (PRECEDES - 456)) | (1L << (PREPARE - 456)) | (1L << (PRESERVE - 456)) | (1L << (PREV - 456)) | (1L << (PROCESSLIST - 456)) | (1L << (PROFILE - 456)) | (1L << (PROFILES - 456)) | (1L << (PROXY - 456)) | (1L << (QUERY - 456)) | (1L << (QUICK - 456)) | (1L << (REBUILD - 456)))) != 0) || ((((_la - 520)) & ~0x3f) == 0 && ((1L << (_la - 520)) & ((1L << (RECOVER - 520)) | (1L << (REDO_BUFFER_SIZE - 520)) | (1L << (REDUNDANT - 520)) | (1L << (RELAY - 520)) | (1L << (RELAY_LOG_FILE - 520)) | (1L << (RELAY_LOG_POS - 520)) | (1L << (RELAYLOG - 520)) | (1L << (REMOVE - 520)) | (1L << (REORGANIZE - 520)) | (1L << (REPAIR - 520)) | (1L << (REPLICATE_DO_DB - 520)) | (1L << (REPLICATE_DO_TABLE - 520)) | (1L << (REPLICATE_IGNORE_DB - 520)) | (1L << (REPLICATE_IGNORE_TABLE - 520)) | (1L << (REPLICATE_REWRITE_DB - 520)) | (1L << (REPLICATE_WILD_DO_TABLE - 520)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 520)) | (1L << (REPLICATION - 520)) | (1L << (RESET - 520)) | (1L << (RESUME - 520)) | (1L << (RETURNED_SQLSTATE - 520)) | (1L << (RETURNS - 520)) | (1L << (ROLE - 520)) | (1L << (ROLLBACK - 520)) | (1L << (ROLLUP - 520)) | (1L << (ROTATE - 520)) | (1L << (ROW - 520)) | (1L << (ROWS - 520)) | (1L << (ROW_FORMAT - 520)) | (1L << (SAVEPOINT - 520)) | (1L << (SCHEDULE - 520)) | (1L << (SECURITY - 520)) | (1L << (SERVER - 520)) | (1L << (SESSION - 520)) | (1L << (SHARE - 520)) | (1L << (SHARED - 520)) | (1L << (SIGNED - 520)) | (1L << (SIMPLE - 520)) | (1L << (SLAVE - 520)) | (1L << (SLOW - 520)) | (1L << (SNAPSHOT - 520)) | (1L << (SOCKET - 520)) | (1L << (SOME - 520)) | (1L << (SONAME - 520)) | (1L << (SOUNDS - 520)) | (1L << (SOURCE - 520)) | (1L << (SQL_AFTER_GTIDS - 520)) | (1L << (SQL_AFTER_MTS_GAPS - 520)) | (1L << (SQL_BEFORE_GTIDS - 520)) | (1L << (SQL_BUFFER_RESULT - 520)) | (1L << (SQL_CACHE - 520)) | (1L << (SQL_NO_CACHE - 520)) | (1L << (SQL_THREAD - 520)) | (1L << (START - 520)) | (1L << (STARTS - 520)) | (1L << (STATS_AUTO_RECALC - 520)) | (1L << (STATS_PERSISTENT - 520)) | (1L << (STATS_SAMPLE_PAGES - 520)) | (1L << (STATUS - 520)) | (1L << (STOP - 520)) | (1L << (STORAGE - 520)) | (1L << (STRING - 520)))) != 0) || ((((_la - 584)) & ~0x3f) == 0 && ((1L << (_la - 584)) & ((1L << (SUBCLASS_ORIGIN - 584)) | (1L << (SUBJECT - 584)) | (1L << (SUBPARTITION - 584)) | (1L << (SUBPARTITIONS - 584)) | (1L << (SUSPEND - 584)) | (1L << (SWAPS - 584)) | (1L << (SWITCHES - 584)) | (1L << (TABLE_NAME - 584)) | (1L << (TABLESPACE - 584)) | (1L << (TEMPORARY - 584)) | (1L << (TEMPTABLE - 584)) | (1L << (THAN - 584)) | (1L << (TRADITIONAL - 584)) | (1L << (TRANSACTION - 584)) | (1L << (TRANSACTIONAL - 584)) | (1L << (TRIGGERS - 584)) | (1L << (TRUNCATE - 584)) | (1L << (UNDEFINED - 584)) | (1L << (UNDOFILE - 584)) | (1L << (UNDO_BUFFER_SIZE - 584)) | (1L << (UNINSTALL - 584)) | (1L << (UNKNOWN - 584)) | (1L << (UNTIL - 584)) | (1L << (UPGRADE - 584)) | (1L << (USER - 584)) | (1L << (USE_FRM - 584)) | (1L << (USER_RESOURCES - 584)) | (1L << (VALIDATION - 584)) | (1L << (VALUE - 584)) | (1L << (VARIABLES - 584)) | (1L << (VIEW - 584)) | (1L << (VISIBLE - 584)) | (1L << (WAIT - 584)) | (1L << (WARNINGS - 584)) | (1L << (WITHOUT - 584)) | (1L << (WORK - 584)) | (1L << (WRAPPER - 584)) | (1L << (X509 - 584)) | (1L << (XA - 584)) | (1L << (XML - 584)) | (1L << (INTERNAL - 584)) | (1L << (QUARTER - 584)) | (1L << (MONTH - 584)) | (1L << (DAY - 584)) | (1L << (HOUR - 584)) | (1L << (MINUTE - 584)) | (1L << (WEEK - 584)) | (1L << (SECOND - 584)) | (1L << (MICROSECOND - 584)))) != 0) || ((((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & ((1L << (AUDIT_ADMIN - 649)) | (1L << (BACKUP_ADMIN - 649)) | (1L << (BINLOG_ADMIN - 649)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 649)) | (1L << (CLONE_ADMIN - 649)) | (1L << (CONNECTION_ADMIN - 649)) | (1L << (ENCRYPTION_KEY_ADMIN - 649)) | (1L << (FIREWALL_ADMIN - 649)) | (1L << (FIREWALL_USER - 649)) | (1L << (GROUP_REPLICATION_ADMIN - 649)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 649)) | (1L << (NDB_STORED_USER - 649)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 649)) | (1L << (REPLICATION_APPLIER - 649)) | (1L << (REPLICATION_SLAVE_ADMIN - 649)) | (1L << (RESOURCE_GROUP_ADMIN - 649)) | (1L << (RESOURCE_GROUP_USER - 649)) | (1L << (ROLE_ADMIN - 649)) | (1L << (SESSION_VARIABLES_ADMIN - 649)) | (1L << (SET_USER_ID - 649)) | (1L << (SHOW_ROUTINE - 649)) | (1L << (SYSTEM_VARIABLES_ADMIN - 649)) | (1L << (TABLE_ENCRYPTION_ADMIN - 649)) | (1L << (VERSION_TOKEN_ADMIN - 649)) | (1L << (XA_RECOVER_ADMIN - 649)))) != 0) || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & ((1L << (ARCHIVE - 720)) | (1L << (BLACKHOLE - 720)) | (1L << (CSV - 720)) | (1L << (FEDERATED - 720)) | (1L << (INNODB - 720)) | (1L << (MEMORY - 720)) | (1L << (MRG_MYISAM - 720)) | (1L << (MYISAM - 720)) | (1L << (NDB - 720)) | (1L << (NDBCLUSTER - 720)) | (1L << (PERFORMANCE_SCHEMA - 720)) | (1L << (TOKUDB - 720)) | (1L << (GEOMETRYCOLLECTION - 720)) | (1L << (LINESTRING - 720)) | (1L << (MULTILINESTRING - 720)) | (1L << (MULTIPOINT - 720)) | (1L << (MULTIPOLYGON - 720)) | (1L << (POINT - 720)) | (1L << (POLYGON - 720)) | (1L << (ABS - 720)) | (1L << (ACOS - 720)) | (1L << (ADDDATE - 720)) | (1L << (ADDTIME - 720)) | (1L << (AES_DECRYPT - 720)) | (1L << (AES_ENCRYPT - 720)) | (1L << (AREA - 720)) | (1L << (ASBINARY - 720)) | (1L << (ASIN - 720)) | (1L << (ASTEXT - 720)) | (1L << (ASWKB - 720)) | (1L << (ASWKT - 720)) | (1L << (ASYMMETRIC_DECRYPT - 720)) | (1L << (ASYMMETRIC_DERIVE - 720)) | (1L << (ASYMMETRIC_ENCRYPT - 720)) | (1L << (ASYMMETRIC_SIGN - 720)) | (1L << (ASYMMETRIC_VERIFY - 720)) | (1L << (ATAN - 720)) | (1L << (ATAN2 - 720)) | (1L << (BENCHMARK - 720)) | (1L << (BIN - 720)) | (1L << (BIT_COUNT - 720)) | (1L << (BIT_LENGTH - 720)) | (1L << (BUFFER - 720)) | (1L << (CATALOG_NAME - 720)) | (1L << (CEIL - 720)) | (1L << (CEILING - 720)) | (1L << (CENTROID - 720)) | (1L << (CHARACTER_LENGTH - 720)) | (1L << (CHARSET - 720)) | (1L << (CHAR_LENGTH - 720)) | (1L << (COERCIBILITY - 720)) | (1L << (COLLATION - 720)) | (1L << (COMPRESS - 720)) | (1L << (CONCAT - 720)) | (1L << (CONCAT_WS - 720)) | (1L << (CONNECTION_ID - 720)) | (1L << (CONV - 720)) | (1L << (CONVERT_TZ - 720)))) != 0) || ((((_la - 784)) & ~0x3f) == 0 && ((1L << (_la - 784)) & ((1L << (COS - 784)) | (1L << (COT - 784)) | (1L << (CRC32 - 784)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 784)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 784)) | (1L << (CREATE_DH_PARAMETERS - 784)) | (1L << (CREATE_DIGEST - 784)) | (1L << (CROSSES - 784)) | (1L << (DATEDIFF - 784)) | (1L << (DATE_FORMAT - 784)) | (1L << (DAYNAME - 784)) | (1L << (DAYOFMONTH - 784)) | (1L << (DAYOFWEEK - 784)) | (1L << (DAYOFYEAR - 784)) | (1L << (DECODE - 784)) | (1L << (DEGREES - 784)) | (1L << (DES_DECRYPT - 784)) | (1L << (DES_ENCRYPT - 784)) | (1L << (DIMENSION - 784)) | (1L << (DISJOINT - 784)) | (1L << (ELT - 784)) | (1L << (ENCODE - 784)) | (1L << (ENCRYPT - 784)) | (1L << (ENDPOINT - 784)) | (1L << (ENVELOPE - 784)) | (1L << (EQUALS - 784)) | (1L << (EXP - 784)) | (1L << (EXPORT_SET - 784)) | (1L << (EXTERIORRING - 784)) | (1L << (EXTRACTVALUE - 784)) | (1L << (FIELD - 784)) | (1L << (FIND_IN_SET - 784)) | (1L << (FLOOR - 784)) | (1L << (FORMAT - 784)) | (1L << (FOUND_ROWS - 784)) | (1L << (FROM_BASE64 - 784)) | (1L << (FROM_DAYS - 784)) | (1L << (FROM_UNIXTIME - 784)) | (1L << (GEOMCOLLFROMTEXT - 784)) | (1L << (GEOMCOLLFROMWKB - 784)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 784)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 784)) | (1L << (GEOMETRYFROMTEXT - 784)) | (1L << (GEOMETRYFROMWKB - 784)) | (1L << (GEOMETRYN - 784)) | (1L << (GEOMETRYTYPE - 784)) | (1L << (GEOMFROMTEXT - 784)) | (1L << (GEOMFROMWKB - 784)) | (1L << (GET_FORMAT - 784)) | (1L << (GET_LOCK - 784)) | (1L << (GLENGTH - 784)) | (1L << (GREATEST - 784)) | (1L << (GTID_SUBSET - 784)) | (1L << (GTID_SUBTRACT - 784)) | (1L << (HEX - 784)) | (1L << (IFNULL - 784)) | (1L << (INET6_ATON - 784)) | (1L << (INET6_NTOA - 784)) | (1L << (INET_ATON - 784)) | (1L << (INET_NTOA - 784)) | (1L << (INSTR - 784)) | (1L << (INTERIORRINGN - 784)) | (1L << (INTERSECTS - 784)) | (1L << (ISCLOSED - 784)))) != 0) || ((((_la - 848)) & ~0x3f) == 0 && ((1L << (_la - 848)) & ((1L << (ISEMPTY - 848)) | (1L << (ISNULL - 848)) | (1L << (ISSIMPLE - 848)) | (1L << (IS_FREE_LOCK - 848)) | (1L << (IS_IPV4 - 848)) | (1L << (IS_IPV4_COMPAT - 848)) | (1L << (IS_IPV4_MAPPED - 848)) | (1L << (IS_IPV6 - 848)) | (1L << (IS_USED_LOCK - 848)) | (1L << (LAST_INSERT_ID - 848)) | (1L << (LCASE - 848)) | (1L << (LEAST - 848)) | (1L << (LENGTH - 848)) | (1L << (LINEFROMTEXT - 848)) | (1L << (LINEFROMWKB - 848)) | (1L << (LINESTRINGFROMTEXT - 848)) | (1L << (LINESTRINGFROMWKB - 848)) | (1L << (LN - 848)) | (1L << (LOAD_FILE - 848)) | (1L << (LOCATE - 848)) | (1L << (LOG - 848)) | (1L << (LOG10 - 848)) | (1L << (LOG2 - 848)) | (1L << (LOWER - 848)) | (1L << (LPAD - 848)) | (1L << (LTRIM - 848)) | (1L << (MAKEDATE - 848)) | (1L << (MAKETIME - 848)) | (1L << (MAKE_SET - 848)) | (1L << (MASTER_POS_WAIT - 848)) | (1L << (MBRCONTAINS - 848)) | (1L << (MBRDISJOINT - 848)) | (1L << (MBREQUAL - 848)) | (1L << (MBRINTERSECTS - 848)) | (1L << (MBROVERLAPS - 848)) | (1L << (MBRTOUCHES - 848)) | (1L << (MBRWITHIN - 848)) | (1L << (MD5 - 848)) | (1L << (MLINEFROMTEXT - 848)) | (1L << (MLINEFROMWKB - 848)) | (1L << (MONTHNAME - 848)) | (1L << (MPOINTFROMTEXT - 848)) | (1L << (MPOINTFROMWKB - 848)) | (1L << (MPOLYFROMTEXT - 848)) | (1L << (MPOLYFROMWKB - 848)) | (1L << (MULTILINESTRINGFROMTEXT - 848)) | (1L << (MULTILINESTRINGFROMWKB - 848)) | (1L << (MULTIPOINTFROMTEXT - 848)) | (1L << (MULTIPOINTFROMWKB - 848)) | (1L << (MULTIPOLYGONFROMTEXT - 848)) | (1L << (MULTIPOLYGONFROMWKB - 848)) | (1L << (NAME_CONST - 848)) | (1L << (NULLIF - 848)) | (1L << (NUMGEOMETRIES - 848)) | (1L << (NUMINTERIORRINGS - 848)) | (1L << (NUMPOINTS - 848)) | (1L << (OCT - 848)) | (1L << (OCTET_LENGTH - 848)) | (1L << (ORD - 848)) | (1L << (OVERLAPS - 848)) | (1L << (PERIOD_ADD - 848)) | (1L << (PERIOD_DIFF - 848)) | (1L << (PI - 848)) | (1L << (POINTFROMTEXT - 848)))) != 0) || ((((_la - 912)) & ~0x3f) == 0 && ((1L << (_la - 912)) & ((1L << (POINTFROMWKB - 912)) | (1L << (POINTN - 912)) | (1L << (POLYFROMTEXT - 912)) | (1L << (POLYFROMWKB - 912)) | (1L << (POLYGONFROMTEXT - 912)) | (1L << (POLYGONFROMWKB - 912)) | (1L << (POW - 912)) | (1L << (POWER - 912)) | (1L << (QUOTE - 912)) | (1L << (RADIANS - 912)) | (1L << (RAND - 912)) | (1L << (RANDOM_BYTES - 912)) | (1L << (RELEASE_LOCK - 912)) | (1L << (REVERSE - 912)) | (1L << (ROUND - 912)) | (1L << (ROW_COUNT - 912)) | (1L << (RPAD - 912)) | (1L << (RTRIM - 912)) | (1L << (SEC_TO_TIME - 912)) | (1L << (SESSION_USER - 912)) | (1L << (SHA - 912)) | (1L << (SHA1 - 912)) | (1L << (SHA2 - 912)) | (1L << (SCHEMA_NAME - 912)) | (1L << (SIGN - 912)) | (1L << (SIN - 912)) | (1L << (SLEEP - 912)) | (1L << (SOUNDEX - 912)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 912)) | (1L << (SQRT - 912)) | (1L << (SRID - 912)) | (1L << (STARTPOINT - 912)) | (1L << (STRCMP - 912)) | (1L << (STR_TO_DATE - 912)) | (1L << (ST_AREA - 912)) | (1L << (ST_ASBINARY - 912)) | (1L << (ST_ASTEXT - 912)) | (1L << (ST_ASWKB - 912)) | (1L << (ST_ASWKT - 912)) | (1L << (ST_BUFFER - 912)) | (1L << (ST_CENTROID - 912)) | (1L << (ST_CONTAINS - 912)) | (1L << (ST_CROSSES - 912)) | (1L << (ST_DIFFERENCE - 912)) | (1L << (ST_DIMENSION - 912)) | (1L << (ST_DISJOINT - 912)) | (1L << (ST_DISTANCE - 912)) | (1L << (ST_ENDPOINT - 912)) | (1L << (ST_ENVELOPE - 912)) | (1L << (ST_EQUALS - 912)) | (1L << (ST_EXTERIORRING - 912)) | (1L << (ST_GEOMCOLLFROMTEXT - 912)) | (1L << (ST_GEOMCOLLFROMTXT - 912)) | (1L << (ST_GEOMCOLLFROMWKB - 912)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 912)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 912)) | (1L << (ST_GEOMETRYFROMTEXT - 912)) | (1L << (ST_GEOMETRYFROMWKB - 912)) | (1L << (ST_GEOMETRYN - 912)) | (1L << (ST_GEOMETRYTYPE - 912)) | (1L << (ST_GEOMFROMTEXT - 912)) | (1L << (ST_GEOMFROMWKB - 912)) | (1L << (ST_INTERIORRINGN - 912)) | (1L << (ST_INTERSECTION - 912)))) != 0) || ((((_la - 976)) & ~0x3f) == 0 && ((1L << (_la - 976)) & ((1L << (ST_INTERSECTS - 976)) | (1L << (ST_ISCLOSED - 976)) | (1L << (ST_ISEMPTY - 976)) | (1L << (ST_ISSIMPLE - 976)) | (1L << (ST_LINEFROMTEXT - 976)) | (1L << (ST_LINEFROMWKB - 976)) | (1L << (ST_LINESTRINGFROMTEXT - 976)) | (1L << (ST_LINESTRINGFROMWKB - 976)) | (1L << (ST_NUMGEOMETRIES - 976)) | (1L << (ST_NUMINTERIORRING - 976)) | (1L << (ST_NUMINTERIORRINGS - 976)) | (1L << (ST_NUMPOINTS - 976)) | (1L << (ST_OVERLAPS - 976)) | (1L << (ST_POINTFROMTEXT - 976)) | (1L << (ST_POINTFROMWKB - 976)) | (1L << (ST_POINTN - 976)) | (1L << (ST_POLYFROMTEXT - 976)) | (1L << (ST_POLYFROMWKB - 976)) | (1L << (ST_POLYGONFROMTEXT - 976)) | (1L << (ST_POLYGONFROMWKB - 976)) | (1L << (ST_SRID - 976)) | (1L << (ST_STARTPOINT - 976)) | (1L << (ST_SYMDIFFERENCE - 976)) | (1L << (ST_TOUCHES - 976)) | (1L << (ST_UNION - 976)) | (1L << (ST_WITHIN - 976)) | (1L << (ST_X - 976)) | (1L << (ST_Y - 976)) | (1L << (SUBDATE - 976)) | (1L << (SUBSTRING_INDEX - 976)) | (1L << (SUBTIME - 976)) | (1L << (SYSTEM_USER - 976)) | (1L << (TAN - 976)) | (1L << (TIMEDIFF - 976)) | (1L << (TIMESTAMPADD - 976)) | (1L << (TIMESTAMPDIFF - 976)) | (1L << (TIME_FORMAT - 976)) | (1L << (TIME_TO_SEC - 976)) | (1L << (TOUCHES - 976)) | (1L << (TO_BASE64 - 976)) | (1L << (TO_DAYS - 976)) | (1L << (TO_SECONDS - 976)) | (1L << (UCASE - 976)) | (1L << (UNCOMPRESS - 976)) | (1L << (UNCOMPRESSED_LENGTH - 976)) | (1L << (UNHEX - 976)) | (1L << (UNIX_TIMESTAMP - 976)) | (1L << (UPDATEXML - 976)) | (1L << (UPPER - 976)) | (1L << (UUID - 976)) | (1L << (UUID_SHORT - 976)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 976)) | (1L << (VERSION - 976)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 976)) | (1L << (WEEKDAY - 976)) | (1L << (WEEKOFYEAR - 976)) | (1L << (WEIGHT_STRING - 976)) | (1L << (WITHIN - 976)) | (1L << (YEARWEEK - 976)) | (1L << (Y_FUNCTION - 976)) | (1L << (X_FUNCTION - 976)))) != 0) || ((((_la - 1053)) & ~0x3f) == 0 && ((1L << (_la - 1053)) & ((1L << (MOD - 1053)) | (1L << (STRING_LITERAL - 1053)) | (1L << (ID - 1053)) | (1L << (REVERSE_QUOTE_ID - 1053)) | (1L << (OPTIONAL - 1053)))) != 0)) {
					{
					setState(196);
					((PrimaryKeyTableConstraintContext)_localctx).index = identifier();
					}
				}

				setState(200);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(199);
					indexType();
					}
				}

				setState(202);
				indexColumnNames();
				setState(206);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE) {
					{
					{
					setState(203);
					indexOption();
					}
					}
					setState(208);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new UniqueKeyTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(213);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(209);
					match(CONSTRAINT);
					setState(211);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (GROUP - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (NUMBER - 106)) | (1L << (ORDER - 106)) | (1L << (RIGHT - 106)) | (1L << (SCHEMA - 106)) | (1L << (STACKED - 106)))) != 0) || ((((_la - 200)) & ~0x3f) == 0 && ((1L << (_la - 200)) & ((1L << (DATE - 200)) | (1L << (TIME - 200)) | (1L << (TIMESTAMP - 200)) | (1L << (YEAR - 200)) | (1L << (SERIAL - 200)) | (1L << (JSON_ARRAY - 200)) | (1L << (JSON_OBJECT - 200)) | (1L << (JSON_QUOTE - 200)) | (1L << (JSON_CONTAINS - 200)) | (1L << (JSON_CONTAINS_PATH - 200)) | (1L << (JSON_EXTRACT - 200)) | (1L << (JSON_KEYS - 200)) | (1L << (JSON_OVERLAPS - 200)) | (1L << (JSON_SEARCH - 200)) | (1L << (JSON_VALUE - 200)) | (1L << (JSON_ARRAY_APPEND - 200)) | (1L << (JSON_ARRAY_INSERT - 200)) | (1L << (JSON_INSERT - 200)) | (1L << (JSON_MERGE - 200)) | (1L << (JSON_MERGE_PATCH - 200)) | (1L << (JSON_MERGE_PRESERVE - 200)) | (1L << (JSON_REMOVE - 200)) | (1L << (JSON_REPLACE - 200)) | (1L << (JSON_SET - 200)) | (1L << (JSON_UNQUOTE - 200)) | (1L << (JSON_DEPTH - 200)) | (1L << (JSON_LENGTH - 200)) | (1L << (JSON_TYPE - 200)) | (1L << (JSON_VALID - 200)) | (1L << (JSON_TABLE - 200)) | (1L << (JSON_SCHEMA_VALID - 200)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 200)) | (1L << (JSON_PRETTY - 200)) | (1L << (JSON_STORAGE_FREE - 200)) | (1L << (JSON_STORAGE_SIZE - 200)))) != 0) || ((((_la - 264)) & ~0x3f) == 0 && ((1L << (_la - 264)) & ((1L << (JSON_ARRAYAGG - 264)) | (1L << (JSON_OBJECTAGG - 264)) | (1L << (AVG - 264)) | (1L << (BIT_AND - 264)) | (1L << (BIT_OR - 264)) | (1L << (BIT_XOR - 264)) | (1L << (COUNT - 264)) | (1L << (GROUP_CONCAT - 264)) | (1L << (MAX - 264)) | (1L << (MIN - 264)) | (1L << (STD - 264)) | (1L << (STDDEV - 264)) | (1L << (STDDEV_POP - 264)) | (1L << (STDDEV_SAMP - 264)) | (1L << (SUM - 264)) | (1L << (VAR_POP - 264)) | (1L << (VAR_SAMP - 264)) | (1L << (VARIANCE - 264)) | (1L << (POSITION - 264)) | (1L << (ACCOUNT - 264)) | (1L << (ACTION - 264)) | (1L << (AFTER - 264)) | (1L << (AGGREGATE - 264)) | (1L << (ALGORITHM - 264)) | (1L << (ANY - 264)) | (1L << (AT - 264)) | (1L << (AUTHORS - 264)) | (1L << (AUTOCOMMIT - 264)) | (1L << (AUTOEXTEND_SIZE - 264)) | (1L << (AUTO_INCREMENT - 264)) | (1L << (AVG_ROW_LENGTH - 264)) | (1L << (BEGIN - 264)) | (1L << (BINLOG - 264)) | (1L << (BIT - 264)) | (1L << (BLOCK - 264)) | (1L << (BOOL - 264)) | (1L << (BOOLEAN - 264)) | (1L << (BTREE - 264)) | (1L << (CACHE - 264)) | (1L << (CASCADED - 264)) | (1L << (CHAIN - 264)) | (1L << (CHANGED - 264)) | (1L << (CHANNEL - 264)) | (1L << (CHECKSUM - 264)) | (1L << (PAGE_CHECKSUM - 264)) | (1L << (CIPHER - 264)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (CLASS_ORIGIN - 328)) | (1L << (CLIENT - 328)) | (1L << (CLOSE - 328)) | (1L << (COALESCE - 328)) | (1L << (CODE - 328)) | (1L << (COLUMNS - 328)) | (1L << (COLUMN_FORMAT - 328)) | (1L << (COLUMN_NAME - 328)) | (1L << (COMMENT - 328)) | (1L << (COMMIT - 328)) | (1L << (COMPACT - 328)) | (1L << (COMPLETION - 328)) | (1L << (COMPRESSED - 328)) | (1L << (COMPRESSION - 328)) | (1L << (CONCURRENT - 328)) | (1L << (CONNECT - 328)) | (1L << (CONNECTION - 328)) | (1L << (CONSISTENT - 328)) | (1L << (CONSTRAINT_CATALOG - 328)) | (1L << (CONSTRAINT_SCHEMA - 328)) | (1L << (CONSTRAINT_NAME - 328)) | (1L << (CONTAINS - 328)) | (1L << (CONTEXT - 328)) | (1L << (CONTRIBUTORS - 328)) | (1L << (COPY - 328)) | (1L << (CPU - 328)) | (1L << (CURSOR_NAME - 328)) | (1L << (DATA - 328)) | (1L << (DATAFILE - 328)) | (1L << (DEALLOCATE - 328)) | (1L << (DEFAULT_AUTH - 328)) | (1L << (DEFINER - 328)) | (1L << (DELAY_KEY_WRITE - 328)) | (1L << (DES_KEY_FILE - 328)) | (1L << (DIRECTORY - 328)) | (1L << (DISABLE - 328)) | (1L << (DISCARD - 328)) | (1L << (DISK - 328)) | (1L << (DO - 328)) | (1L << (DUMPFILE - 328)) | (1L << (DUPLICATE - 328)) | (1L << (DYNAMIC - 328)) | (1L << (ENABLE - 328)) | (1L << (ENCRYPTION - 328)) | (1L << (END - 328)) | (1L << (ENDS - 328)) | (1L << (ENGINE - 328)) | (1L << (ENGINES - 328)) | (1L << (ERROR - 328)) | (1L << (ERRORS - 328)) | (1L << (ESCAPE - 328)) | (1L << (EVEN - 328)) | (1L << (EVENT - 328)) | (1L << (EVENTS - 328)) | (1L << (EVERY - 328)) | (1L << (EXCHANGE - 328)) | (1L << (EXCLUSIVE - 328)) | (1L << (EXPIRE - 328)) | (1L << (EXPORT - 328)) | (1L << (EXTENDED - 328)) | (1L << (EXTENT_SIZE - 328)) | (1L << (FAST - 328)) | (1L << (FAULTS - 328)) | (1L << (FIELDS - 328)))) != 0) || ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (FILE_BLOCK_SIZE - 392)) | (1L << (FILTER - 392)) | (1L << (FIRST - 392)) | (1L << (FIXED - 392)) | (1L << (FLUSH - 392)) | (1L << (FOLLOWS - 392)) | (1L << (FOUND - 392)) | (1L << (FULL - 392)) | (1L << (FUNCTION - 392)) | (1L << (GENERAL - 392)) | (1L << (GLOBAL - 392)) | (1L << (GRANTS - 392)) | (1L << (GROUP_REPLICATION - 392)) | (1L << (HANDLER - 392)) | (1L << (HASH - 392)) | (1L << (HELP - 392)) | (1L << (HOST - 392)) | (1L << (HOSTS - 392)) | (1L << (IDENTIFIED - 392)) | (1L << (IGNORE_SERVER_IDS - 392)) | (1L << (IMPORT - 392)) | (1L << (INDEXES - 392)) | (1L << (INITIAL_SIZE - 392)) | (1L << (INPLACE - 392)) | (1L << (INSERT_METHOD - 392)) | (1L << (INSTALL - 392)) | (1L << (INSTANCE - 392)) | (1L << (INVISIBLE - 392)) | (1L << (INVOKER - 392)) | (1L << (IO - 392)) | (1L << (IO_THREAD - 392)) | (1L << (IPC - 392)) | (1L << (ISOLATION - 392)) | (1L << (ISSUER - 392)) | (1L << (JSON - 392)) | (1L << (KEY_BLOCK_SIZE - 392)) | (1L << (LANGUAGE - 392)) | (1L << (LAST - 392)) | (1L << (LEAVES - 392)) | (1L << (LESS - 392)) | (1L << (LEVEL - 392)) | (1L << (LIST - 392)) | (1L << (LOCAL - 392)) | (1L << (LOGFILE - 392)) | (1L << (LOGS - 392)) | (1L << (MASTER - 392)) | (1L << (MASTER_AUTO_POSITION - 392)) | (1L << (MASTER_CONNECT_RETRY - 392)) | (1L << (MASTER_DELAY - 392)) | (1L << (MASTER_HEARTBEAT_PERIOD - 392)) | (1L << (MASTER_HOST - 392)) | (1L << (MASTER_LOG_FILE - 392)) | (1L << (MASTER_LOG_POS - 392)) | (1L << (MASTER_PASSWORD - 392)) | (1L << (MASTER_PORT - 392)) | (1L << (MASTER_RETRY_COUNT - 392)) | (1L << (MASTER_SSL - 392)) | (1L << (MASTER_SSL_CA - 392)) | (1L << (MASTER_SSL_CAPATH - 392)) | (1L << (MASTER_SSL_CERT - 392)) | (1L << (MASTER_SSL_CIPHER - 392)) | (1L << (MASTER_SSL_CRL - 392)) | (1L << (MASTER_SSL_CRLPATH - 392)) | (1L << (MASTER_SSL_KEY - 392)))) != 0) || ((((_la - 456)) & ~0x3f) == 0 && ((1L << (_la - 456)) & ((1L << (MASTER_TLS_VERSION - 456)) | (1L << (MASTER_USER - 456)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 456)) | (1L << (MAX_QUERIES_PER_HOUR - 456)) | (1L << (MAX_ROWS - 456)) | (1L << (MAX_SIZE - 456)) | (1L << (MAX_UPDATES_PER_HOUR - 456)) | (1L << (MAX_USER_CONNECTIONS - 456)) | (1L << (MEDIUM - 456)) | (1L << (MEMBER - 456)) | (1L << (MERGE - 456)) | (1L << (MESSAGE_TEXT - 456)) | (1L << (MID - 456)) | (1L << (MIGRATE - 456)) | (1L << (MIN_ROWS - 456)) | (1L << (MODE - 456)) | (1L << (MODIFY - 456)) | (1L << (MUTEX - 456)) | (1L << (MYSQL - 456)) | (1L << (MYSQL_ERRNO - 456)) | (1L << (NAME - 456)) | (1L << (NAMES - 456)) | (1L << (NCHAR - 456)) | (1L << (NEVER - 456)) | (1L << (NEXT - 456)) | (1L << (NO - 456)) | (1L << (NODEGROUP - 456)) | (1L << (NONE - 456)) | (1L << (ODBC - 456)) | (1L << (OFFLINE - 456)) | (1L << (OFFSET - 456)) | (1L << (OF - 456)) | (1L << (OJ - 456)) | (1L << (OLD_PASSWORD - 456)) | (1L << (ONE - 456)) | (1L << (ONLINE - 456)) | (1L << (ONLY - 456)) | (1L << (OPEN - 456)) | (1L << (OPTIMIZER_COSTS - 456)) | (1L << (OPTIONS - 456)) | (1L << (OWNER - 456)) | (1L << (PACK_KEYS - 456)) | (1L << (PAGE - 456)) | (1L << (PARSER - 456)) | (1L << (PARTIAL - 456)) | (1L << (PARTITIONING - 456)) | (1L << (PARTITIONS - 456)) | (1L << (PASSWORD - 456)) | (1L << (PHASE - 456)) | (1L << (PLUGIN - 456)) | (1L << (PLUGIN_DIR - 456)) | (1L << (PLUGINS - 456)) | (1L << (PORT - 456)) | (1L << (PRECEDES - 456)) | (1L << (PREPARE - 456)) | (1L << (PRESERVE - 456)) | (1L << (PREV - 456)) | (1L << (PROCESSLIST - 456)) | (1L << (PROFILE - 456)) | (1L << (PROFILES - 456)) | (1L << (PROXY - 456)) | (1L << (QUERY - 456)) | (1L << (QUICK - 456)) | (1L << (REBUILD - 456)))) != 0) || ((((_la - 520)) & ~0x3f) == 0 && ((1L << (_la - 520)) & ((1L << (RECOVER - 520)) | (1L << (REDO_BUFFER_SIZE - 520)) | (1L << (REDUNDANT - 520)) | (1L << (RELAY - 520)) | (1L << (RELAY_LOG_FILE - 520)) | (1L << (RELAY_LOG_POS - 520)) | (1L << (RELAYLOG - 520)) | (1L << (REMOVE - 520)) | (1L << (REORGANIZE - 520)) | (1L << (REPAIR - 520)) | (1L << (REPLICATE_DO_DB - 520)) | (1L << (REPLICATE_DO_TABLE - 520)) | (1L << (REPLICATE_IGNORE_DB - 520)) | (1L << (REPLICATE_IGNORE_TABLE - 520)) | (1L << (REPLICATE_REWRITE_DB - 520)) | (1L << (REPLICATE_WILD_DO_TABLE - 520)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 520)) | (1L << (REPLICATION - 520)) | (1L << (RESET - 520)) | (1L << (RESUME - 520)) | (1L << (RETURNED_SQLSTATE - 520)) | (1L << (RETURNS - 520)) | (1L << (ROLE - 520)) | (1L << (ROLLBACK - 520)) | (1L << (ROLLUP - 520)) | (1L << (ROTATE - 520)) | (1L << (ROW - 520)) | (1L << (ROWS - 520)) | (1L << (ROW_FORMAT - 520)) | (1L << (SAVEPOINT - 520)) | (1L << (SCHEDULE - 520)) | (1L << (SECURITY - 520)) | (1L << (SERVER - 520)) | (1L << (SESSION - 520)) | (1L << (SHARE - 520)) | (1L << (SHARED - 520)) | (1L << (SIGNED - 520)) | (1L << (SIMPLE - 520)) | (1L << (SLAVE - 520)) | (1L << (SLOW - 520)) | (1L << (SNAPSHOT - 520)) | (1L << (SOCKET - 520)) | (1L << (SOME - 520)) | (1L << (SONAME - 520)) | (1L << (SOUNDS - 520)) | (1L << (SOURCE - 520)) | (1L << (SQL_AFTER_GTIDS - 520)) | (1L << (SQL_AFTER_MTS_GAPS - 520)) | (1L << (SQL_BEFORE_GTIDS - 520)) | (1L << (SQL_BUFFER_RESULT - 520)) | (1L << (SQL_CACHE - 520)) | (1L << (SQL_NO_CACHE - 520)) | (1L << (SQL_THREAD - 520)) | (1L << (START - 520)) | (1L << (STARTS - 520)) | (1L << (STATS_AUTO_RECALC - 520)) | (1L << (STATS_PERSISTENT - 520)) | (1L << (STATS_SAMPLE_PAGES - 520)) | (1L << (STATUS - 520)) | (1L << (STOP - 520)) | (1L << (STORAGE - 520)) | (1L << (STRING - 520)))) != 0) || ((((_la - 584)) & ~0x3f) == 0 && ((1L << (_la - 584)) & ((1L << (SUBCLASS_ORIGIN - 584)) | (1L << (SUBJECT - 584)) | (1L << (SUBPARTITION - 584)) | (1L << (SUBPARTITIONS - 584)) | (1L << (SUSPEND - 584)) | (1L << (SWAPS - 584)) | (1L << (SWITCHES - 584)) | (1L << (TABLE_NAME - 584)) | (1L << (TABLESPACE - 584)) | (1L << (TEMPORARY - 584)) | (1L << (TEMPTABLE - 584)) | (1L << (THAN - 584)) | (1L << (TRADITIONAL - 584)) | (1L << (TRANSACTION - 584)) | (1L << (TRANSACTIONAL - 584)) | (1L << (TRIGGERS - 584)) | (1L << (TRUNCATE - 584)) | (1L << (UNDEFINED - 584)) | (1L << (UNDOFILE - 584)) | (1L << (UNDO_BUFFER_SIZE - 584)) | (1L << (UNINSTALL - 584)) | (1L << (UNKNOWN - 584)) | (1L << (UNTIL - 584)) | (1L << (UPGRADE - 584)) | (1L << (USER - 584)) | (1L << (USE_FRM - 584)) | (1L << (USER_RESOURCES - 584)) | (1L << (VALIDATION - 584)) | (1L << (VALUE - 584)) | (1L << (VARIABLES - 584)) | (1L << (VIEW - 584)) | (1L << (VISIBLE - 584)) | (1L << (WAIT - 584)) | (1L << (WARNINGS - 584)) | (1L << (WITHOUT - 584)) | (1L << (WORK - 584)) | (1L << (WRAPPER - 584)) | (1L << (X509 - 584)) | (1L << (XA - 584)) | (1L << (XML - 584)) | (1L << (INTERNAL - 584)) | (1L << (QUARTER - 584)) | (1L << (MONTH - 584)) | (1L << (DAY - 584)) | (1L << (HOUR - 584)) | (1L << (MINUTE - 584)) | (1L << (WEEK - 584)) | (1L << (SECOND - 584)) | (1L << (MICROSECOND - 584)))) != 0) || ((((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & ((1L << (AUDIT_ADMIN - 649)) | (1L << (BACKUP_ADMIN - 649)) | (1L << (BINLOG_ADMIN - 649)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 649)) | (1L << (CLONE_ADMIN - 649)) | (1L << (CONNECTION_ADMIN - 649)) | (1L << (ENCRYPTION_KEY_ADMIN - 649)) | (1L << (FIREWALL_ADMIN - 649)) | (1L << (FIREWALL_USER - 649)) | (1L << (GROUP_REPLICATION_ADMIN - 649)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 649)) | (1L << (NDB_STORED_USER - 649)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 649)) | (1L << (REPLICATION_APPLIER - 649)) | (1L << (REPLICATION_SLAVE_ADMIN - 649)) | (1L << (RESOURCE_GROUP_ADMIN - 649)) | (1L << (RESOURCE_GROUP_USER - 649)) | (1L << (ROLE_ADMIN - 649)) | (1L << (SESSION_VARIABLES_ADMIN - 649)) | (1L << (SET_USER_ID - 649)) | (1L << (SHOW_ROUTINE - 649)) | (1L << (SYSTEM_VARIABLES_ADMIN - 649)) | (1L << (TABLE_ENCRYPTION_ADMIN - 649)) | (1L << (VERSION_TOKEN_ADMIN - 649)) | (1L << (XA_RECOVER_ADMIN - 649)))) != 0) || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & ((1L << (ARCHIVE - 720)) | (1L << (BLACKHOLE - 720)) | (1L << (CSV - 720)) | (1L << (FEDERATED - 720)) | (1L << (INNODB - 720)) | (1L << (MEMORY - 720)) | (1L << (MRG_MYISAM - 720)) | (1L << (MYISAM - 720)) | (1L << (NDB - 720)) | (1L << (NDBCLUSTER - 720)) | (1L << (PERFORMANCE_SCHEMA - 720)) | (1L << (TOKUDB - 720)) | (1L << (GEOMETRYCOLLECTION - 720)) | (1L << (LINESTRING - 720)) | (1L << (MULTILINESTRING - 720)) | (1L << (MULTIPOINT - 720)) | (1L << (MULTIPOLYGON - 720)) | (1L << (POINT - 720)) | (1L << (POLYGON - 720)) | (1L << (ABS - 720)) | (1L << (ACOS - 720)) | (1L << (ADDDATE - 720)) | (1L << (ADDTIME - 720)) | (1L << (AES_DECRYPT - 720)) | (1L << (AES_ENCRYPT - 720)) | (1L << (AREA - 720)) | (1L << (ASBINARY - 720)) | (1L << (ASIN - 720)) | (1L << (ASTEXT - 720)) | (1L << (ASWKB - 720)) | (1L << (ASWKT - 720)) | (1L << (ASYMMETRIC_DECRYPT - 720)) | (1L << (ASYMMETRIC_DERIVE - 720)) | (1L << (ASYMMETRIC_ENCRYPT - 720)) | (1L << (ASYMMETRIC_SIGN - 720)) | (1L << (ASYMMETRIC_VERIFY - 720)) | (1L << (ATAN - 720)) | (1L << (ATAN2 - 720)) | (1L << (BENCHMARK - 720)) | (1L << (BIN - 720)) | (1L << (BIT_COUNT - 720)) | (1L << (BIT_LENGTH - 720)) | (1L << (BUFFER - 720)) | (1L << (CATALOG_NAME - 720)) | (1L << (CEIL - 720)) | (1L << (CEILING - 720)) | (1L << (CENTROID - 720)) | (1L << (CHARACTER_LENGTH - 720)) | (1L << (CHARSET - 720)) | (1L << (CHAR_LENGTH - 720)) | (1L << (COERCIBILITY - 720)) | (1L << (COLLATION - 720)) | (1L << (COMPRESS - 720)) | (1L << (CONCAT - 720)) | (1L << (CONCAT_WS - 720)) | (1L << (CONNECTION_ID - 720)) | (1L << (CONV - 720)) | (1L << (CONVERT_TZ - 720)))) != 0) || ((((_la - 784)) & ~0x3f) == 0 && ((1L << (_la - 784)) & ((1L << (COS - 784)) | (1L << (COT - 784)) | (1L << (CRC32 - 784)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 784)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 784)) | (1L << (CREATE_DH_PARAMETERS - 784)) | (1L << (CREATE_DIGEST - 784)) | (1L << (CROSSES - 784)) | (1L << (DATEDIFF - 784)) | (1L << (DATE_FORMAT - 784)) | (1L << (DAYNAME - 784)) | (1L << (DAYOFMONTH - 784)) | (1L << (DAYOFWEEK - 784)) | (1L << (DAYOFYEAR - 784)) | (1L << (DECODE - 784)) | (1L << (DEGREES - 784)) | (1L << (DES_DECRYPT - 784)) | (1L << (DES_ENCRYPT - 784)) | (1L << (DIMENSION - 784)) | (1L << (DISJOINT - 784)) | (1L << (ELT - 784)) | (1L << (ENCODE - 784)) | (1L << (ENCRYPT - 784)) | (1L << (ENDPOINT - 784)) | (1L << (ENVELOPE - 784)) | (1L << (EQUALS - 784)) | (1L << (EXP - 784)) | (1L << (EXPORT_SET - 784)) | (1L << (EXTERIORRING - 784)) | (1L << (EXTRACTVALUE - 784)) | (1L << (FIELD - 784)) | (1L << (FIND_IN_SET - 784)) | (1L << (FLOOR - 784)) | (1L << (FORMAT - 784)) | (1L << (FOUND_ROWS - 784)) | (1L << (FROM_BASE64 - 784)) | (1L << (FROM_DAYS - 784)) | (1L << (FROM_UNIXTIME - 784)) | (1L << (GEOMCOLLFROMTEXT - 784)) | (1L << (GEOMCOLLFROMWKB - 784)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 784)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 784)) | (1L << (GEOMETRYFROMTEXT - 784)) | (1L << (GEOMETRYFROMWKB - 784)) | (1L << (GEOMETRYN - 784)) | (1L << (GEOMETRYTYPE - 784)) | (1L << (GEOMFROMTEXT - 784)) | (1L << (GEOMFROMWKB - 784)) | (1L << (GET_FORMAT - 784)) | (1L << (GET_LOCK - 784)) | (1L << (GLENGTH - 784)) | (1L << (GREATEST - 784)) | (1L << (GTID_SUBSET - 784)) | (1L << (GTID_SUBTRACT - 784)) | (1L << (HEX - 784)) | (1L << (IFNULL - 784)) | (1L << (INET6_ATON - 784)) | (1L << (INET6_NTOA - 784)) | (1L << (INET_ATON - 784)) | (1L << (INET_NTOA - 784)) | (1L << (INSTR - 784)) | (1L << (INTERIORRINGN - 784)) | (1L << (INTERSECTS - 784)) | (1L << (ISCLOSED - 784)))) != 0) || ((((_la - 848)) & ~0x3f) == 0 && ((1L << (_la - 848)) & ((1L << (ISEMPTY - 848)) | (1L << (ISNULL - 848)) | (1L << (ISSIMPLE - 848)) | (1L << (IS_FREE_LOCK - 848)) | (1L << (IS_IPV4 - 848)) | (1L << (IS_IPV4_COMPAT - 848)) | (1L << (IS_IPV4_MAPPED - 848)) | (1L << (IS_IPV6 - 848)) | (1L << (IS_USED_LOCK - 848)) | (1L << (LAST_INSERT_ID - 848)) | (1L << (LCASE - 848)) | (1L << (LEAST - 848)) | (1L << (LENGTH - 848)) | (1L << (LINEFROMTEXT - 848)) | (1L << (LINEFROMWKB - 848)) | (1L << (LINESTRINGFROMTEXT - 848)) | (1L << (LINESTRINGFROMWKB - 848)) | (1L << (LN - 848)) | (1L << (LOAD_FILE - 848)) | (1L << (LOCATE - 848)) | (1L << (LOG - 848)) | (1L << (LOG10 - 848)) | (1L << (LOG2 - 848)) | (1L << (LOWER - 848)) | (1L << (LPAD - 848)) | (1L << (LTRIM - 848)) | (1L << (MAKEDATE - 848)) | (1L << (MAKETIME - 848)) | (1L << (MAKE_SET - 848)) | (1L << (MASTER_POS_WAIT - 848)) | (1L << (MBRCONTAINS - 848)) | (1L << (MBRDISJOINT - 848)) | (1L << (MBREQUAL - 848)) | (1L << (MBRINTERSECTS - 848)) | (1L << (MBROVERLAPS - 848)) | (1L << (MBRTOUCHES - 848)) | (1L << (MBRWITHIN - 848)) | (1L << (MD5 - 848)) | (1L << (MLINEFROMTEXT - 848)) | (1L << (MLINEFROMWKB - 848)) | (1L << (MONTHNAME - 848)) | (1L << (MPOINTFROMTEXT - 848)) | (1L << (MPOINTFROMWKB - 848)) | (1L << (MPOLYFROMTEXT - 848)) | (1L << (MPOLYFROMWKB - 848)) | (1L << (MULTILINESTRINGFROMTEXT - 848)) | (1L << (MULTILINESTRINGFROMWKB - 848)) | (1L << (MULTIPOINTFROMTEXT - 848)) | (1L << (MULTIPOINTFROMWKB - 848)) | (1L << (MULTIPOLYGONFROMTEXT - 848)) | (1L << (MULTIPOLYGONFROMWKB - 848)) | (1L << (NAME_CONST - 848)) | (1L << (NULLIF - 848)) | (1L << (NUMGEOMETRIES - 848)) | (1L << (NUMINTERIORRINGS - 848)) | (1L << (NUMPOINTS - 848)) | (1L << (OCT - 848)) | (1L << (OCTET_LENGTH - 848)) | (1L << (ORD - 848)) | (1L << (OVERLAPS - 848)) | (1L << (PERIOD_ADD - 848)) | (1L << (PERIOD_DIFF - 848)) | (1L << (PI - 848)) | (1L << (POINTFROMTEXT - 848)))) != 0) || ((((_la - 912)) & ~0x3f) == 0 && ((1L << (_la - 912)) & ((1L << (POINTFROMWKB - 912)) | (1L << (POINTN - 912)) | (1L << (POLYFROMTEXT - 912)) | (1L << (POLYFROMWKB - 912)) | (1L << (POLYGONFROMTEXT - 912)) | (1L << (POLYGONFROMWKB - 912)) | (1L << (POW - 912)) | (1L << (POWER - 912)) | (1L << (QUOTE - 912)) | (1L << (RADIANS - 912)) | (1L << (RAND - 912)) | (1L << (RANDOM_BYTES - 912)) | (1L << (RELEASE_LOCK - 912)) | (1L << (REVERSE - 912)) | (1L << (ROUND - 912)) | (1L << (ROW_COUNT - 912)) | (1L << (RPAD - 912)) | (1L << (RTRIM - 912)) | (1L << (SEC_TO_TIME - 912)) | (1L << (SESSION_USER - 912)) | (1L << (SHA - 912)) | (1L << (SHA1 - 912)) | (1L << (SHA2 - 912)) | (1L << (SCHEMA_NAME - 912)) | (1L << (SIGN - 912)) | (1L << (SIN - 912)) | (1L << (SLEEP - 912)) | (1L << (SOUNDEX - 912)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 912)) | (1L << (SQRT - 912)) | (1L << (SRID - 912)) | (1L << (STARTPOINT - 912)) | (1L << (STRCMP - 912)) | (1L << (STR_TO_DATE - 912)) | (1L << (ST_AREA - 912)) | (1L << (ST_ASBINARY - 912)) | (1L << (ST_ASTEXT - 912)) | (1L << (ST_ASWKB - 912)) | (1L << (ST_ASWKT - 912)) | (1L << (ST_BUFFER - 912)) | (1L << (ST_CENTROID - 912)) | (1L << (ST_CONTAINS - 912)) | (1L << (ST_CROSSES - 912)) | (1L << (ST_DIFFERENCE - 912)) | (1L << (ST_DIMENSION - 912)) | (1L << (ST_DISJOINT - 912)) | (1L << (ST_DISTANCE - 912)) | (1L << (ST_ENDPOINT - 912)) | (1L << (ST_ENVELOPE - 912)) | (1L << (ST_EQUALS - 912)) | (1L << (ST_EXTERIORRING - 912)) | (1L << (ST_GEOMCOLLFROMTEXT - 912)) | (1L << (ST_GEOMCOLLFROMTXT - 912)) | (1L << (ST_GEOMCOLLFROMWKB - 912)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 912)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 912)) | (1L << (ST_GEOMETRYFROMTEXT - 912)) | (1L << (ST_GEOMETRYFROMWKB - 912)) | (1L << (ST_GEOMETRYN - 912)) | (1L << (ST_GEOMETRYTYPE - 912)) | (1L << (ST_GEOMFROMTEXT - 912)) | (1L << (ST_GEOMFROMWKB - 912)) | (1L << (ST_INTERIORRINGN - 912)) | (1L << (ST_INTERSECTION - 912)))) != 0) || ((((_la - 976)) & ~0x3f) == 0 && ((1L << (_la - 976)) & ((1L << (ST_INTERSECTS - 976)) | (1L << (ST_ISCLOSED - 976)) | (1L << (ST_ISEMPTY - 976)) | (1L << (ST_ISSIMPLE - 976)) | (1L << (ST_LINEFROMTEXT - 976)) | (1L << (ST_LINEFROMWKB - 976)) | (1L << (ST_LINESTRINGFROMTEXT - 976)) | (1L << (ST_LINESTRINGFROMWKB - 976)) | (1L << (ST_NUMGEOMETRIES - 976)) | (1L << (ST_NUMINTERIORRING - 976)) | (1L << (ST_NUMINTERIORRINGS - 976)) | (1L << (ST_NUMPOINTS - 976)) | (1L << (ST_OVERLAPS - 976)) | (1L << (ST_POINTFROMTEXT - 976)) | (1L << (ST_POINTFROMWKB - 976)) | (1L << (ST_POINTN - 976)) | (1L << (ST_POLYFROMTEXT - 976)) | (1L << (ST_POLYFROMWKB - 976)) | (1L << (ST_POLYGONFROMTEXT - 976)) | (1L << (ST_POLYGONFROMWKB - 976)) | (1L << (ST_SRID - 976)) | (1L << (ST_STARTPOINT - 976)) | (1L << (ST_SYMDIFFERENCE - 976)) | (1L << (ST_TOUCHES - 976)) | (1L << (ST_UNION - 976)) | (1L << (ST_WITHIN - 976)) | (1L << (ST_X - 976)) | (1L << (ST_Y - 976)) | (1L << (SUBDATE - 976)) | (1L << (SUBSTRING_INDEX - 976)) | (1L << (SUBTIME - 976)) | (1L << (SYSTEM_USER - 976)) | (1L << (TAN - 976)) | (1L << (TIMEDIFF - 976)) | (1L << (TIMESTAMPADD - 976)) | (1L << (TIMESTAMPDIFF - 976)) | (1L << (TIME_FORMAT - 976)) | (1L << (TIME_TO_SEC - 976)) | (1L << (TOUCHES - 976)) | (1L << (TO_BASE64 - 976)) | (1L << (TO_DAYS - 976)) | (1L << (TO_SECONDS - 976)) | (1L << (UCASE - 976)) | (1L << (UNCOMPRESS - 976)) | (1L << (UNCOMPRESSED_LENGTH - 976)) | (1L << (UNHEX - 976)) | (1L << (UNIX_TIMESTAMP - 976)) | (1L << (UPDATEXML - 976)) | (1L << (UPPER - 976)) | (1L << (UUID - 976)) | (1L << (UUID_SHORT - 976)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 976)) | (1L << (VERSION - 976)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 976)) | (1L << (WEEKDAY - 976)) | (1L << (WEEKOFYEAR - 976)) | (1L << (WEIGHT_STRING - 976)) | (1L << (WITHIN - 976)) | (1L << (YEARWEEK - 976)) | (1L << (Y_FUNCTION - 976)) | (1L << (X_FUNCTION - 976)))) != 0) || ((((_la - 1053)) & ~0x3f) == 0 && ((1L << (_la - 1053)) & ((1L << (MOD - 1053)) | (1L << (STRING_LITERAL - 1053)) | (1L << (ID - 1053)) | (1L << (REVERSE_QUOTE_ID - 1053)) | (1L << (OPTIONAL - 1053)))) != 0)) {
						{
						setState(210);
						((UniqueKeyTableConstraintContext)_localctx).name = identifier();
						}
					}

					}
				}

				setState(215);
				match(UNIQUE);
				setState(217);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					setState(216);
					((UniqueKeyTableConstraintContext)_localctx).indexFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((UniqueKeyTableConstraintContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(220);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (GROUP - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (NUMBER - 106)) | (1L << (ORDER - 106)) | (1L << (RIGHT - 106)) | (1L << (SCHEMA - 106)) | (1L << (STACKED - 106)))) != 0) || ((((_la - 200)) & ~0x3f) == 0 && ((1L << (_la - 200)) & ((1L << (DATE - 200)) | (1L << (TIME - 200)) | (1L << (TIMESTAMP - 200)) | (1L << (YEAR - 200)) | (1L << (SERIAL - 200)) | (1L << (JSON_ARRAY - 200)) | (1L << (JSON_OBJECT - 200)) | (1L << (JSON_QUOTE - 200)) | (1L << (JSON_CONTAINS - 200)) | (1L << (JSON_CONTAINS_PATH - 200)) | (1L << (JSON_EXTRACT - 200)) | (1L << (JSON_KEYS - 200)) | (1L << (JSON_OVERLAPS - 200)) | (1L << (JSON_SEARCH - 200)) | (1L << (JSON_VALUE - 200)) | (1L << (JSON_ARRAY_APPEND - 200)) | (1L << (JSON_ARRAY_INSERT - 200)) | (1L << (JSON_INSERT - 200)) | (1L << (JSON_MERGE - 200)) | (1L << (JSON_MERGE_PATCH - 200)) | (1L << (JSON_MERGE_PRESERVE - 200)) | (1L << (JSON_REMOVE - 200)) | (1L << (JSON_REPLACE - 200)) | (1L << (JSON_SET - 200)) | (1L << (JSON_UNQUOTE - 200)) | (1L << (JSON_DEPTH - 200)) | (1L << (JSON_LENGTH - 200)) | (1L << (JSON_TYPE - 200)) | (1L << (JSON_VALID - 200)) | (1L << (JSON_TABLE - 200)) | (1L << (JSON_SCHEMA_VALID - 200)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 200)) | (1L << (JSON_PRETTY - 200)) | (1L << (JSON_STORAGE_FREE - 200)) | (1L << (JSON_STORAGE_SIZE - 200)))) != 0) || ((((_la - 264)) & ~0x3f) == 0 && ((1L << (_la - 264)) & ((1L << (JSON_ARRAYAGG - 264)) | (1L << (JSON_OBJECTAGG - 264)) | (1L << (AVG - 264)) | (1L << (BIT_AND - 264)) | (1L << (BIT_OR - 264)) | (1L << (BIT_XOR - 264)) | (1L << (COUNT - 264)) | (1L << (GROUP_CONCAT - 264)) | (1L << (MAX - 264)) | (1L << (MIN - 264)) | (1L << (STD - 264)) | (1L << (STDDEV - 264)) | (1L << (STDDEV_POP - 264)) | (1L << (STDDEV_SAMP - 264)) | (1L << (SUM - 264)) | (1L << (VAR_POP - 264)) | (1L << (VAR_SAMP - 264)) | (1L << (VARIANCE - 264)) | (1L << (POSITION - 264)) | (1L << (ACCOUNT - 264)) | (1L << (ACTION - 264)) | (1L << (AFTER - 264)) | (1L << (AGGREGATE - 264)) | (1L << (ALGORITHM - 264)) | (1L << (ANY - 264)) | (1L << (AT - 264)) | (1L << (AUTHORS - 264)) | (1L << (AUTOCOMMIT - 264)) | (1L << (AUTOEXTEND_SIZE - 264)) | (1L << (AUTO_INCREMENT - 264)) | (1L << (AVG_ROW_LENGTH - 264)) | (1L << (BEGIN - 264)) | (1L << (BINLOG - 264)) | (1L << (BIT - 264)) | (1L << (BLOCK - 264)) | (1L << (BOOL - 264)) | (1L << (BOOLEAN - 264)) | (1L << (BTREE - 264)) | (1L << (CACHE - 264)) | (1L << (CASCADED - 264)) | (1L << (CHAIN - 264)) | (1L << (CHANGED - 264)) | (1L << (CHANNEL - 264)) | (1L << (CHECKSUM - 264)) | (1L << (PAGE_CHECKSUM - 264)) | (1L << (CIPHER - 264)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (CLASS_ORIGIN - 328)) | (1L << (CLIENT - 328)) | (1L << (CLOSE - 328)) | (1L << (COALESCE - 328)) | (1L << (CODE - 328)) | (1L << (COLUMNS - 328)) | (1L << (COLUMN_FORMAT - 328)) | (1L << (COLUMN_NAME - 328)) | (1L << (COMMENT - 328)) | (1L << (COMMIT - 328)) | (1L << (COMPACT - 328)) | (1L << (COMPLETION - 328)) | (1L << (COMPRESSED - 328)) | (1L << (COMPRESSION - 328)) | (1L << (CONCURRENT - 328)) | (1L << (CONNECT - 328)) | (1L << (CONNECTION - 328)) | (1L << (CONSISTENT - 328)) | (1L << (CONSTRAINT_CATALOG - 328)) | (1L << (CONSTRAINT_SCHEMA - 328)) | (1L << (CONSTRAINT_NAME - 328)) | (1L << (CONTAINS - 328)) | (1L << (CONTEXT - 328)) | (1L << (CONTRIBUTORS - 328)) | (1L << (COPY - 328)) | (1L << (CPU - 328)) | (1L << (CURSOR_NAME - 328)) | (1L << (DATA - 328)) | (1L << (DATAFILE - 328)) | (1L << (DEALLOCATE - 328)) | (1L << (DEFAULT_AUTH - 328)) | (1L << (DEFINER - 328)) | (1L << (DELAY_KEY_WRITE - 328)) | (1L << (DES_KEY_FILE - 328)) | (1L << (DIRECTORY - 328)) | (1L << (DISABLE - 328)) | (1L << (DISCARD - 328)) | (1L << (DISK - 328)) | (1L << (DO - 328)) | (1L << (DUMPFILE - 328)) | (1L << (DUPLICATE - 328)) | (1L << (DYNAMIC - 328)) | (1L << (ENABLE - 328)) | (1L << (ENCRYPTION - 328)) | (1L << (END - 328)) | (1L << (ENDS - 328)) | (1L << (ENGINE - 328)) | (1L << (ENGINES - 328)) | (1L << (ERROR - 328)) | (1L << (ERRORS - 328)) | (1L << (ESCAPE - 328)) | (1L << (EVEN - 328)) | (1L << (EVENT - 328)) | (1L << (EVENTS - 328)) | (1L << (EVERY - 328)) | (1L << (EXCHANGE - 328)) | (1L << (EXCLUSIVE - 328)) | (1L << (EXPIRE - 328)) | (1L << (EXPORT - 328)) | (1L << (EXTENDED - 328)) | (1L << (EXTENT_SIZE - 328)) | (1L << (FAST - 328)) | (1L << (FAULTS - 328)) | (1L << (FIELDS - 328)))) != 0) || ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (FILE_BLOCK_SIZE - 392)) | (1L << (FILTER - 392)) | (1L << (FIRST - 392)) | (1L << (FIXED - 392)) | (1L << (FLUSH - 392)) | (1L << (FOLLOWS - 392)) | (1L << (FOUND - 392)) | (1L << (FULL - 392)) | (1L << (FUNCTION - 392)) | (1L << (GENERAL - 392)) | (1L << (GLOBAL - 392)) | (1L << (GRANTS - 392)) | (1L << (GROUP_REPLICATION - 392)) | (1L << (HANDLER - 392)) | (1L << (HASH - 392)) | (1L << (HELP - 392)) | (1L << (HOST - 392)) | (1L << (HOSTS - 392)) | (1L << (IDENTIFIED - 392)) | (1L << (IGNORE_SERVER_IDS - 392)) | (1L << (IMPORT - 392)) | (1L << (INDEXES - 392)) | (1L << (INITIAL_SIZE - 392)) | (1L << (INPLACE - 392)) | (1L << (INSERT_METHOD - 392)) | (1L << (INSTALL - 392)) | (1L << (INSTANCE - 392)) | (1L << (INVISIBLE - 392)) | (1L << (INVOKER - 392)) | (1L << (IO - 392)) | (1L << (IO_THREAD - 392)) | (1L << (IPC - 392)) | (1L << (ISOLATION - 392)) | (1L << (ISSUER - 392)) | (1L << (JSON - 392)) | (1L << (KEY_BLOCK_SIZE - 392)) | (1L << (LANGUAGE - 392)) | (1L << (LAST - 392)) | (1L << (LEAVES - 392)) | (1L << (LESS - 392)) | (1L << (LEVEL - 392)) | (1L << (LIST - 392)) | (1L << (LOCAL - 392)) | (1L << (LOGFILE - 392)) | (1L << (LOGS - 392)) | (1L << (MASTER - 392)) | (1L << (MASTER_AUTO_POSITION - 392)) | (1L << (MASTER_CONNECT_RETRY - 392)) | (1L << (MASTER_DELAY - 392)) | (1L << (MASTER_HEARTBEAT_PERIOD - 392)) | (1L << (MASTER_HOST - 392)) | (1L << (MASTER_LOG_FILE - 392)) | (1L << (MASTER_LOG_POS - 392)) | (1L << (MASTER_PASSWORD - 392)) | (1L << (MASTER_PORT - 392)) | (1L << (MASTER_RETRY_COUNT - 392)) | (1L << (MASTER_SSL - 392)) | (1L << (MASTER_SSL_CA - 392)) | (1L << (MASTER_SSL_CAPATH - 392)) | (1L << (MASTER_SSL_CERT - 392)) | (1L << (MASTER_SSL_CIPHER - 392)) | (1L << (MASTER_SSL_CRL - 392)) | (1L << (MASTER_SSL_CRLPATH - 392)) | (1L << (MASTER_SSL_KEY - 392)))) != 0) || ((((_la - 456)) & ~0x3f) == 0 && ((1L << (_la - 456)) & ((1L << (MASTER_TLS_VERSION - 456)) | (1L << (MASTER_USER - 456)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 456)) | (1L << (MAX_QUERIES_PER_HOUR - 456)) | (1L << (MAX_ROWS - 456)) | (1L << (MAX_SIZE - 456)) | (1L << (MAX_UPDATES_PER_HOUR - 456)) | (1L << (MAX_USER_CONNECTIONS - 456)) | (1L << (MEDIUM - 456)) | (1L << (MEMBER - 456)) | (1L << (MERGE - 456)) | (1L << (MESSAGE_TEXT - 456)) | (1L << (MID - 456)) | (1L << (MIGRATE - 456)) | (1L << (MIN_ROWS - 456)) | (1L << (MODE - 456)) | (1L << (MODIFY - 456)) | (1L << (MUTEX - 456)) | (1L << (MYSQL - 456)) | (1L << (MYSQL_ERRNO - 456)) | (1L << (NAME - 456)) | (1L << (NAMES - 456)) | (1L << (NCHAR - 456)) | (1L << (NEVER - 456)) | (1L << (NEXT - 456)) | (1L << (NO - 456)) | (1L << (NODEGROUP - 456)) | (1L << (NONE - 456)) | (1L << (ODBC - 456)) | (1L << (OFFLINE - 456)) | (1L << (OFFSET - 456)) | (1L << (OF - 456)) | (1L << (OJ - 456)) | (1L << (OLD_PASSWORD - 456)) | (1L << (ONE - 456)) | (1L << (ONLINE - 456)) | (1L << (ONLY - 456)) | (1L << (OPEN - 456)) | (1L << (OPTIMIZER_COSTS - 456)) | (1L << (OPTIONS - 456)) | (1L << (OWNER - 456)) | (1L << (PACK_KEYS - 456)) | (1L << (PAGE - 456)) | (1L << (PARSER - 456)) | (1L << (PARTIAL - 456)) | (1L << (PARTITIONING - 456)) | (1L << (PARTITIONS - 456)) | (1L << (PASSWORD - 456)) | (1L << (PHASE - 456)) | (1L << (PLUGIN - 456)) | (1L << (PLUGIN_DIR - 456)) | (1L << (PLUGINS - 456)) | (1L << (PORT - 456)) | (1L << (PRECEDES - 456)) | (1L << (PREPARE - 456)) | (1L << (PRESERVE - 456)) | (1L << (PREV - 456)) | (1L << (PROCESSLIST - 456)) | (1L << (PROFILE - 456)) | (1L << (PROFILES - 456)) | (1L << (PROXY - 456)) | (1L << (QUERY - 456)) | (1L << (QUICK - 456)) | (1L << (REBUILD - 456)))) != 0) || ((((_la - 520)) & ~0x3f) == 0 && ((1L << (_la - 520)) & ((1L << (RECOVER - 520)) | (1L << (REDO_BUFFER_SIZE - 520)) | (1L << (REDUNDANT - 520)) | (1L << (RELAY - 520)) | (1L << (RELAY_LOG_FILE - 520)) | (1L << (RELAY_LOG_POS - 520)) | (1L << (RELAYLOG - 520)) | (1L << (REMOVE - 520)) | (1L << (REORGANIZE - 520)) | (1L << (REPAIR - 520)) | (1L << (REPLICATE_DO_DB - 520)) | (1L << (REPLICATE_DO_TABLE - 520)) | (1L << (REPLICATE_IGNORE_DB - 520)) | (1L << (REPLICATE_IGNORE_TABLE - 520)) | (1L << (REPLICATE_REWRITE_DB - 520)) | (1L << (REPLICATE_WILD_DO_TABLE - 520)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 520)) | (1L << (REPLICATION - 520)) | (1L << (RESET - 520)) | (1L << (RESUME - 520)) | (1L << (RETURNED_SQLSTATE - 520)) | (1L << (RETURNS - 520)) | (1L << (ROLE - 520)) | (1L << (ROLLBACK - 520)) | (1L << (ROLLUP - 520)) | (1L << (ROTATE - 520)) | (1L << (ROW - 520)) | (1L << (ROWS - 520)) | (1L << (ROW_FORMAT - 520)) | (1L << (SAVEPOINT - 520)) | (1L << (SCHEDULE - 520)) | (1L << (SECURITY - 520)) | (1L << (SERVER - 520)) | (1L << (SESSION - 520)) | (1L << (SHARE - 520)) | (1L << (SHARED - 520)) | (1L << (SIGNED - 520)) | (1L << (SIMPLE - 520)) | (1L << (SLAVE - 520)) | (1L << (SLOW - 520)) | (1L << (SNAPSHOT - 520)) | (1L << (SOCKET - 520)) | (1L << (SOME - 520)) | (1L << (SONAME - 520)) | (1L << (SOUNDS - 520)) | (1L << (SOURCE - 520)) | (1L << (SQL_AFTER_GTIDS - 520)) | (1L << (SQL_AFTER_MTS_GAPS - 520)) | (1L << (SQL_BEFORE_GTIDS - 520)) | (1L << (SQL_BUFFER_RESULT - 520)) | (1L << (SQL_CACHE - 520)) | (1L << (SQL_NO_CACHE - 520)) | (1L << (SQL_THREAD - 520)) | (1L << (START - 520)) | (1L << (STARTS - 520)) | (1L << (STATS_AUTO_RECALC - 520)) | (1L << (STATS_PERSISTENT - 520)) | (1L << (STATS_SAMPLE_PAGES - 520)) | (1L << (STATUS - 520)) | (1L << (STOP - 520)) | (1L << (STORAGE - 520)) | (1L << (STRING - 520)))) != 0) || ((((_la - 584)) & ~0x3f) == 0 && ((1L << (_la - 584)) & ((1L << (SUBCLASS_ORIGIN - 584)) | (1L << (SUBJECT - 584)) | (1L << (SUBPARTITION - 584)) | (1L << (SUBPARTITIONS - 584)) | (1L << (SUSPEND - 584)) | (1L << (SWAPS - 584)) | (1L << (SWITCHES - 584)) | (1L << (TABLE_NAME - 584)) | (1L << (TABLESPACE - 584)) | (1L << (TEMPORARY - 584)) | (1L << (TEMPTABLE - 584)) | (1L << (THAN - 584)) | (1L << (TRADITIONAL - 584)) | (1L << (TRANSACTION - 584)) | (1L << (TRANSACTIONAL - 584)) | (1L << (TRIGGERS - 584)) | (1L << (TRUNCATE - 584)) | (1L << (UNDEFINED - 584)) | (1L << (UNDOFILE - 584)) | (1L << (UNDO_BUFFER_SIZE - 584)) | (1L << (UNINSTALL - 584)) | (1L << (UNKNOWN - 584)) | (1L << (UNTIL - 584)) | (1L << (UPGRADE - 584)) | (1L << (USER - 584)) | (1L << (USE_FRM - 584)) | (1L << (USER_RESOURCES - 584)) | (1L << (VALIDATION - 584)) | (1L << (VALUE - 584)) | (1L << (VARIABLES - 584)) | (1L << (VIEW - 584)) | (1L << (VISIBLE - 584)) | (1L << (WAIT - 584)) | (1L << (WARNINGS - 584)) | (1L << (WITHOUT - 584)) | (1L << (WORK - 584)) | (1L << (WRAPPER - 584)) | (1L << (X509 - 584)) | (1L << (XA - 584)) | (1L << (XML - 584)) | (1L << (INTERNAL - 584)) | (1L << (QUARTER - 584)) | (1L << (MONTH - 584)) | (1L << (DAY - 584)) | (1L << (HOUR - 584)) | (1L << (MINUTE - 584)) | (1L << (WEEK - 584)) | (1L << (SECOND - 584)) | (1L << (MICROSECOND - 584)))) != 0) || ((((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & ((1L << (AUDIT_ADMIN - 649)) | (1L << (BACKUP_ADMIN - 649)) | (1L << (BINLOG_ADMIN - 649)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 649)) | (1L << (CLONE_ADMIN - 649)) | (1L << (CONNECTION_ADMIN - 649)) | (1L << (ENCRYPTION_KEY_ADMIN - 649)) | (1L << (FIREWALL_ADMIN - 649)) | (1L << (FIREWALL_USER - 649)) | (1L << (GROUP_REPLICATION_ADMIN - 649)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 649)) | (1L << (NDB_STORED_USER - 649)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 649)) | (1L << (REPLICATION_APPLIER - 649)) | (1L << (REPLICATION_SLAVE_ADMIN - 649)) | (1L << (RESOURCE_GROUP_ADMIN - 649)) | (1L << (RESOURCE_GROUP_USER - 649)) | (1L << (ROLE_ADMIN - 649)) | (1L << (SESSION_VARIABLES_ADMIN - 649)) | (1L << (SET_USER_ID - 649)) | (1L << (SHOW_ROUTINE - 649)) | (1L << (SYSTEM_VARIABLES_ADMIN - 649)) | (1L << (TABLE_ENCRYPTION_ADMIN - 649)) | (1L << (VERSION_TOKEN_ADMIN - 649)) | (1L << (XA_RECOVER_ADMIN - 649)))) != 0) || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & ((1L << (ARCHIVE - 720)) | (1L << (BLACKHOLE - 720)) | (1L << (CSV - 720)) | (1L << (FEDERATED - 720)) | (1L << (INNODB - 720)) | (1L << (MEMORY - 720)) | (1L << (MRG_MYISAM - 720)) | (1L << (MYISAM - 720)) | (1L << (NDB - 720)) | (1L << (NDBCLUSTER - 720)) | (1L << (PERFORMANCE_SCHEMA - 720)) | (1L << (TOKUDB - 720)) | (1L << (GEOMETRYCOLLECTION - 720)) | (1L << (LINESTRING - 720)) | (1L << (MULTILINESTRING - 720)) | (1L << (MULTIPOINT - 720)) | (1L << (MULTIPOLYGON - 720)) | (1L << (POINT - 720)) | (1L << (POLYGON - 720)) | (1L << (ABS - 720)) | (1L << (ACOS - 720)) | (1L << (ADDDATE - 720)) | (1L << (ADDTIME - 720)) | (1L << (AES_DECRYPT - 720)) | (1L << (AES_ENCRYPT - 720)) | (1L << (AREA - 720)) | (1L << (ASBINARY - 720)) | (1L << (ASIN - 720)) | (1L << (ASTEXT - 720)) | (1L << (ASWKB - 720)) | (1L << (ASWKT - 720)) | (1L << (ASYMMETRIC_DECRYPT - 720)) | (1L << (ASYMMETRIC_DERIVE - 720)) | (1L << (ASYMMETRIC_ENCRYPT - 720)) | (1L << (ASYMMETRIC_SIGN - 720)) | (1L << (ASYMMETRIC_VERIFY - 720)) | (1L << (ATAN - 720)) | (1L << (ATAN2 - 720)) | (1L << (BENCHMARK - 720)) | (1L << (BIN - 720)) | (1L << (BIT_COUNT - 720)) | (1L << (BIT_LENGTH - 720)) | (1L << (BUFFER - 720)) | (1L << (CATALOG_NAME - 720)) | (1L << (CEIL - 720)) | (1L << (CEILING - 720)) | (1L << (CENTROID - 720)) | (1L << (CHARACTER_LENGTH - 720)) | (1L << (CHARSET - 720)) | (1L << (CHAR_LENGTH - 720)) | (1L << (COERCIBILITY - 720)) | (1L << (COLLATION - 720)) | (1L << (COMPRESS - 720)) | (1L << (CONCAT - 720)) | (1L << (CONCAT_WS - 720)) | (1L << (CONNECTION_ID - 720)) | (1L << (CONV - 720)) | (1L << (CONVERT_TZ - 720)))) != 0) || ((((_la - 784)) & ~0x3f) == 0 && ((1L << (_la - 784)) & ((1L << (COS - 784)) | (1L << (COT - 784)) | (1L << (CRC32 - 784)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 784)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 784)) | (1L << (CREATE_DH_PARAMETERS - 784)) | (1L << (CREATE_DIGEST - 784)) | (1L << (CROSSES - 784)) | (1L << (DATEDIFF - 784)) | (1L << (DATE_FORMAT - 784)) | (1L << (DAYNAME - 784)) | (1L << (DAYOFMONTH - 784)) | (1L << (DAYOFWEEK - 784)) | (1L << (DAYOFYEAR - 784)) | (1L << (DECODE - 784)) | (1L << (DEGREES - 784)) | (1L << (DES_DECRYPT - 784)) | (1L << (DES_ENCRYPT - 784)) | (1L << (DIMENSION - 784)) | (1L << (DISJOINT - 784)) | (1L << (ELT - 784)) | (1L << (ENCODE - 784)) | (1L << (ENCRYPT - 784)) | (1L << (ENDPOINT - 784)) | (1L << (ENVELOPE - 784)) | (1L << (EQUALS - 784)) | (1L << (EXP - 784)) | (1L << (EXPORT_SET - 784)) | (1L << (EXTERIORRING - 784)) | (1L << (EXTRACTVALUE - 784)) | (1L << (FIELD - 784)) | (1L << (FIND_IN_SET - 784)) | (1L << (FLOOR - 784)) | (1L << (FORMAT - 784)) | (1L << (FOUND_ROWS - 784)) | (1L << (FROM_BASE64 - 784)) | (1L << (FROM_DAYS - 784)) | (1L << (FROM_UNIXTIME - 784)) | (1L << (GEOMCOLLFROMTEXT - 784)) | (1L << (GEOMCOLLFROMWKB - 784)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 784)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 784)) | (1L << (GEOMETRYFROMTEXT - 784)) | (1L << (GEOMETRYFROMWKB - 784)) | (1L << (GEOMETRYN - 784)) | (1L << (GEOMETRYTYPE - 784)) | (1L << (GEOMFROMTEXT - 784)) | (1L << (GEOMFROMWKB - 784)) | (1L << (GET_FORMAT - 784)) | (1L << (GET_LOCK - 784)) | (1L << (GLENGTH - 784)) | (1L << (GREATEST - 784)) | (1L << (GTID_SUBSET - 784)) | (1L << (GTID_SUBTRACT - 784)) | (1L << (HEX - 784)) | (1L << (IFNULL - 784)) | (1L << (INET6_ATON - 784)) | (1L << (INET6_NTOA - 784)) | (1L << (INET_ATON - 784)) | (1L << (INET_NTOA - 784)) | (1L << (INSTR - 784)) | (1L << (INTERIORRINGN - 784)) | (1L << (INTERSECTS - 784)) | (1L << (ISCLOSED - 784)))) != 0) || ((((_la - 848)) & ~0x3f) == 0 && ((1L << (_la - 848)) & ((1L << (ISEMPTY - 848)) | (1L << (ISNULL - 848)) | (1L << (ISSIMPLE - 848)) | (1L << (IS_FREE_LOCK - 848)) | (1L << (IS_IPV4 - 848)) | (1L << (IS_IPV4_COMPAT - 848)) | (1L << (IS_IPV4_MAPPED - 848)) | (1L << (IS_IPV6 - 848)) | (1L << (IS_USED_LOCK - 848)) | (1L << (LAST_INSERT_ID - 848)) | (1L << (LCASE - 848)) | (1L << (LEAST - 848)) | (1L << (LENGTH - 848)) | (1L << (LINEFROMTEXT - 848)) | (1L << (LINEFROMWKB - 848)) | (1L << (LINESTRINGFROMTEXT - 848)) | (1L << (LINESTRINGFROMWKB - 848)) | (1L << (LN - 848)) | (1L << (LOAD_FILE - 848)) | (1L << (LOCATE - 848)) | (1L << (LOG - 848)) | (1L << (LOG10 - 848)) | (1L << (LOG2 - 848)) | (1L << (LOWER - 848)) | (1L << (LPAD - 848)) | (1L << (LTRIM - 848)) | (1L << (MAKEDATE - 848)) | (1L << (MAKETIME - 848)) | (1L << (MAKE_SET - 848)) | (1L << (MASTER_POS_WAIT - 848)) | (1L << (MBRCONTAINS - 848)) | (1L << (MBRDISJOINT - 848)) | (1L << (MBREQUAL - 848)) | (1L << (MBRINTERSECTS - 848)) | (1L << (MBROVERLAPS - 848)) | (1L << (MBRTOUCHES - 848)) | (1L << (MBRWITHIN - 848)) | (1L << (MD5 - 848)) | (1L << (MLINEFROMTEXT - 848)) | (1L << (MLINEFROMWKB - 848)) | (1L << (MONTHNAME - 848)) | (1L << (MPOINTFROMTEXT - 848)) | (1L << (MPOINTFROMWKB - 848)) | (1L << (MPOLYFROMTEXT - 848)) | (1L << (MPOLYFROMWKB - 848)) | (1L << (MULTILINESTRINGFROMTEXT - 848)) | (1L << (MULTILINESTRINGFROMWKB - 848)) | (1L << (MULTIPOINTFROMTEXT - 848)) | (1L << (MULTIPOINTFROMWKB - 848)) | (1L << (MULTIPOLYGONFROMTEXT - 848)) | (1L << (MULTIPOLYGONFROMWKB - 848)) | (1L << (NAME_CONST - 848)) | (1L << (NULLIF - 848)) | (1L << (NUMGEOMETRIES - 848)) | (1L << (NUMINTERIORRINGS - 848)) | (1L << (NUMPOINTS - 848)) | (1L << (OCT - 848)) | (1L << (OCTET_LENGTH - 848)) | (1L << (ORD - 848)) | (1L << (OVERLAPS - 848)) | (1L << (PERIOD_ADD - 848)) | (1L << (PERIOD_DIFF - 848)) | (1L << (PI - 848)) | (1L << (POINTFROMTEXT - 848)))) != 0) || ((((_la - 912)) & ~0x3f) == 0 && ((1L << (_la - 912)) & ((1L << (POINTFROMWKB - 912)) | (1L << (POINTN - 912)) | (1L << (POLYFROMTEXT - 912)) | (1L << (POLYFROMWKB - 912)) | (1L << (POLYGONFROMTEXT - 912)) | (1L << (POLYGONFROMWKB - 912)) | (1L << (POW - 912)) | (1L << (POWER - 912)) | (1L << (QUOTE - 912)) | (1L << (RADIANS - 912)) | (1L << (RAND - 912)) | (1L << (RANDOM_BYTES - 912)) | (1L << (RELEASE_LOCK - 912)) | (1L << (REVERSE - 912)) | (1L << (ROUND - 912)) | (1L << (ROW_COUNT - 912)) | (1L << (RPAD - 912)) | (1L << (RTRIM - 912)) | (1L << (SEC_TO_TIME - 912)) | (1L << (SESSION_USER - 912)) | (1L << (SHA - 912)) | (1L << (SHA1 - 912)) | (1L << (SHA2 - 912)) | (1L << (SCHEMA_NAME - 912)) | (1L << (SIGN - 912)) | (1L << (SIN - 912)) | (1L << (SLEEP - 912)) | (1L << (SOUNDEX - 912)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 912)) | (1L << (SQRT - 912)) | (1L << (SRID - 912)) | (1L << (STARTPOINT - 912)) | (1L << (STRCMP - 912)) | (1L << (STR_TO_DATE - 912)) | (1L << (ST_AREA - 912)) | (1L << (ST_ASBINARY - 912)) | (1L << (ST_ASTEXT - 912)) | (1L << (ST_ASWKB - 912)) | (1L << (ST_ASWKT - 912)) | (1L << (ST_BUFFER - 912)) | (1L << (ST_CENTROID - 912)) | (1L << (ST_CONTAINS - 912)) | (1L << (ST_CROSSES - 912)) | (1L << (ST_DIFFERENCE - 912)) | (1L << (ST_DIMENSION - 912)) | (1L << (ST_DISJOINT - 912)) | (1L << (ST_DISTANCE - 912)) | (1L << (ST_ENDPOINT - 912)) | (1L << (ST_ENVELOPE - 912)) | (1L << (ST_EQUALS - 912)) | (1L << (ST_EXTERIORRING - 912)) | (1L << (ST_GEOMCOLLFROMTEXT - 912)) | (1L << (ST_GEOMCOLLFROMTXT - 912)) | (1L << (ST_GEOMCOLLFROMWKB - 912)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 912)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 912)) | (1L << (ST_GEOMETRYFROMTEXT - 912)) | (1L << (ST_GEOMETRYFROMWKB - 912)) | (1L << (ST_GEOMETRYN - 912)) | (1L << (ST_GEOMETRYTYPE - 912)) | (1L << (ST_GEOMFROMTEXT - 912)) | (1L << (ST_GEOMFROMWKB - 912)) | (1L << (ST_INTERIORRINGN - 912)) | (1L << (ST_INTERSECTION - 912)))) != 0) || ((((_la - 976)) & ~0x3f) == 0 && ((1L << (_la - 976)) & ((1L << (ST_INTERSECTS - 976)) | (1L << (ST_ISCLOSED - 976)) | (1L << (ST_ISEMPTY - 976)) | (1L << (ST_ISSIMPLE - 976)) | (1L << (ST_LINEFROMTEXT - 976)) | (1L << (ST_LINEFROMWKB - 976)) | (1L << (ST_LINESTRINGFROMTEXT - 976)) | (1L << (ST_LINESTRINGFROMWKB - 976)) | (1L << (ST_NUMGEOMETRIES - 976)) | (1L << (ST_NUMINTERIORRING - 976)) | (1L << (ST_NUMINTERIORRINGS - 976)) | (1L << (ST_NUMPOINTS - 976)) | (1L << (ST_OVERLAPS - 976)) | (1L << (ST_POINTFROMTEXT - 976)) | (1L << (ST_POINTFROMWKB - 976)) | (1L << (ST_POINTN - 976)) | (1L << (ST_POLYFROMTEXT - 976)) | (1L << (ST_POLYFROMWKB - 976)) | (1L << (ST_POLYGONFROMTEXT - 976)) | (1L << (ST_POLYGONFROMWKB - 976)) | (1L << (ST_SRID - 976)) | (1L << (ST_STARTPOINT - 976)) | (1L << (ST_SYMDIFFERENCE - 976)) | (1L << (ST_TOUCHES - 976)) | (1L << (ST_UNION - 976)) | (1L << (ST_WITHIN - 976)) | (1L << (ST_X - 976)) | (1L << (ST_Y - 976)) | (1L << (SUBDATE - 976)) | (1L << (SUBSTRING_INDEX - 976)) | (1L << (SUBTIME - 976)) | (1L << (SYSTEM_USER - 976)) | (1L << (TAN - 976)) | (1L << (TIMEDIFF - 976)) | (1L << (TIMESTAMPADD - 976)) | (1L << (TIMESTAMPDIFF - 976)) | (1L << (TIME_FORMAT - 976)) | (1L << (TIME_TO_SEC - 976)) | (1L << (TOUCHES - 976)) | (1L << (TO_BASE64 - 976)) | (1L << (TO_DAYS - 976)) | (1L << (TO_SECONDS - 976)) | (1L << (UCASE - 976)) | (1L << (UNCOMPRESS - 976)) | (1L << (UNCOMPRESSED_LENGTH - 976)) | (1L << (UNHEX - 976)) | (1L << (UNIX_TIMESTAMP - 976)) | (1L << (UPDATEXML - 976)) | (1L << (UPPER - 976)) | (1L << (UUID - 976)) | (1L << (UUID_SHORT - 976)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 976)) | (1L << (VERSION - 976)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 976)) | (1L << (WEEKDAY - 976)) | (1L << (WEEKOFYEAR - 976)) | (1L << (WEIGHT_STRING - 976)) | (1L << (WITHIN - 976)) | (1L << (YEARWEEK - 976)) | (1L << (Y_FUNCTION - 976)) | (1L << (X_FUNCTION - 976)))) != 0) || ((((_la - 1053)) & ~0x3f) == 0 && ((1L << (_la - 1053)) & ((1L << (MOD - 1053)) | (1L << (STRING_LITERAL - 1053)) | (1L << (ID - 1053)) | (1L << (REVERSE_QUOTE_ID - 1053)) | (1L << (OPTIONAL - 1053)))) != 0)) {
					{
					setState(219);
					((UniqueKeyTableConstraintContext)_localctx).index = identifier();
					}
				}

				setState(223);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(222);
					indexType();
					}
				}

				setState(225);
				indexColumnNames();
				setState(229);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE) {
					{
					{
					setState(226);
					indexOption();
					}
					}
					setState(231);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 3:
				_localctx = new ForeignKeyTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(236);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(232);
					match(CONSTRAINT);
					setState(234);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (GROUP - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (NUMBER - 106)) | (1L << (ORDER - 106)) | (1L << (RIGHT - 106)) | (1L << (SCHEMA - 106)) | (1L << (STACKED - 106)))) != 0) || ((((_la - 200)) & ~0x3f) == 0 && ((1L << (_la - 200)) & ((1L << (DATE - 200)) | (1L << (TIME - 200)) | (1L << (TIMESTAMP - 200)) | (1L << (YEAR - 200)) | (1L << (SERIAL - 200)) | (1L << (JSON_ARRAY - 200)) | (1L << (JSON_OBJECT - 200)) | (1L << (JSON_QUOTE - 200)) | (1L << (JSON_CONTAINS - 200)) | (1L << (JSON_CONTAINS_PATH - 200)) | (1L << (JSON_EXTRACT - 200)) | (1L << (JSON_KEYS - 200)) | (1L << (JSON_OVERLAPS - 200)) | (1L << (JSON_SEARCH - 200)) | (1L << (JSON_VALUE - 200)) | (1L << (JSON_ARRAY_APPEND - 200)) | (1L << (JSON_ARRAY_INSERT - 200)) | (1L << (JSON_INSERT - 200)) | (1L << (JSON_MERGE - 200)) | (1L << (JSON_MERGE_PATCH - 200)) | (1L << (JSON_MERGE_PRESERVE - 200)) | (1L << (JSON_REMOVE - 200)) | (1L << (JSON_REPLACE - 200)) | (1L << (JSON_SET - 200)) | (1L << (JSON_UNQUOTE - 200)) | (1L << (JSON_DEPTH - 200)) | (1L << (JSON_LENGTH - 200)) | (1L << (JSON_TYPE - 200)) | (1L << (JSON_VALID - 200)) | (1L << (JSON_TABLE - 200)) | (1L << (JSON_SCHEMA_VALID - 200)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 200)) | (1L << (JSON_PRETTY - 200)) | (1L << (JSON_STORAGE_FREE - 200)) | (1L << (JSON_STORAGE_SIZE - 200)))) != 0) || ((((_la - 264)) & ~0x3f) == 0 && ((1L << (_la - 264)) & ((1L << (JSON_ARRAYAGG - 264)) | (1L << (JSON_OBJECTAGG - 264)) | (1L << (AVG - 264)) | (1L << (BIT_AND - 264)) | (1L << (BIT_OR - 264)) | (1L << (BIT_XOR - 264)) | (1L << (COUNT - 264)) | (1L << (GROUP_CONCAT - 264)) | (1L << (MAX - 264)) | (1L << (MIN - 264)) | (1L << (STD - 264)) | (1L << (STDDEV - 264)) | (1L << (STDDEV_POP - 264)) | (1L << (STDDEV_SAMP - 264)) | (1L << (SUM - 264)) | (1L << (VAR_POP - 264)) | (1L << (VAR_SAMP - 264)) | (1L << (VARIANCE - 264)) | (1L << (POSITION - 264)) | (1L << (ACCOUNT - 264)) | (1L << (ACTION - 264)) | (1L << (AFTER - 264)) | (1L << (AGGREGATE - 264)) | (1L << (ALGORITHM - 264)) | (1L << (ANY - 264)) | (1L << (AT - 264)) | (1L << (AUTHORS - 264)) | (1L << (AUTOCOMMIT - 264)) | (1L << (AUTOEXTEND_SIZE - 264)) | (1L << (AUTO_INCREMENT - 264)) | (1L << (AVG_ROW_LENGTH - 264)) | (1L << (BEGIN - 264)) | (1L << (BINLOG - 264)) | (1L << (BIT - 264)) | (1L << (BLOCK - 264)) | (1L << (BOOL - 264)) | (1L << (BOOLEAN - 264)) | (1L << (BTREE - 264)) | (1L << (CACHE - 264)) | (1L << (CASCADED - 264)) | (1L << (CHAIN - 264)) | (1L << (CHANGED - 264)) | (1L << (CHANNEL - 264)) | (1L << (CHECKSUM - 264)) | (1L << (PAGE_CHECKSUM - 264)) | (1L << (CIPHER - 264)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (CLASS_ORIGIN - 328)) | (1L << (CLIENT - 328)) | (1L << (CLOSE - 328)) | (1L << (COALESCE - 328)) | (1L << (CODE - 328)) | (1L << (COLUMNS - 328)) | (1L << (COLUMN_FORMAT - 328)) | (1L << (COLUMN_NAME - 328)) | (1L << (COMMENT - 328)) | (1L << (COMMIT - 328)) | (1L << (COMPACT - 328)) | (1L << (COMPLETION - 328)) | (1L << (COMPRESSED - 328)) | (1L << (COMPRESSION - 328)) | (1L << (CONCURRENT - 328)) | (1L << (CONNECT - 328)) | (1L << (CONNECTION - 328)) | (1L << (CONSISTENT - 328)) | (1L << (CONSTRAINT_CATALOG - 328)) | (1L << (CONSTRAINT_SCHEMA - 328)) | (1L << (CONSTRAINT_NAME - 328)) | (1L << (CONTAINS - 328)) | (1L << (CONTEXT - 328)) | (1L << (CONTRIBUTORS - 328)) | (1L << (COPY - 328)) | (1L << (CPU - 328)) | (1L << (CURSOR_NAME - 328)) | (1L << (DATA - 328)) | (1L << (DATAFILE - 328)) | (1L << (DEALLOCATE - 328)) | (1L << (DEFAULT_AUTH - 328)) | (1L << (DEFINER - 328)) | (1L << (DELAY_KEY_WRITE - 328)) | (1L << (DES_KEY_FILE - 328)) | (1L << (DIRECTORY - 328)) | (1L << (DISABLE - 328)) | (1L << (DISCARD - 328)) | (1L << (DISK - 328)) | (1L << (DO - 328)) | (1L << (DUMPFILE - 328)) | (1L << (DUPLICATE - 328)) | (1L << (DYNAMIC - 328)) | (1L << (ENABLE - 328)) | (1L << (ENCRYPTION - 328)) | (1L << (END - 328)) | (1L << (ENDS - 328)) | (1L << (ENGINE - 328)) | (1L << (ENGINES - 328)) | (1L << (ERROR - 328)) | (1L << (ERRORS - 328)) | (1L << (ESCAPE - 328)) | (1L << (EVEN - 328)) | (1L << (EVENT - 328)) | (1L << (EVENTS - 328)) | (1L << (EVERY - 328)) | (1L << (EXCHANGE - 328)) | (1L << (EXCLUSIVE - 328)) | (1L << (EXPIRE - 328)) | (1L << (EXPORT - 328)) | (1L << (EXTENDED - 328)) | (1L << (EXTENT_SIZE - 328)) | (1L << (FAST - 328)) | (1L << (FAULTS - 328)) | (1L << (FIELDS - 328)))) != 0) || ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (FILE_BLOCK_SIZE - 392)) | (1L << (FILTER - 392)) | (1L << (FIRST - 392)) | (1L << (FIXED - 392)) | (1L << (FLUSH - 392)) | (1L << (FOLLOWS - 392)) | (1L << (FOUND - 392)) | (1L << (FULL - 392)) | (1L << (FUNCTION - 392)) | (1L << (GENERAL - 392)) | (1L << (GLOBAL - 392)) | (1L << (GRANTS - 392)) | (1L << (GROUP_REPLICATION - 392)) | (1L << (HANDLER - 392)) | (1L << (HASH - 392)) | (1L << (HELP - 392)) | (1L << (HOST - 392)) | (1L << (HOSTS - 392)) | (1L << (IDENTIFIED - 392)) | (1L << (IGNORE_SERVER_IDS - 392)) | (1L << (IMPORT - 392)) | (1L << (INDEXES - 392)) | (1L << (INITIAL_SIZE - 392)) | (1L << (INPLACE - 392)) | (1L << (INSERT_METHOD - 392)) | (1L << (INSTALL - 392)) | (1L << (INSTANCE - 392)) | (1L << (INVISIBLE - 392)) | (1L << (INVOKER - 392)) | (1L << (IO - 392)) | (1L << (IO_THREAD - 392)) | (1L << (IPC - 392)) | (1L << (ISOLATION - 392)) | (1L << (ISSUER - 392)) | (1L << (JSON - 392)) | (1L << (KEY_BLOCK_SIZE - 392)) | (1L << (LANGUAGE - 392)) | (1L << (LAST - 392)) | (1L << (LEAVES - 392)) | (1L << (LESS - 392)) | (1L << (LEVEL - 392)) | (1L << (LIST - 392)) | (1L << (LOCAL - 392)) | (1L << (LOGFILE - 392)) | (1L << (LOGS - 392)) | (1L << (MASTER - 392)) | (1L << (MASTER_AUTO_POSITION - 392)) | (1L << (MASTER_CONNECT_RETRY - 392)) | (1L << (MASTER_DELAY - 392)) | (1L << (MASTER_HEARTBEAT_PERIOD - 392)) | (1L << (MASTER_HOST - 392)) | (1L << (MASTER_LOG_FILE - 392)) | (1L << (MASTER_LOG_POS - 392)) | (1L << (MASTER_PASSWORD - 392)) | (1L << (MASTER_PORT - 392)) | (1L << (MASTER_RETRY_COUNT - 392)) | (1L << (MASTER_SSL - 392)) | (1L << (MASTER_SSL_CA - 392)) | (1L << (MASTER_SSL_CAPATH - 392)) | (1L << (MASTER_SSL_CERT - 392)) | (1L << (MASTER_SSL_CIPHER - 392)) | (1L << (MASTER_SSL_CRL - 392)) | (1L << (MASTER_SSL_CRLPATH - 392)) | (1L << (MASTER_SSL_KEY - 392)))) != 0) || ((((_la - 456)) & ~0x3f) == 0 && ((1L << (_la - 456)) & ((1L << (MASTER_TLS_VERSION - 456)) | (1L << (MASTER_USER - 456)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 456)) | (1L << (MAX_QUERIES_PER_HOUR - 456)) | (1L << (MAX_ROWS - 456)) | (1L << (MAX_SIZE - 456)) | (1L << (MAX_UPDATES_PER_HOUR - 456)) | (1L << (MAX_USER_CONNECTIONS - 456)) | (1L << (MEDIUM - 456)) | (1L << (MEMBER - 456)) | (1L << (MERGE - 456)) | (1L << (MESSAGE_TEXT - 456)) | (1L << (MID - 456)) | (1L << (MIGRATE - 456)) | (1L << (MIN_ROWS - 456)) | (1L << (MODE - 456)) | (1L << (MODIFY - 456)) | (1L << (MUTEX - 456)) | (1L << (MYSQL - 456)) | (1L << (MYSQL_ERRNO - 456)) | (1L << (NAME - 456)) | (1L << (NAMES - 456)) | (1L << (NCHAR - 456)) | (1L << (NEVER - 456)) | (1L << (NEXT - 456)) | (1L << (NO - 456)) | (1L << (NODEGROUP - 456)) | (1L << (NONE - 456)) | (1L << (ODBC - 456)) | (1L << (OFFLINE - 456)) | (1L << (OFFSET - 456)) | (1L << (OF - 456)) | (1L << (OJ - 456)) | (1L << (OLD_PASSWORD - 456)) | (1L << (ONE - 456)) | (1L << (ONLINE - 456)) | (1L << (ONLY - 456)) | (1L << (OPEN - 456)) | (1L << (OPTIMIZER_COSTS - 456)) | (1L << (OPTIONS - 456)) | (1L << (OWNER - 456)) | (1L << (PACK_KEYS - 456)) | (1L << (PAGE - 456)) | (1L << (PARSER - 456)) | (1L << (PARTIAL - 456)) | (1L << (PARTITIONING - 456)) | (1L << (PARTITIONS - 456)) | (1L << (PASSWORD - 456)) | (1L << (PHASE - 456)) | (1L << (PLUGIN - 456)) | (1L << (PLUGIN_DIR - 456)) | (1L << (PLUGINS - 456)) | (1L << (PORT - 456)) | (1L << (PRECEDES - 456)) | (1L << (PREPARE - 456)) | (1L << (PRESERVE - 456)) | (1L << (PREV - 456)) | (1L << (PROCESSLIST - 456)) | (1L << (PROFILE - 456)) | (1L << (PROFILES - 456)) | (1L << (PROXY - 456)) | (1L << (QUERY - 456)) | (1L << (QUICK - 456)) | (1L << (REBUILD - 456)))) != 0) || ((((_la - 520)) & ~0x3f) == 0 && ((1L << (_la - 520)) & ((1L << (RECOVER - 520)) | (1L << (REDO_BUFFER_SIZE - 520)) | (1L << (REDUNDANT - 520)) | (1L << (RELAY - 520)) | (1L << (RELAY_LOG_FILE - 520)) | (1L << (RELAY_LOG_POS - 520)) | (1L << (RELAYLOG - 520)) | (1L << (REMOVE - 520)) | (1L << (REORGANIZE - 520)) | (1L << (REPAIR - 520)) | (1L << (REPLICATE_DO_DB - 520)) | (1L << (REPLICATE_DO_TABLE - 520)) | (1L << (REPLICATE_IGNORE_DB - 520)) | (1L << (REPLICATE_IGNORE_TABLE - 520)) | (1L << (REPLICATE_REWRITE_DB - 520)) | (1L << (REPLICATE_WILD_DO_TABLE - 520)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 520)) | (1L << (REPLICATION - 520)) | (1L << (RESET - 520)) | (1L << (RESUME - 520)) | (1L << (RETURNED_SQLSTATE - 520)) | (1L << (RETURNS - 520)) | (1L << (ROLE - 520)) | (1L << (ROLLBACK - 520)) | (1L << (ROLLUP - 520)) | (1L << (ROTATE - 520)) | (1L << (ROW - 520)) | (1L << (ROWS - 520)) | (1L << (ROW_FORMAT - 520)) | (1L << (SAVEPOINT - 520)) | (1L << (SCHEDULE - 520)) | (1L << (SECURITY - 520)) | (1L << (SERVER - 520)) | (1L << (SESSION - 520)) | (1L << (SHARE - 520)) | (1L << (SHARED - 520)) | (1L << (SIGNED - 520)) | (1L << (SIMPLE - 520)) | (1L << (SLAVE - 520)) | (1L << (SLOW - 520)) | (1L << (SNAPSHOT - 520)) | (1L << (SOCKET - 520)) | (1L << (SOME - 520)) | (1L << (SONAME - 520)) | (1L << (SOUNDS - 520)) | (1L << (SOURCE - 520)) | (1L << (SQL_AFTER_GTIDS - 520)) | (1L << (SQL_AFTER_MTS_GAPS - 520)) | (1L << (SQL_BEFORE_GTIDS - 520)) | (1L << (SQL_BUFFER_RESULT - 520)) | (1L << (SQL_CACHE - 520)) | (1L << (SQL_NO_CACHE - 520)) | (1L << (SQL_THREAD - 520)) | (1L << (START - 520)) | (1L << (STARTS - 520)) | (1L << (STATS_AUTO_RECALC - 520)) | (1L << (STATS_PERSISTENT - 520)) | (1L << (STATS_SAMPLE_PAGES - 520)) | (1L << (STATUS - 520)) | (1L << (STOP - 520)) | (1L << (STORAGE - 520)) | (1L << (STRING - 520)))) != 0) || ((((_la - 584)) & ~0x3f) == 0 && ((1L << (_la - 584)) & ((1L << (SUBCLASS_ORIGIN - 584)) | (1L << (SUBJECT - 584)) | (1L << (SUBPARTITION - 584)) | (1L << (SUBPARTITIONS - 584)) | (1L << (SUSPEND - 584)) | (1L << (SWAPS - 584)) | (1L << (SWITCHES - 584)) | (1L << (TABLE_NAME - 584)) | (1L << (TABLESPACE - 584)) | (1L << (TEMPORARY - 584)) | (1L << (TEMPTABLE - 584)) | (1L << (THAN - 584)) | (1L << (TRADITIONAL - 584)) | (1L << (TRANSACTION - 584)) | (1L << (TRANSACTIONAL - 584)) | (1L << (TRIGGERS - 584)) | (1L << (TRUNCATE - 584)) | (1L << (UNDEFINED - 584)) | (1L << (UNDOFILE - 584)) | (1L << (UNDO_BUFFER_SIZE - 584)) | (1L << (UNINSTALL - 584)) | (1L << (UNKNOWN - 584)) | (1L << (UNTIL - 584)) | (1L << (UPGRADE - 584)) | (1L << (USER - 584)) | (1L << (USE_FRM - 584)) | (1L << (USER_RESOURCES - 584)) | (1L << (VALIDATION - 584)) | (1L << (VALUE - 584)) | (1L << (VARIABLES - 584)) | (1L << (VIEW - 584)) | (1L << (VISIBLE - 584)) | (1L << (WAIT - 584)) | (1L << (WARNINGS - 584)) | (1L << (WITHOUT - 584)) | (1L << (WORK - 584)) | (1L << (WRAPPER - 584)) | (1L << (X509 - 584)) | (1L << (XA - 584)) | (1L << (XML - 584)) | (1L << (INTERNAL - 584)) | (1L << (QUARTER - 584)) | (1L << (MONTH - 584)) | (1L << (DAY - 584)) | (1L << (HOUR - 584)) | (1L << (MINUTE - 584)) | (1L << (WEEK - 584)) | (1L << (SECOND - 584)) | (1L << (MICROSECOND - 584)))) != 0) || ((((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & ((1L << (AUDIT_ADMIN - 649)) | (1L << (BACKUP_ADMIN - 649)) | (1L << (BINLOG_ADMIN - 649)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 649)) | (1L << (CLONE_ADMIN - 649)) | (1L << (CONNECTION_ADMIN - 649)) | (1L << (ENCRYPTION_KEY_ADMIN - 649)) | (1L << (FIREWALL_ADMIN - 649)) | (1L << (FIREWALL_USER - 649)) | (1L << (GROUP_REPLICATION_ADMIN - 649)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 649)) | (1L << (NDB_STORED_USER - 649)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 649)) | (1L << (REPLICATION_APPLIER - 649)) | (1L << (REPLICATION_SLAVE_ADMIN - 649)) | (1L << (RESOURCE_GROUP_ADMIN - 649)) | (1L << (RESOURCE_GROUP_USER - 649)) | (1L << (ROLE_ADMIN - 649)) | (1L << (SESSION_VARIABLES_ADMIN - 649)) | (1L << (SET_USER_ID - 649)) | (1L << (SHOW_ROUTINE - 649)) | (1L << (SYSTEM_VARIABLES_ADMIN - 649)) | (1L << (TABLE_ENCRYPTION_ADMIN - 649)) | (1L << (VERSION_TOKEN_ADMIN - 649)) | (1L << (XA_RECOVER_ADMIN - 649)))) != 0) || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & ((1L << (ARCHIVE - 720)) | (1L << (BLACKHOLE - 720)) | (1L << (CSV - 720)) | (1L << (FEDERATED - 720)) | (1L << (INNODB - 720)) | (1L << (MEMORY - 720)) | (1L << (MRG_MYISAM - 720)) | (1L << (MYISAM - 720)) | (1L << (NDB - 720)) | (1L << (NDBCLUSTER - 720)) | (1L << (PERFORMANCE_SCHEMA - 720)) | (1L << (TOKUDB - 720)) | (1L << (GEOMETRYCOLLECTION - 720)) | (1L << (LINESTRING - 720)) | (1L << (MULTILINESTRING - 720)) | (1L << (MULTIPOINT - 720)) | (1L << (MULTIPOLYGON - 720)) | (1L << (POINT - 720)) | (1L << (POLYGON - 720)) | (1L << (ABS - 720)) | (1L << (ACOS - 720)) | (1L << (ADDDATE - 720)) | (1L << (ADDTIME - 720)) | (1L << (AES_DECRYPT - 720)) | (1L << (AES_ENCRYPT - 720)) | (1L << (AREA - 720)) | (1L << (ASBINARY - 720)) | (1L << (ASIN - 720)) | (1L << (ASTEXT - 720)) | (1L << (ASWKB - 720)) | (1L << (ASWKT - 720)) | (1L << (ASYMMETRIC_DECRYPT - 720)) | (1L << (ASYMMETRIC_DERIVE - 720)) | (1L << (ASYMMETRIC_ENCRYPT - 720)) | (1L << (ASYMMETRIC_SIGN - 720)) | (1L << (ASYMMETRIC_VERIFY - 720)) | (1L << (ATAN - 720)) | (1L << (ATAN2 - 720)) | (1L << (BENCHMARK - 720)) | (1L << (BIN - 720)) | (1L << (BIT_COUNT - 720)) | (1L << (BIT_LENGTH - 720)) | (1L << (BUFFER - 720)) | (1L << (CATALOG_NAME - 720)) | (1L << (CEIL - 720)) | (1L << (CEILING - 720)) | (1L << (CENTROID - 720)) | (1L << (CHARACTER_LENGTH - 720)) | (1L << (CHARSET - 720)) | (1L << (CHAR_LENGTH - 720)) | (1L << (COERCIBILITY - 720)) | (1L << (COLLATION - 720)) | (1L << (COMPRESS - 720)) | (1L << (CONCAT - 720)) | (1L << (CONCAT_WS - 720)) | (1L << (CONNECTION_ID - 720)) | (1L << (CONV - 720)) | (1L << (CONVERT_TZ - 720)))) != 0) || ((((_la - 784)) & ~0x3f) == 0 && ((1L << (_la - 784)) & ((1L << (COS - 784)) | (1L << (COT - 784)) | (1L << (CRC32 - 784)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 784)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 784)) | (1L << (CREATE_DH_PARAMETERS - 784)) | (1L << (CREATE_DIGEST - 784)) | (1L << (CROSSES - 784)) | (1L << (DATEDIFF - 784)) | (1L << (DATE_FORMAT - 784)) | (1L << (DAYNAME - 784)) | (1L << (DAYOFMONTH - 784)) | (1L << (DAYOFWEEK - 784)) | (1L << (DAYOFYEAR - 784)) | (1L << (DECODE - 784)) | (1L << (DEGREES - 784)) | (1L << (DES_DECRYPT - 784)) | (1L << (DES_ENCRYPT - 784)) | (1L << (DIMENSION - 784)) | (1L << (DISJOINT - 784)) | (1L << (ELT - 784)) | (1L << (ENCODE - 784)) | (1L << (ENCRYPT - 784)) | (1L << (ENDPOINT - 784)) | (1L << (ENVELOPE - 784)) | (1L << (EQUALS - 784)) | (1L << (EXP - 784)) | (1L << (EXPORT_SET - 784)) | (1L << (EXTERIORRING - 784)) | (1L << (EXTRACTVALUE - 784)) | (1L << (FIELD - 784)) | (1L << (FIND_IN_SET - 784)) | (1L << (FLOOR - 784)) | (1L << (FORMAT - 784)) | (1L << (FOUND_ROWS - 784)) | (1L << (FROM_BASE64 - 784)) | (1L << (FROM_DAYS - 784)) | (1L << (FROM_UNIXTIME - 784)) | (1L << (GEOMCOLLFROMTEXT - 784)) | (1L << (GEOMCOLLFROMWKB - 784)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 784)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 784)) | (1L << (GEOMETRYFROMTEXT - 784)) | (1L << (GEOMETRYFROMWKB - 784)) | (1L << (GEOMETRYN - 784)) | (1L << (GEOMETRYTYPE - 784)) | (1L << (GEOMFROMTEXT - 784)) | (1L << (GEOMFROMWKB - 784)) | (1L << (GET_FORMAT - 784)) | (1L << (GET_LOCK - 784)) | (1L << (GLENGTH - 784)) | (1L << (GREATEST - 784)) | (1L << (GTID_SUBSET - 784)) | (1L << (GTID_SUBTRACT - 784)) | (1L << (HEX - 784)) | (1L << (IFNULL - 784)) | (1L << (INET6_ATON - 784)) | (1L << (INET6_NTOA - 784)) | (1L << (INET_ATON - 784)) | (1L << (INET_NTOA - 784)) | (1L << (INSTR - 784)) | (1L << (INTERIORRINGN - 784)) | (1L << (INTERSECTS - 784)) | (1L << (ISCLOSED - 784)))) != 0) || ((((_la - 848)) & ~0x3f) == 0 && ((1L << (_la - 848)) & ((1L << (ISEMPTY - 848)) | (1L << (ISNULL - 848)) | (1L << (ISSIMPLE - 848)) | (1L << (IS_FREE_LOCK - 848)) | (1L << (IS_IPV4 - 848)) | (1L << (IS_IPV4_COMPAT - 848)) | (1L << (IS_IPV4_MAPPED - 848)) | (1L << (IS_IPV6 - 848)) | (1L << (IS_USED_LOCK - 848)) | (1L << (LAST_INSERT_ID - 848)) | (1L << (LCASE - 848)) | (1L << (LEAST - 848)) | (1L << (LENGTH - 848)) | (1L << (LINEFROMTEXT - 848)) | (1L << (LINEFROMWKB - 848)) | (1L << (LINESTRINGFROMTEXT - 848)) | (1L << (LINESTRINGFROMWKB - 848)) | (1L << (LN - 848)) | (1L << (LOAD_FILE - 848)) | (1L << (LOCATE - 848)) | (1L << (LOG - 848)) | (1L << (LOG10 - 848)) | (1L << (LOG2 - 848)) | (1L << (LOWER - 848)) | (1L << (LPAD - 848)) | (1L << (LTRIM - 848)) | (1L << (MAKEDATE - 848)) | (1L << (MAKETIME - 848)) | (1L << (MAKE_SET - 848)) | (1L << (MASTER_POS_WAIT - 848)) | (1L << (MBRCONTAINS - 848)) | (1L << (MBRDISJOINT - 848)) | (1L << (MBREQUAL - 848)) | (1L << (MBRINTERSECTS - 848)) | (1L << (MBROVERLAPS - 848)) | (1L << (MBRTOUCHES - 848)) | (1L << (MBRWITHIN - 848)) | (1L << (MD5 - 848)) | (1L << (MLINEFROMTEXT - 848)) | (1L << (MLINEFROMWKB - 848)) | (1L << (MONTHNAME - 848)) | (1L << (MPOINTFROMTEXT - 848)) | (1L << (MPOINTFROMWKB - 848)) | (1L << (MPOLYFROMTEXT - 848)) | (1L << (MPOLYFROMWKB - 848)) | (1L << (MULTILINESTRINGFROMTEXT - 848)) | (1L << (MULTILINESTRINGFROMWKB - 848)) | (1L << (MULTIPOINTFROMTEXT - 848)) | (1L << (MULTIPOINTFROMWKB - 848)) | (1L << (MULTIPOLYGONFROMTEXT - 848)) | (1L << (MULTIPOLYGONFROMWKB - 848)) | (1L << (NAME_CONST - 848)) | (1L << (NULLIF - 848)) | (1L << (NUMGEOMETRIES - 848)) | (1L << (NUMINTERIORRINGS - 848)) | (1L << (NUMPOINTS - 848)) | (1L << (OCT - 848)) | (1L << (OCTET_LENGTH - 848)) | (1L << (ORD - 848)) | (1L << (OVERLAPS - 848)) | (1L << (PERIOD_ADD - 848)) | (1L << (PERIOD_DIFF - 848)) | (1L << (PI - 848)) | (1L << (POINTFROMTEXT - 848)))) != 0) || ((((_la - 912)) & ~0x3f) == 0 && ((1L << (_la - 912)) & ((1L << (POINTFROMWKB - 912)) | (1L << (POINTN - 912)) | (1L << (POLYFROMTEXT - 912)) | (1L << (POLYFROMWKB - 912)) | (1L << (POLYGONFROMTEXT - 912)) | (1L << (POLYGONFROMWKB - 912)) | (1L << (POW - 912)) | (1L << (POWER - 912)) | (1L << (QUOTE - 912)) | (1L << (RADIANS - 912)) | (1L << (RAND - 912)) | (1L << (RANDOM_BYTES - 912)) | (1L << (RELEASE_LOCK - 912)) | (1L << (REVERSE - 912)) | (1L << (ROUND - 912)) | (1L << (ROW_COUNT - 912)) | (1L << (RPAD - 912)) | (1L << (RTRIM - 912)) | (1L << (SEC_TO_TIME - 912)) | (1L << (SESSION_USER - 912)) | (1L << (SHA - 912)) | (1L << (SHA1 - 912)) | (1L << (SHA2 - 912)) | (1L << (SCHEMA_NAME - 912)) | (1L << (SIGN - 912)) | (1L << (SIN - 912)) | (1L << (SLEEP - 912)) | (1L << (SOUNDEX - 912)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 912)) | (1L << (SQRT - 912)) | (1L << (SRID - 912)) | (1L << (STARTPOINT - 912)) | (1L << (STRCMP - 912)) | (1L << (STR_TO_DATE - 912)) | (1L << (ST_AREA - 912)) | (1L << (ST_ASBINARY - 912)) | (1L << (ST_ASTEXT - 912)) | (1L << (ST_ASWKB - 912)) | (1L << (ST_ASWKT - 912)) | (1L << (ST_BUFFER - 912)) | (1L << (ST_CENTROID - 912)) | (1L << (ST_CONTAINS - 912)) | (1L << (ST_CROSSES - 912)) | (1L << (ST_DIFFERENCE - 912)) | (1L << (ST_DIMENSION - 912)) | (1L << (ST_DISJOINT - 912)) | (1L << (ST_DISTANCE - 912)) | (1L << (ST_ENDPOINT - 912)) | (1L << (ST_ENVELOPE - 912)) | (1L << (ST_EQUALS - 912)) | (1L << (ST_EXTERIORRING - 912)) | (1L << (ST_GEOMCOLLFROMTEXT - 912)) | (1L << (ST_GEOMCOLLFROMTXT - 912)) | (1L << (ST_GEOMCOLLFROMWKB - 912)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 912)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 912)) | (1L << (ST_GEOMETRYFROMTEXT - 912)) | (1L << (ST_GEOMETRYFROMWKB - 912)) | (1L << (ST_GEOMETRYN - 912)) | (1L << (ST_GEOMETRYTYPE - 912)) | (1L << (ST_GEOMFROMTEXT - 912)) | (1L << (ST_GEOMFROMWKB - 912)) | (1L << (ST_INTERIORRINGN - 912)) | (1L << (ST_INTERSECTION - 912)))) != 0) || ((((_la - 976)) & ~0x3f) == 0 && ((1L << (_la - 976)) & ((1L << (ST_INTERSECTS - 976)) | (1L << (ST_ISCLOSED - 976)) | (1L << (ST_ISEMPTY - 976)) | (1L << (ST_ISSIMPLE - 976)) | (1L << (ST_LINEFROMTEXT - 976)) | (1L << (ST_LINEFROMWKB - 976)) | (1L << (ST_LINESTRINGFROMTEXT - 976)) | (1L << (ST_LINESTRINGFROMWKB - 976)) | (1L << (ST_NUMGEOMETRIES - 976)) | (1L << (ST_NUMINTERIORRING - 976)) | (1L << (ST_NUMINTERIORRINGS - 976)) | (1L << (ST_NUMPOINTS - 976)) | (1L << (ST_OVERLAPS - 976)) | (1L << (ST_POINTFROMTEXT - 976)) | (1L << (ST_POINTFROMWKB - 976)) | (1L << (ST_POINTN - 976)) | (1L << (ST_POLYFROMTEXT - 976)) | (1L << (ST_POLYFROMWKB - 976)) | (1L << (ST_POLYGONFROMTEXT - 976)) | (1L << (ST_POLYGONFROMWKB - 976)) | (1L << (ST_SRID - 976)) | (1L << (ST_STARTPOINT - 976)) | (1L << (ST_SYMDIFFERENCE - 976)) | (1L << (ST_TOUCHES - 976)) | (1L << (ST_UNION - 976)) | (1L << (ST_WITHIN - 976)) | (1L << (ST_X - 976)) | (1L << (ST_Y - 976)) | (1L << (SUBDATE - 976)) | (1L << (SUBSTRING_INDEX - 976)) | (1L << (SUBTIME - 976)) | (1L << (SYSTEM_USER - 976)) | (1L << (TAN - 976)) | (1L << (TIMEDIFF - 976)) | (1L << (TIMESTAMPADD - 976)) | (1L << (TIMESTAMPDIFF - 976)) | (1L << (TIME_FORMAT - 976)) | (1L << (TIME_TO_SEC - 976)) | (1L << (TOUCHES - 976)) | (1L << (TO_BASE64 - 976)) | (1L << (TO_DAYS - 976)) | (1L << (TO_SECONDS - 976)) | (1L << (UCASE - 976)) | (1L << (UNCOMPRESS - 976)) | (1L << (UNCOMPRESSED_LENGTH - 976)) | (1L << (UNHEX - 976)) | (1L << (UNIX_TIMESTAMP - 976)) | (1L << (UPDATEXML - 976)) | (1L << (UPPER - 976)) | (1L << (UUID - 976)) | (1L << (UUID_SHORT - 976)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 976)) | (1L << (VERSION - 976)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 976)) | (1L << (WEEKDAY - 976)) | (1L << (WEEKOFYEAR - 976)) | (1L << (WEIGHT_STRING - 976)) | (1L << (WITHIN - 976)) | (1L << (YEARWEEK - 976)) | (1L << (Y_FUNCTION - 976)) | (1L << (X_FUNCTION - 976)))) != 0) || ((((_la - 1053)) & ~0x3f) == 0 && ((1L << (_la - 1053)) & ((1L << (MOD - 1053)) | (1L << (STRING_LITERAL - 1053)) | (1L << (ID - 1053)) | (1L << (REVERSE_QUOTE_ID - 1053)) | (1L << (OPTIONAL - 1053)))) != 0)) {
						{
						setState(233);
						((ForeignKeyTableConstraintContext)_localctx).name = identifier();
						}
					}

					}
				}

				setState(238);
				match(FOREIGN);
				setState(239);
				match(KEY);
				setState(241);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (GROUP - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (NUMBER - 106)) | (1L << (ORDER - 106)) | (1L << (RIGHT - 106)) | (1L << (SCHEMA - 106)) | (1L << (STACKED - 106)))) != 0) || ((((_la - 200)) & ~0x3f) == 0 && ((1L << (_la - 200)) & ((1L << (DATE - 200)) | (1L << (TIME - 200)) | (1L << (TIMESTAMP - 200)) | (1L << (YEAR - 200)) | (1L << (SERIAL - 200)) | (1L << (JSON_ARRAY - 200)) | (1L << (JSON_OBJECT - 200)) | (1L << (JSON_QUOTE - 200)) | (1L << (JSON_CONTAINS - 200)) | (1L << (JSON_CONTAINS_PATH - 200)) | (1L << (JSON_EXTRACT - 200)) | (1L << (JSON_KEYS - 200)) | (1L << (JSON_OVERLAPS - 200)) | (1L << (JSON_SEARCH - 200)) | (1L << (JSON_VALUE - 200)) | (1L << (JSON_ARRAY_APPEND - 200)) | (1L << (JSON_ARRAY_INSERT - 200)) | (1L << (JSON_INSERT - 200)) | (1L << (JSON_MERGE - 200)) | (1L << (JSON_MERGE_PATCH - 200)) | (1L << (JSON_MERGE_PRESERVE - 200)) | (1L << (JSON_REMOVE - 200)) | (1L << (JSON_REPLACE - 200)) | (1L << (JSON_SET - 200)) | (1L << (JSON_UNQUOTE - 200)) | (1L << (JSON_DEPTH - 200)) | (1L << (JSON_LENGTH - 200)) | (1L << (JSON_TYPE - 200)) | (1L << (JSON_VALID - 200)) | (1L << (JSON_TABLE - 200)) | (1L << (JSON_SCHEMA_VALID - 200)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 200)) | (1L << (JSON_PRETTY - 200)) | (1L << (JSON_STORAGE_FREE - 200)) | (1L << (JSON_STORAGE_SIZE - 200)))) != 0) || ((((_la - 264)) & ~0x3f) == 0 && ((1L << (_la - 264)) & ((1L << (JSON_ARRAYAGG - 264)) | (1L << (JSON_OBJECTAGG - 264)) | (1L << (AVG - 264)) | (1L << (BIT_AND - 264)) | (1L << (BIT_OR - 264)) | (1L << (BIT_XOR - 264)) | (1L << (COUNT - 264)) | (1L << (GROUP_CONCAT - 264)) | (1L << (MAX - 264)) | (1L << (MIN - 264)) | (1L << (STD - 264)) | (1L << (STDDEV - 264)) | (1L << (STDDEV_POP - 264)) | (1L << (STDDEV_SAMP - 264)) | (1L << (SUM - 264)) | (1L << (VAR_POP - 264)) | (1L << (VAR_SAMP - 264)) | (1L << (VARIANCE - 264)) | (1L << (POSITION - 264)) | (1L << (ACCOUNT - 264)) | (1L << (ACTION - 264)) | (1L << (AFTER - 264)) | (1L << (AGGREGATE - 264)) | (1L << (ALGORITHM - 264)) | (1L << (ANY - 264)) | (1L << (AT - 264)) | (1L << (AUTHORS - 264)) | (1L << (AUTOCOMMIT - 264)) | (1L << (AUTOEXTEND_SIZE - 264)) | (1L << (AUTO_INCREMENT - 264)) | (1L << (AVG_ROW_LENGTH - 264)) | (1L << (BEGIN - 264)) | (1L << (BINLOG - 264)) | (1L << (BIT - 264)) | (1L << (BLOCK - 264)) | (1L << (BOOL - 264)) | (1L << (BOOLEAN - 264)) | (1L << (BTREE - 264)) | (1L << (CACHE - 264)) | (1L << (CASCADED - 264)) | (1L << (CHAIN - 264)) | (1L << (CHANGED - 264)) | (1L << (CHANNEL - 264)) | (1L << (CHECKSUM - 264)) | (1L << (PAGE_CHECKSUM - 264)) | (1L << (CIPHER - 264)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (CLASS_ORIGIN - 328)) | (1L << (CLIENT - 328)) | (1L << (CLOSE - 328)) | (1L << (COALESCE - 328)) | (1L << (CODE - 328)) | (1L << (COLUMNS - 328)) | (1L << (COLUMN_FORMAT - 328)) | (1L << (COLUMN_NAME - 328)) | (1L << (COMMENT - 328)) | (1L << (COMMIT - 328)) | (1L << (COMPACT - 328)) | (1L << (COMPLETION - 328)) | (1L << (COMPRESSED - 328)) | (1L << (COMPRESSION - 328)) | (1L << (CONCURRENT - 328)) | (1L << (CONNECT - 328)) | (1L << (CONNECTION - 328)) | (1L << (CONSISTENT - 328)) | (1L << (CONSTRAINT_CATALOG - 328)) | (1L << (CONSTRAINT_SCHEMA - 328)) | (1L << (CONSTRAINT_NAME - 328)) | (1L << (CONTAINS - 328)) | (1L << (CONTEXT - 328)) | (1L << (CONTRIBUTORS - 328)) | (1L << (COPY - 328)) | (1L << (CPU - 328)) | (1L << (CURSOR_NAME - 328)) | (1L << (DATA - 328)) | (1L << (DATAFILE - 328)) | (1L << (DEALLOCATE - 328)) | (1L << (DEFAULT_AUTH - 328)) | (1L << (DEFINER - 328)) | (1L << (DELAY_KEY_WRITE - 328)) | (1L << (DES_KEY_FILE - 328)) | (1L << (DIRECTORY - 328)) | (1L << (DISABLE - 328)) | (1L << (DISCARD - 328)) | (1L << (DISK - 328)) | (1L << (DO - 328)) | (1L << (DUMPFILE - 328)) | (1L << (DUPLICATE - 328)) | (1L << (DYNAMIC - 328)) | (1L << (ENABLE - 328)) | (1L << (ENCRYPTION - 328)) | (1L << (END - 328)) | (1L << (ENDS - 328)) | (1L << (ENGINE - 328)) | (1L << (ENGINES - 328)) | (1L << (ERROR - 328)) | (1L << (ERRORS - 328)) | (1L << (ESCAPE - 328)) | (1L << (EVEN - 328)) | (1L << (EVENT - 328)) | (1L << (EVENTS - 328)) | (1L << (EVERY - 328)) | (1L << (EXCHANGE - 328)) | (1L << (EXCLUSIVE - 328)) | (1L << (EXPIRE - 328)) | (1L << (EXPORT - 328)) | (1L << (EXTENDED - 328)) | (1L << (EXTENT_SIZE - 328)) | (1L << (FAST - 328)) | (1L << (FAULTS - 328)) | (1L << (FIELDS - 328)))) != 0) || ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (FILE_BLOCK_SIZE - 392)) | (1L << (FILTER - 392)) | (1L << (FIRST - 392)) | (1L << (FIXED - 392)) | (1L << (FLUSH - 392)) | (1L << (FOLLOWS - 392)) | (1L << (FOUND - 392)) | (1L << (FULL - 392)) | (1L << (FUNCTION - 392)) | (1L << (GENERAL - 392)) | (1L << (GLOBAL - 392)) | (1L << (GRANTS - 392)) | (1L << (GROUP_REPLICATION - 392)) | (1L << (HANDLER - 392)) | (1L << (HASH - 392)) | (1L << (HELP - 392)) | (1L << (HOST - 392)) | (1L << (HOSTS - 392)) | (1L << (IDENTIFIED - 392)) | (1L << (IGNORE_SERVER_IDS - 392)) | (1L << (IMPORT - 392)) | (1L << (INDEXES - 392)) | (1L << (INITIAL_SIZE - 392)) | (1L << (INPLACE - 392)) | (1L << (INSERT_METHOD - 392)) | (1L << (INSTALL - 392)) | (1L << (INSTANCE - 392)) | (1L << (INVISIBLE - 392)) | (1L << (INVOKER - 392)) | (1L << (IO - 392)) | (1L << (IO_THREAD - 392)) | (1L << (IPC - 392)) | (1L << (ISOLATION - 392)) | (1L << (ISSUER - 392)) | (1L << (JSON - 392)) | (1L << (KEY_BLOCK_SIZE - 392)) | (1L << (LANGUAGE - 392)) | (1L << (LAST - 392)) | (1L << (LEAVES - 392)) | (1L << (LESS - 392)) | (1L << (LEVEL - 392)) | (1L << (LIST - 392)) | (1L << (LOCAL - 392)) | (1L << (LOGFILE - 392)) | (1L << (LOGS - 392)) | (1L << (MASTER - 392)) | (1L << (MASTER_AUTO_POSITION - 392)) | (1L << (MASTER_CONNECT_RETRY - 392)) | (1L << (MASTER_DELAY - 392)) | (1L << (MASTER_HEARTBEAT_PERIOD - 392)) | (1L << (MASTER_HOST - 392)) | (1L << (MASTER_LOG_FILE - 392)) | (1L << (MASTER_LOG_POS - 392)) | (1L << (MASTER_PASSWORD - 392)) | (1L << (MASTER_PORT - 392)) | (1L << (MASTER_RETRY_COUNT - 392)) | (1L << (MASTER_SSL - 392)) | (1L << (MASTER_SSL_CA - 392)) | (1L << (MASTER_SSL_CAPATH - 392)) | (1L << (MASTER_SSL_CERT - 392)) | (1L << (MASTER_SSL_CIPHER - 392)) | (1L << (MASTER_SSL_CRL - 392)) | (1L << (MASTER_SSL_CRLPATH - 392)) | (1L << (MASTER_SSL_KEY - 392)))) != 0) || ((((_la - 456)) & ~0x3f) == 0 && ((1L << (_la - 456)) & ((1L << (MASTER_TLS_VERSION - 456)) | (1L << (MASTER_USER - 456)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 456)) | (1L << (MAX_QUERIES_PER_HOUR - 456)) | (1L << (MAX_ROWS - 456)) | (1L << (MAX_SIZE - 456)) | (1L << (MAX_UPDATES_PER_HOUR - 456)) | (1L << (MAX_USER_CONNECTIONS - 456)) | (1L << (MEDIUM - 456)) | (1L << (MEMBER - 456)) | (1L << (MERGE - 456)) | (1L << (MESSAGE_TEXT - 456)) | (1L << (MID - 456)) | (1L << (MIGRATE - 456)) | (1L << (MIN_ROWS - 456)) | (1L << (MODE - 456)) | (1L << (MODIFY - 456)) | (1L << (MUTEX - 456)) | (1L << (MYSQL - 456)) | (1L << (MYSQL_ERRNO - 456)) | (1L << (NAME - 456)) | (1L << (NAMES - 456)) | (1L << (NCHAR - 456)) | (1L << (NEVER - 456)) | (1L << (NEXT - 456)) | (1L << (NO - 456)) | (1L << (NODEGROUP - 456)) | (1L << (NONE - 456)) | (1L << (ODBC - 456)) | (1L << (OFFLINE - 456)) | (1L << (OFFSET - 456)) | (1L << (OF - 456)) | (1L << (OJ - 456)) | (1L << (OLD_PASSWORD - 456)) | (1L << (ONE - 456)) | (1L << (ONLINE - 456)) | (1L << (ONLY - 456)) | (1L << (OPEN - 456)) | (1L << (OPTIMIZER_COSTS - 456)) | (1L << (OPTIONS - 456)) | (1L << (OWNER - 456)) | (1L << (PACK_KEYS - 456)) | (1L << (PAGE - 456)) | (1L << (PARSER - 456)) | (1L << (PARTIAL - 456)) | (1L << (PARTITIONING - 456)) | (1L << (PARTITIONS - 456)) | (1L << (PASSWORD - 456)) | (1L << (PHASE - 456)) | (1L << (PLUGIN - 456)) | (1L << (PLUGIN_DIR - 456)) | (1L << (PLUGINS - 456)) | (1L << (PORT - 456)) | (1L << (PRECEDES - 456)) | (1L << (PREPARE - 456)) | (1L << (PRESERVE - 456)) | (1L << (PREV - 456)) | (1L << (PROCESSLIST - 456)) | (1L << (PROFILE - 456)) | (1L << (PROFILES - 456)) | (1L << (PROXY - 456)) | (1L << (QUERY - 456)) | (1L << (QUICK - 456)) | (1L << (REBUILD - 456)))) != 0) || ((((_la - 520)) & ~0x3f) == 0 && ((1L << (_la - 520)) & ((1L << (RECOVER - 520)) | (1L << (REDO_BUFFER_SIZE - 520)) | (1L << (REDUNDANT - 520)) | (1L << (RELAY - 520)) | (1L << (RELAY_LOG_FILE - 520)) | (1L << (RELAY_LOG_POS - 520)) | (1L << (RELAYLOG - 520)) | (1L << (REMOVE - 520)) | (1L << (REORGANIZE - 520)) | (1L << (REPAIR - 520)) | (1L << (REPLICATE_DO_DB - 520)) | (1L << (REPLICATE_DO_TABLE - 520)) | (1L << (REPLICATE_IGNORE_DB - 520)) | (1L << (REPLICATE_IGNORE_TABLE - 520)) | (1L << (REPLICATE_REWRITE_DB - 520)) | (1L << (REPLICATE_WILD_DO_TABLE - 520)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 520)) | (1L << (REPLICATION - 520)) | (1L << (RESET - 520)) | (1L << (RESUME - 520)) | (1L << (RETURNED_SQLSTATE - 520)) | (1L << (RETURNS - 520)) | (1L << (ROLE - 520)) | (1L << (ROLLBACK - 520)) | (1L << (ROLLUP - 520)) | (1L << (ROTATE - 520)) | (1L << (ROW - 520)) | (1L << (ROWS - 520)) | (1L << (ROW_FORMAT - 520)) | (1L << (SAVEPOINT - 520)) | (1L << (SCHEDULE - 520)) | (1L << (SECURITY - 520)) | (1L << (SERVER - 520)) | (1L << (SESSION - 520)) | (1L << (SHARE - 520)) | (1L << (SHARED - 520)) | (1L << (SIGNED - 520)) | (1L << (SIMPLE - 520)) | (1L << (SLAVE - 520)) | (1L << (SLOW - 520)) | (1L << (SNAPSHOT - 520)) | (1L << (SOCKET - 520)) | (1L << (SOME - 520)) | (1L << (SONAME - 520)) | (1L << (SOUNDS - 520)) | (1L << (SOURCE - 520)) | (1L << (SQL_AFTER_GTIDS - 520)) | (1L << (SQL_AFTER_MTS_GAPS - 520)) | (1L << (SQL_BEFORE_GTIDS - 520)) | (1L << (SQL_BUFFER_RESULT - 520)) | (1L << (SQL_CACHE - 520)) | (1L << (SQL_NO_CACHE - 520)) | (1L << (SQL_THREAD - 520)) | (1L << (START - 520)) | (1L << (STARTS - 520)) | (1L << (STATS_AUTO_RECALC - 520)) | (1L << (STATS_PERSISTENT - 520)) | (1L << (STATS_SAMPLE_PAGES - 520)) | (1L << (STATUS - 520)) | (1L << (STOP - 520)) | (1L << (STORAGE - 520)) | (1L << (STRING - 520)))) != 0) || ((((_la - 584)) & ~0x3f) == 0 && ((1L << (_la - 584)) & ((1L << (SUBCLASS_ORIGIN - 584)) | (1L << (SUBJECT - 584)) | (1L << (SUBPARTITION - 584)) | (1L << (SUBPARTITIONS - 584)) | (1L << (SUSPEND - 584)) | (1L << (SWAPS - 584)) | (1L << (SWITCHES - 584)) | (1L << (TABLE_NAME - 584)) | (1L << (TABLESPACE - 584)) | (1L << (TEMPORARY - 584)) | (1L << (TEMPTABLE - 584)) | (1L << (THAN - 584)) | (1L << (TRADITIONAL - 584)) | (1L << (TRANSACTION - 584)) | (1L << (TRANSACTIONAL - 584)) | (1L << (TRIGGERS - 584)) | (1L << (TRUNCATE - 584)) | (1L << (UNDEFINED - 584)) | (1L << (UNDOFILE - 584)) | (1L << (UNDO_BUFFER_SIZE - 584)) | (1L << (UNINSTALL - 584)) | (1L << (UNKNOWN - 584)) | (1L << (UNTIL - 584)) | (1L << (UPGRADE - 584)) | (1L << (USER - 584)) | (1L << (USE_FRM - 584)) | (1L << (USER_RESOURCES - 584)) | (1L << (VALIDATION - 584)) | (1L << (VALUE - 584)) | (1L << (VARIABLES - 584)) | (1L << (VIEW - 584)) | (1L << (VISIBLE - 584)) | (1L << (WAIT - 584)) | (1L << (WARNINGS - 584)) | (1L << (WITHOUT - 584)) | (1L << (WORK - 584)) | (1L << (WRAPPER - 584)) | (1L << (X509 - 584)) | (1L << (XA - 584)) | (1L << (XML - 584)) | (1L << (INTERNAL - 584)) | (1L << (QUARTER - 584)) | (1L << (MONTH - 584)) | (1L << (DAY - 584)) | (1L << (HOUR - 584)) | (1L << (MINUTE - 584)) | (1L << (WEEK - 584)) | (1L << (SECOND - 584)) | (1L << (MICROSECOND - 584)))) != 0) || ((((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & ((1L << (AUDIT_ADMIN - 649)) | (1L << (BACKUP_ADMIN - 649)) | (1L << (BINLOG_ADMIN - 649)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 649)) | (1L << (CLONE_ADMIN - 649)) | (1L << (CONNECTION_ADMIN - 649)) | (1L << (ENCRYPTION_KEY_ADMIN - 649)) | (1L << (FIREWALL_ADMIN - 649)) | (1L << (FIREWALL_USER - 649)) | (1L << (GROUP_REPLICATION_ADMIN - 649)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 649)) | (1L << (NDB_STORED_USER - 649)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 649)) | (1L << (REPLICATION_APPLIER - 649)) | (1L << (REPLICATION_SLAVE_ADMIN - 649)) | (1L << (RESOURCE_GROUP_ADMIN - 649)) | (1L << (RESOURCE_GROUP_USER - 649)) | (1L << (ROLE_ADMIN - 649)) | (1L << (SESSION_VARIABLES_ADMIN - 649)) | (1L << (SET_USER_ID - 649)) | (1L << (SHOW_ROUTINE - 649)) | (1L << (SYSTEM_VARIABLES_ADMIN - 649)) | (1L << (TABLE_ENCRYPTION_ADMIN - 649)) | (1L << (VERSION_TOKEN_ADMIN - 649)) | (1L << (XA_RECOVER_ADMIN - 649)))) != 0) || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & ((1L << (ARCHIVE - 720)) | (1L << (BLACKHOLE - 720)) | (1L << (CSV - 720)) | (1L << (FEDERATED - 720)) | (1L << (INNODB - 720)) | (1L << (MEMORY - 720)) | (1L << (MRG_MYISAM - 720)) | (1L << (MYISAM - 720)) | (1L << (NDB - 720)) | (1L << (NDBCLUSTER - 720)) | (1L << (PERFORMANCE_SCHEMA - 720)) | (1L << (TOKUDB - 720)) | (1L << (GEOMETRYCOLLECTION - 720)) | (1L << (LINESTRING - 720)) | (1L << (MULTILINESTRING - 720)) | (1L << (MULTIPOINT - 720)) | (1L << (MULTIPOLYGON - 720)) | (1L << (POINT - 720)) | (1L << (POLYGON - 720)) | (1L << (ABS - 720)) | (1L << (ACOS - 720)) | (1L << (ADDDATE - 720)) | (1L << (ADDTIME - 720)) | (1L << (AES_DECRYPT - 720)) | (1L << (AES_ENCRYPT - 720)) | (1L << (AREA - 720)) | (1L << (ASBINARY - 720)) | (1L << (ASIN - 720)) | (1L << (ASTEXT - 720)) | (1L << (ASWKB - 720)) | (1L << (ASWKT - 720)) | (1L << (ASYMMETRIC_DECRYPT - 720)) | (1L << (ASYMMETRIC_DERIVE - 720)) | (1L << (ASYMMETRIC_ENCRYPT - 720)) | (1L << (ASYMMETRIC_SIGN - 720)) | (1L << (ASYMMETRIC_VERIFY - 720)) | (1L << (ATAN - 720)) | (1L << (ATAN2 - 720)) | (1L << (BENCHMARK - 720)) | (1L << (BIN - 720)) | (1L << (BIT_COUNT - 720)) | (1L << (BIT_LENGTH - 720)) | (1L << (BUFFER - 720)) | (1L << (CATALOG_NAME - 720)) | (1L << (CEIL - 720)) | (1L << (CEILING - 720)) | (1L << (CENTROID - 720)) | (1L << (CHARACTER_LENGTH - 720)) | (1L << (CHARSET - 720)) | (1L << (CHAR_LENGTH - 720)) | (1L << (COERCIBILITY - 720)) | (1L << (COLLATION - 720)) | (1L << (COMPRESS - 720)) | (1L << (CONCAT - 720)) | (1L << (CONCAT_WS - 720)) | (1L << (CONNECTION_ID - 720)) | (1L << (CONV - 720)) | (1L << (CONVERT_TZ - 720)))) != 0) || ((((_la - 784)) & ~0x3f) == 0 && ((1L << (_la - 784)) & ((1L << (COS - 784)) | (1L << (COT - 784)) | (1L << (CRC32 - 784)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 784)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 784)) | (1L << (CREATE_DH_PARAMETERS - 784)) | (1L << (CREATE_DIGEST - 784)) | (1L << (CROSSES - 784)) | (1L << (DATEDIFF - 784)) | (1L << (DATE_FORMAT - 784)) | (1L << (DAYNAME - 784)) | (1L << (DAYOFMONTH - 784)) | (1L << (DAYOFWEEK - 784)) | (1L << (DAYOFYEAR - 784)) | (1L << (DECODE - 784)) | (1L << (DEGREES - 784)) | (1L << (DES_DECRYPT - 784)) | (1L << (DES_ENCRYPT - 784)) | (1L << (DIMENSION - 784)) | (1L << (DISJOINT - 784)) | (1L << (ELT - 784)) | (1L << (ENCODE - 784)) | (1L << (ENCRYPT - 784)) | (1L << (ENDPOINT - 784)) | (1L << (ENVELOPE - 784)) | (1L << (EQUALS - 784)) | (1L << (EXP - 784)) | (1L << (EXPORT_SET - 784)) | (1L << (EXTERIORRING - 784)) | (1L << (EXTRACTVALUE - 784)) | (1L << (FIELD - 784)) | (1L << (FIND_IN_SET - 784)) | (1L << (FLOOR - 784)) | (1L << (FORMAT - 784)) | (1L << (FOUND_ROWS - 784)) | (1L << (FROM_BASE64 - 784)) | (1L << (FROM_DAYS - 784)) | (1L << (FROM_UNIXTIME - 784)) | (1L << (GEOMCOLLFROMTEXT - 784)) | (1L << (GEOMCOLLFROMWKB - 784)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 784)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 784)) | (1L << (GEOMETRYFROMTEXT - 784)) | (1L << (GEOMETRYFROMWKB - 784)) | (1L << (GEOMETRYN - 784)) | (1L << (GEOMETRYTYPE - 784)) | (1L << (GEOMFROMTEXT - 784)) | (1L << (GEOMFROMWKB - 784)) | (1L << (GET_FORMAT - 784)) | (1L << (GET_LOCK - 784)) | (1L << (GLENGTH - 784)) | (1L << (GREATEST - 784)) | (1L << (GTID_SUBSET - 784)) | (1L << (GTID_SUBTRACT - 784)) | (1L << (HEX - 784)) | (1L << (IFNULL - 784)) | (1L << (INET6_ATON - 784)) | (1L << (INET6_NTOA - 784)) | (1L << (INET_ATON - 784)) | (1L << (INET_NTOA - 784)) | (1L << (INSTR - 784)) | (1L << (INTERIORRINGN - 784)) | (1L << (INTERSECTS - 784)) | (1L << (ISCLOSED - 784)))) != 0) || ((((_la - 848)) & ~0x3f) == 0 && ((1L << (_la - 848)) & ((1L << (ISEMPTY - 848)) | (1L << (ISNULL - 848)) | (1L << (ISSIMPLE - 848)) | (1L << (IS_FREE_LOCK - 848)) | (1L << (IS_IPV4 - 848)) | (1L << (IS_IPV4_COMPAT - 848)) | (1L << (IS_IPV4_MAPPED - 848)) | (1L << (IS_IPV6 - 848)) | (1L << (IS_USED_LOCK - 848)) | (1L << (LAST_INSERT_ID - 848)) | (1L << (LCASE - 848)) | (1L << (LEAST - 848)) | (1L << (LENGTH - 848)) | (1L << (LINEFROMTEXT - 848)) | (1L << (LINEFROMWKB - 848)) | (1L << (LINESTRINGFROMTEXT - 848)) | (1L << (LINESTRINGFROMWKB - 848)) | (1L << (LN - 848)) | (1L << (LOAD_FILE - 848)) | (1L << (LOCATE - 848)) | (1L << (LOG - 848)) | (1L << (LOG10 - 848)) | (1L << (LOG2 - 848)) | (1L << (LOWER - 848)) | (1L << (LPAD - 848)) | (1L << (LTRIM - 848)) | (1L << (MAKEDATE - 848)) | (1L << (MAKETIME - 848)) | (1L << (MAKE_SET - 848)) | (1L << (MASTER_POS_WAIT - 848)) | (1L << (MBRCONTAINS - 848)) | (1L << (MBRDISJOINT - 848)) | (1L << (MBREQUAL - 848)) | (1L << (MBRINTERSECTS - 848)) | (1L << (MBROVERLAPS - 848)) | (1L << (MBRTOUCHES - 848)) | (1L << (MBRWITHIN - 848)) | (1L << (MD5 - 848)) | (1L << (MLINEFROMTEXT - 848)) | (1L << (MLINEFROMWKB - 848)) | (1L << (MONTHNAME - 848)) | (1L << (MPOINTFROMTEXT - 848)) | (1L << (MPOINTFROMWKB - 848)) | (1L << (MPOLYFROMTEXT - 848)) | (1L << (MPOLYFROMWKB - 848)) | (1L << (MULTILINESTRINGFROMTEXT - 848)) | (1L << (MULTILINESTRINGFROMWKB - 848)) | (1L << (MULTIPOINTFROMTEXT - 848)) | (1L << (MULTIPOINTFROMWKB - 848)) | (1L << (MULTIPOLYGONFROMTEXT - 848)) | (1L << (MULTIPOLYGONFROMWKB - 848)) | (1L << (NAME_CONST - 848)) | (1L << (NULLIF - 848)) | (1L << (NUMGEOMETRIES - 848)) | (1L << (NUMINTERIORRINGS - 848)) | (1L << (NUMPOINTS - 848)) | (1L << (OCT - 848)) | (1L << (OCTET_LENGTH - 848)) | (1L << (ORD - 848)) | (1L << (OVERLAPS - 848)) | (1L << (PERIOD_ADD - 848)) | (1L << (PERIOD_DIFF - 848)) | (1L << (PI - 848)) | (1L << (POINTFROMTEXT - 848)))) != 0) || ((((_la - 912)) & ~0x3f) == 0 && ((1L << (_la - 912)) & ((1L << (POINTFROMWKB - 912)) | (1L << (POINTN - 912)) | (1L << (POLYFROMTEXT - 912)) | (1L << (POLYFROMWKB - 912)) | (1L << (POLYGONFROMTEXT - 912)) | (1L << (POLYGONFROMWKB - 912)) | (1L << (POW - 912)) | (1L << (POWER - 912)) | (1L << (QUOTE - 912)) | (1L << (RADIANS - 912)) | (1L << (RAND - 912)) | (1L << (RANDOM_BYTES - 912)) | (1L << (RELEASE_LOCK - 912)) | (1L << (REVERSE - 912)) | (1L << (ROUND - 912)) | (1L << (ROW_COUNT - 912)) | (1L << (RPAD - 912)) | (1L << (RTRIM - 912)) | (1L << (SEC_TO_TIME - 912)) | (1L << (SESSION_USER - 912)) | (1L << (SHA - 912)) | (1L << (SHA1 - 912)) | (1L << (SHA2 - 912)) | (1L << (SCHEMA_NAME - 912)) | (1L << (SIGN - 912)) | (1L << (SIN - 912)) | (1L << (SLEEP - 912)) | (1L << (SOUNDEX - 912)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 912)) | (1L << (SQRT - 912)) | (1L << (SRID - 912)) | (1L << (STARTPOINT - 912)) | (1L << (STRCMP - 912)) | (1L << (STR_TO_DATE - 912)) | (1L << (ST_AREA - 912)) | (1L << (ST_ASBINARY - 912)) | (1L << (ST_ASTEXT - 912)) | (1L << (ST_ASWKB - 912)) | (1L << (ST_ASWKT - 912)) | (1L << (ST_BUFFER - 912)) | (1L << (ST_CENTROID - 912)) | (1L << (ST_CONTAINS - 912)) | (1L << (ST_CROSSES - 912)) | (1L << (ST_DIFFERENCE - 912)) | (1L << (ST_DIMENSION - 912)) | (1L << (ST_DISJOINT - 912)) | (1L << (ST_DISTANCE - 912)) | (1L << (ST_ENDPOINT - 912)) | (1L << (ST_ENVELOPE - 912)) | (1L << (ST_EQUALS - 912)) | (1L << (ST_EXTERIORRING - 912)) | (1L << (ST_GEOMCOLLFROMTEXT - 912)) | (1L << (ST_GEOMCOLLFROMTXT - 912)) | (1L << (ST_GEOMCOLLFROMWKB - 912)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 912)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 912)) | (1L << (ST_GEOMETRYFROMTEXT - 912)) | (1L << (ST_GEOMETRYFROMWKB - 912)) | (1L << (ST_GEOMETRYN - 912)) | (1L << (ST_GEOMETRYTYPE - 912)) | (1L << (ST_GEOMFROMTEXT - 912)) | (1L << (ST_GEOMFROMWKB - 912)) | (1L << (ST_INTERIORRINGN - 912)) | (1L << (ST_INTERSECTION - 912)))) != 0) || ((((_la - 976)) & ~0x3f) == 0 && ((1L << (_la - 976)) & ((1L << (ST_INTERSECTS - 976)) | (1L << (ST_ISCLOSED - 976)) | (1L << (ST_ISEMPTY - 976)) | (1L << (ST_ISSIMPLE - 976)) | (1L << (ST_LINEFROMTEXT - 976)) | (1L << (ST_LINEFROMWKB - 976)) | (1L << (ST_LINESTRINGFROMTEXT - 976)) | (1L << (ST_LINESTRINGFROMWKB - 976)) | (1L << (ST_NUMGEOMETRIES - 976)) | (1L << (ST_NUMINTERIORRING - 976)) | (1L << (ST_NUMINTERIORRINGS - 976)) | (1L << (ST_NUMPOINTS - 976)) | (1L << (ST_OVERLAPS - 976)) | (1L << (ST_POINTFROMTEXT - 976)) | (1L << (ST_POINTFROMWKB - 976)) | (1L << (ST_POINTN - 976)) | (1L << (ST_POLYFROMTEXT - 976)) | (1L << (ST_POLYFROMWKB - 976)) | (1L << (ST_POLYGONFROMTEXT - 976)) | (1L << (ST_POLYGONFROMWKB - 976)) | (1L << (ST_SRID - 976)) | (1L << (ST_STARTPOINT - 976)) | (1L << (ST_SYMDIFFERENCE - 976)) | (1L << (ST_TOUCHES - 976)) | (1L << (ST_UNION - 976)) | (1L << (ST_WITHIN - 976)) | (1L << (ST_X - 976)) | (1L << (ST_Y - 976)) | (1L << (SUBDATE - 976)) | (1L << (SUBSTRING_INDEX - 976)) | (1L << (SUBTIME - 976)) | (1L << (SYSTEM_USER - 976)) | (1L << (TAN - 976)) | (1L << (TIMEDIFF - 976)) | (1L << (TIMESTAMPADD - 976)) | (1L << (TIMESTAMPDIFF - 976)) | (1L << (TIME_FORMAT - 976)) | (1L << (TIME_TO_SEC - 976)) | (1L << (TOUCHES - 976)) | (1L << (TO_BASE64 - 976)) | (1L << (TO_DAYS - 976)) | (1L << (TO_SECONDS - 976)) | (1L << (UCASE - 976)) | (1L << (UNCOMPRESS - 976)) | (1L << (UNCOMPRESSED_LENGTH - 976)) | (1L << (UNHEX - 976)) | (1L << (UNIX_TIMESTAMP - 976)) | (1L << (UPDATEXML - 976)) | (1L << (UPPER - 976)) | (1L << (UUID - 976)) | (1L << (UUID_SHORT - 976)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 976)) | (1L << (VERSION - 976)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 976)) | (1L << (WEEKDAY - 976)) | (1L << (WEEKOFYEAR - 976)) | (1L << (WEIGHT_STRING - 976)) | (1L << (WITHIN - 976)) | (1L << (YEARWEEK - 976)) | (1L << (Y_FUNCTION - 976)) | (1L << (X_FUNCTION - 976)))) != 0) || ((((_la - 1053)) & ~0x3f) == 0 && ((1L << (_la - 1053)) & ((1L << (MOD - 1053)) | (1L << (STRING_LITERAL - 1053)) | (1L << (ID - 1053)) | (1L << (REVERSE_QUOTE_ID - 1053)) | (1L << (OPTIONAL - 1053)))) != 0)) {
					{
					setState(240);
					((ForeignKeyTableConstraintContext)_localctx).index = identifier();
					}
				}

				setState(243);
				indexColumnNames();
				setState(244);
				referenceDefinition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexColumnNamesContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<IndexColumnNameContext> indexColumnName() {
			return getRuleContexts(IndexColumnNameContext.class);
		}
		public IndexColumnNameContext indexColumnName(int i) {
			return getRuleContext(IndexColumnNameContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public IndexColumnNamesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexColumnNames; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIndexColumnNames(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIndexColumnNames(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIndexColumnNames(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexColumnNamesContext indexColumnNames() throws RecognitionException {
		IndexColumnNamesContext _localctx = new IndexColumnNamesContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_indexColumnNames);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(248);
			match(LR_BRACKET);
			setState(249);
			indexColumnName();
			setState(254);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(250);
				match(COMMA);
				setState(251);
				indexColumnName();
				}
				}
				setState(256);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(257);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexOptionContext extends ParserRuleContext {
		public TerminalNode KEY_BLOCK_SIZE() { return getToken(MySqlParser.KEY_BLOCK_SIZE, 0); }
		public FileSizeLiteralContext fileSizeLiteral() {
			return getRuleContext(FileSizeLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public TerminalNode PARSER() { return getToken(MySqlParser.PARSER, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode INVISIBLE() { return getToken(MySqlParser.INVISIBLE, 0); }
		public TerminalNode VISIBLE() { return getToken(MySqlParser.VISIBLE, 0); }
		public IndexOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIndexOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIndexOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIndexOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexOptionContext indexOption() throws RecognitionException {
		IndexOptionContext _localctx = new IndexOptionContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_indexOption);
		int _la;
		try {
			setState(272);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KEY_BLOCK_SIZE:
				enterOuterAlt(_localctx, 1);
				{
				setState(259);
				match(KEY_BLOCK_SIZE);
				setState(261);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(260);
					match(EQUAL_SYMBOL);
					}
				}

				setState(263);
				fileSizeLiteral();
				}
				break;
			case USING:
				enterOuterAlt(_localctx, 2);
				{
				setState(264);
				indexType();
				}
				break;
			case WITH:
				enterOuterAlt(_localctx, 3);
				{
				setState(265);
				match(WITH);
				setState(266);
				match(PARSER);
				setState(267);
				identifier();
				}
				break;
			case COMMENT:
				enterOuterAlt(_localctx, 4);
				{
				setState(268);
				match(COMMENT);
				setState(269);
				match(STRING_LITERAL);
				}
				break;
			case INVISIBLE:
				enterOuterAlt(_localctx, 5);
				{
				setState(270);
				match(INVISIBLE);
				}
				break;
			case VISIBLE:
				enterOuterAlt(_localctx, 6);
				{
				setState(271);
				match(VISIBLE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReferenceDefinitionContext extends ParserRuleContext {
		public Token matchType;
		public TerminalNode REFERENCES() { return getToken(MySqlParser.REFERENCES, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode MATCH() { return getToken(MySqlParser.MATCH, 0); }
		public ReferenceActionContext referenceAction() {
			return getRuleContext(ReferenceActionContext.class,0);
		}
		public TerminalNode FULL() { return getToken(MySqlParser.FULL, 0); }
		public TerminalNode PARTIAL() { return getToken(MySqlParser.PARTIAL, 0); }
		public TerminalNode SIMPLE() { return getToken(MySqlParser.SIMPLE, 0); }
		public ReferenceDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referenceDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterReferenceDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitReferenceDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitReferenceDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReferenceDefinitionContext referenceDefinition() throws RecognitionException {
		ReferenceDefinitionContext _localctx = new ReferenceDefinitionContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_referenceDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(274);
			match(REFERENCES);
			setState(275);
			tableName();
			setState(277);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(276);
				indexColumnNames();
				}
			}

			setState(281);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MATCH) {
				{
				setState(279);
				match(MATCH);
				setState(280);
				((ReferenceDefinitionContext)_localctx).matchType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FULL || _la==PARTIAL || _la==SIMPLE) ) {
					((ReferenceDefinitionContext)_localctx).matchType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(284);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(283);
				referenceAction();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReferenceActionContext extends ParserRuleContext {
		public ReferenceControlTypeContext onDelete;
		public ReferenceControlTypeContext onUpdate;
		public List<TerminalNode> ON() { return getTokens(MySqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(MySqlParser.ON, i);
		}
		public TerminalNode DELETE() { return getToken(MySqlParser.DELETE, 0); }
		public List<ReferenceControlTypeContext> referenceControlType() {
			return getRuleContexts(ReferenceControlTypeContext.class);
		}
		public ReferenceControlTypeContext referenceControlType(int i) {
			return getRuleContext(ReferenceControlTypeContext.class,i);
		}
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public ReferenceActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referenceAction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterReferenceAction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitReferenceAction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitReferenceAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReferenceActionContext referenceAction() throws RecognitionException {
		ReferenceActionContext _localctx = new ReferenceActionContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_referenceAction);
		int _la;
		try {
			setState(302);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,45,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(286);
				match(ON);
				setState(287);
				match(DELETE);
				setState(288);
				((ReferenceActionContext)_localctx).onDelete = referenceControlType();
				setState(292);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(289);
					match(ON);
					setState(290);
					match(UPDATE);
					setState(291);
					((ReferenceActionContext)_localctx).onUpdate = referenceControlType();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(294);
				match(ON);
				setState(295);
				match(UPDATE);
				setState(296);
				((ReferenceActionContext)_localctx).onUpdate = referenceControlType();
				setState(300);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(297);
					match(ON);
					setState(298);
					match(DELETE);
					setState(299);
					((ReferenceActionContext)_localctx).onDelete = referenceControlType();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnDefinitionContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public List<ColumnConstraintContext> columnConstraint() {
			return getRuleContexts(ColumnConstraintContext.class);
		}
		public ColumnConstraintContext columnConstraint(int i) {
			return getRuleContext(ColumnConstraintContext.class,i);
		}
		public ColumnDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterColumnDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitColumnDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitColumnDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnDefinitionContext columnDefinition() throws RecognitionException {
		ColumnDefinitionContext _localctx = new ColumnDefinitionContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_columnDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(304);
			identifier();
			setState(305);
			dataType();
			setState(309);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 24)) & ~0x3f) == 0 && ((1L << (_la - 24)) & ((1L << (COLLATE - 24)) | (1L << (DEFAULT - 24)) | (1L << (KEY - 24)))) != 0) || ((((_la - 103)) & ~0x3f) == 0 && ((1L << (_la - 103)) & ((1L << (NOT - 103)) | (1L << (NULL_LITERAL - 103)) | (1L << (ON - 103)) | (1L << (PRIMARY - 103)) | (1L << (UNIQUE - 103)))) != 0) || _la==AUTO_INCREMENT || _la==COMMENT || _la==NULL_SPEC_LITERAL) {
				{
				{
				setState(306);
				columnConstraint();
				}
				}
				setState(311);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexColumnNameContext extends ParserRuleContext {
		public Token sortType;
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode ASC() { return getToken(MySqlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(MySqlParser.DESC, 0); }
		public IndexColumnNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexColumnName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIndexColumnName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIndexColumnName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIndexColumnName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexColumnNameContext indexColumnName() throws RecognitionException {
		IndexColumnNameContext _localctx = new IndexColumnNameContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_indexColumnName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(314);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,47,_ctx) ) {
			case 1:
				{
				setState(312);
				identifier();
				}
				break;
			case 2:
				{
				setState(313);
				match(STRING_LITERAL);
				}
				break;
			}
			setState(320);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(316);
				match(LR_BRACKET);
				setState(317);
				decimalLiteral();
				setState(318);
				match(RR_BRACKET);
				}
			}

			setState(323);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(322);
				((IndexColumnNameContext)_localctx).sortType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
					((IndexColumnNameContext)_localctx).sortType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharsetNameContext extends ParserRuleContext {
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public CharsetNameBaseContext charsetNameBase() {
			return getRuleContext(CharsetNameBaseContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode CHARSET_REVERSE_QOUTE_STRING() { return getToken(MySqlParser.CHARSET_REVERSE_QOUTE_STRING, 0); }
		public CharsetNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_charsetName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCharsetName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCharsetName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCharsetName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharsetNameContext charsetName() throws RecognitionException {
		CharsetNameContext _localctx = new CharsetNameContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_charsetName);
		try {
			setState(329);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BINARY:
				enterOuterAlt(_localctx, 1);
				{
				setState(325);
				match(BINARY);
				}
				break;
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
				enterOuterAlt(_localctx, 2);
				{
				setState(326);
				charsetNameBase();
				}
				break;
			case STRING_LITERAL:
				enterOuterAlt(_localctx, 3);
				{
				setState(327);
				match(STRING_LITERAL);
				}
				break;
			case CHARSET_REVERSE_QOUTE_STRING:
				enterOuterAlt(_localctx, 4);
				{
				setState(328);
				match(CHARSET_REVERSE_QOUTE_STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnConstraintContext extends ParserRuleContext {
		public ColumnConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnConstraint; }
	 
		public ColumnConstraintContext() { }
		public void copyFrom(ColumnConstraintContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class CollateColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public CollateColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCollateColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCollateColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCollateColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AutoIncrementColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode AUTO_INCREMENT() { return getToken(MySqlParser.AUTO_INCREMENT, 0); }
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public CurrentTimestampContext currentTimestamp() {
			return getRuleContext(CurrentTimestampContext.class,0);
		}
		public AutoIncrementColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAutoIncrementColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAutoIncrementColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAutoIncrementColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CommentColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public CommentColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCommentColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCommentColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCommentColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PrimaryKeyColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public TerminalNode PRIMARY() { return getToken(MySqlParser.PRIMARY, 0); }
		public PrimaryKeyColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPrimaryKeyColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPrimaryKeyColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPrimaryKeyColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UniqueKeyColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode UNIQUE() { return getToken(MySqlParser.UNIQUE, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public UniqueKeyColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUniqueKeyColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUniqueKeyColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUniqueKeyColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NullColumnConstraintContext extends ColumnConstraintContext {
		public NullNotnullContext nullNotnull() {
			return getRuleContext(NullNotnullContext.class,0);
		}
		public NullColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterNullColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitNullColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitNullColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DefaultColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public DefaultValueContext defaultValue() {
			return getRuleContext(DefaultValueContext.class,0);
		}
		public DefaultColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDefaultColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDefaultColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDefaultColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnConstraintContext columnConstraint() throws RecognitionException {
		ColumnConstraintContext _localctx = new ColumnConstraintContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_columnConstraint);
		int _la;
		try {
			setState(352);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOT:
			case NULL_LITERAL:
			case NULL_SPEC_LITERAL:
				_localctx = new NullColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(331);
				nullNotnull();
				}
				break;
			case DEFAULT:
				_localctx = new DefaultColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(332);
				match(DEFAULT);
				setState(333);
				defaultValue();
				}
				break;
			case ON:
			case AUTO_INCREMENT:
				_localctx = new AutoIncrementColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(338);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case AUTO_INCREMENT:
					{
					setState(334);
					match(AUTO_INCREMENT);
					}
					break;
				case ON:
					{
					setState(335);
					match(ON);
					setState(336);
					match(UPDATE);
					setState(337);
					currentTimestamp();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case KEY:
			case PRIMARY:
				_localctx = new PrimaryKeyColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(341);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRIMARY) {
					{
					setState(340);
					match(PRIMARY);
					}
				}

				setState(343);
				match(KEY);
				}
				break;
			case UNIQUE:
				_localctx = new UniqueKeyColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(344);
				match(UNIQUE);
				setState(346);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,53,_ctx) ) {
				case 1:
					{
					setState(345);
					match(KEY);
					}
					break;
				}
				}
				break;
			case COMMENT:
				_localctx = new CommentColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(348);
				match(COMMENT);
				setState(349);
				match(STRING_LITERAL);
				}
				break;
			case COLLATE:
				_localctx = new CollateColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(350);
				match(COLLATE);
				setState(351);
				collationName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefaultValueContext extends ParserRuleContext {
		public TerminalNode NULL_LITERAL() { return getToken(MySqlParser.NULL_LITERAL, 0); }
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public List<CurrentTimestampContext> currentTimestamp() {
			return getRuleContexts(CurrentTimestampContext.class);
		}
		public CurrentTimestampContext currentTimestamp(int i) {
			return getRuleContext(CurrentTimestampContext.class,i);
		}
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public UnaryOperatorContext unaryOperator() {
			return getRuleContext(UnaryOperatorContext.class,0);
		}
		public DefaultValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defaultValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDefaultValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDefaultValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDefaultValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefaultValueContext defaultValue() throws RecognitionException {
		DefaultValueContext _localctx = new DefaultValueContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_defaultValue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(360);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,56,_ctx) ) {
			case 1:
				{
				setState(354);
				match(NULL_LITERAL);
				}
				break;
			case 2:
				{
				setState(356);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,55,_ctx) ) {
				case 1:
					{
					setState(355);
					unaryOperator();
					}
					break;
				}
				setState(358);
				constant();
				}
				break;
			case 3:
				{
				setState(359);
				currentTimestamp();
				}
				break;
			}
			setState(365);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,57,_ctx) ) {
			case 1:
				{
				setState(362);
				match(ON);
				setState(363);
				match(UPDATE);
				setState(364);
				currentTimestamp();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnaryOperatorContext extends ParserRuleContext {
		public TerminalNode EXCLAMATION_SYMBOL() { return getToken(MySqlParser.EXCLAMATION_SYMBOL, 0); }
		public TerminalNode BIT_NOT_OP() { return getToken(MySqlParser.BIT_NOT_OP, 0); }
		public TerminalNode PLUS() { return getToken(MySqlParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(MySqlParser.MINUS, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public UnaryOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unaryOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUnaryOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUnaryOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUnaryOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnaryOperatorContext unaryOperator() throws RecognitionException {
		UnaryOperatorContext _localctx = new UnaryOperatorContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_unaryOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(367);
			_la = _input.LA(1);
			if ( !(_la==NOT || ((((_la - 1049)) & ~0x3f) == 0 && ((1L << (_la - 1049)) & ((1L << (PLUS - 1049)) | (1L << (MINUS - 1049)) | (1L << (EXCLAMATION_SYMBOL - 1049)) | (1L << (BIT_NOT_OP - 1049)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstantContext extends ParserRuleContext {
		public Token nullLiteral;
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode MINUS() { return getToken(MySqlParser.MINUS, 0); }
		public HexadecimalLiteralContext hexadecimalLiteral() {
			return getRuleContext(HexadecimalLiteralContext.class,0);
		}
		public BooleanLiteralContext booleanLiteral() {
			return getRuleContext(BooleanLiteralContext.class,0);
		}
		public TerminalNode REAL_LITERAL() { return getToken(MySqlParser.REAL_LITERAL, 0); }
		public TerminalNode BIT_STRING() { return getToken(MySqlParser.BIT_STRING, 0); }
		public TerminalNode NULL_LITERAL() { return getToken(MySqlParser.NULL_LITERAL, 0); }
		public TerminalNode NULL_SPEC_LITERAL() { return getToken(MySqlParser.NULL_SPEC_LITERAL, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constant; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterConstant(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitConstant(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitConstant(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstantContext constant() throws RecognitionException {
		ConstantContext _localctx = new ConstantContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_constant);
		int _la;
		try {
			setState(381);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,59,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(369);
				stringLiteral();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(370);
				decimalLiteral();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(371);
				match(MINUS);
				setState(372);
				decimalLiteral();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(373);
				hexadecimalLiteral();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(374);
				booleanLiteral();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(375);
				match(REAL_LITERAL);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(376);
				match(BIT_STRING);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(378);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(377);
					match(NOT);
					}
				}

				setState(380);
				((ConstantContext)_localctx).nullLiteral = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NULL_LITERAL || _la==NULL_SPEC_LITERAL) ) {
					((ConstantContext)_localctx).nullLiteral = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StringLiteralContext extends ParserRuleContext {
		public List<TerminalNode> STRING_LITERAL() { return getTokens(MySqlParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(MySqlParser.STRING_LITERAL, i);
		}
		public TerminalNode START_NATIONAL_STRING_LITERAL() { return getToken(MySqlParser.START_NATIONAL_STRING_LITERAL, 0); }
		public TerminalNode STRING_CHARSET_NAME() { return getToken(MySqlParser.STRING_CHARSET_NAME, 0); }
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public StringLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stringLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterStringLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitStringLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitStringLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StringLiteralContext stringLiteral() throws RecognitionException {
		StringLiteralContext _localctx = new StringLiteralContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_stringLiteral);
		int _la;
		try {
			setState(406);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,66,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(388);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case STRING_LITERAL:
				case STRING_CHARSET_NAME:
					{
					setState(384);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==STRING_CHARSET_NAME) {
						{
						setState(383);
						match(STRING_CHARSET_NAME);
						}
					}

					setState(386);
					match(STRING_LITERAL);
					}
					break;
				case START_NATIONAL_STRING_LITERAL:
					{
					setState(387);
					match(START_NATIONAL_STRING_LITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(391); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(390);
					match(STRING_LITERAL);
					}
					}
					setState(393); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==STRING_LITERAL );
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(400);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case STRING_LITERAL:
				case STRING_CHARSET_NAME:
					{
					setState(396);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==STRING_CHARSET_NAME) {
						{
						setState(395);
						match(STRING_CHARSET_NAME);
						}
					}

					setState(398);
					match(STRING_LITERAL);
					}
					break;
				case START_NATIONAL_STRING_LITERAL:
					{
					setState(399);
					match(START_NATIONAL_STRING_LITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(404);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,65,_ctx) ) {
				case 1:
					{
					setState(402);
					match(COLLATE);
					setState(403);
					collationName();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CurrentTimestampContext extends ParserRuleContext {
		public TerminalNode NOW() { return getToken(MySqlParser.NOW, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(MySqlParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode LOCALTIME() { return getToken(MySqlParser.LOCALTIME, 0); }
		public TerminalNode LOCALTIMESTAMP() { return getToken(MySqlParser.LOCALTIMESTAMP, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public CurrentTimestampContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_currentTimestamp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCurrentTimestamp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCurrentTimestamp(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCurrentTimestamp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CurrentTimestampContext currentTimestamp() throws RecognitionException {
		CurrentTimestampContext _localctx = new CurrentTimestampContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_currentTimestamp);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(422);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case LOCALTIMESTAMP:
				{
				setState(408);
				_la = _input.LA(1);
				if ( !(((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & ((1L << (CURRENT_TIMESTAMP - 284)) | (1L << (LOCALTIME - 284)) | (1L << (LOCALTIMESTAMP - 284)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(414);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(409);
					match(LR_BRACKET);
					setState(411);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 1068)) & ~0x3f) == 0 && ((1L << (_la - 1068)) & ((1L << (ZERO_DECIMAL - 1068)) | (1L << (ONE_DECIMAL - 1068)) | (1L << (TWO_DECIMAL - 1068)) | (1L << (DECIMAL_LITERAL - 1068)))) != 0)) {
						{
						setState(410);
						decimalLiteral();
						}
					}

					setState(413);
					match(RR_BRACKET);
					}
				}

				}
				break;
			case NOW:
				{
				setState(416);
				match(NOW);
				setState(417);
				match(LR_BRACKET);
				setState(419);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 1068)) & ~0x3f) == 0 && ((1L << (_la - 1068)) & ((1L << (ZERO_DECIMAL - 1068)) | (1L << (ONE_DECIMAL - 1068)) | (1L << (TWO_DECIMAL - 1068)) | (1L << (DECIMAL_LITERAL - 1068)))) != 0)) {
					{
					setState(418);
					decimalLiteral();
					}
				}

				setState(421);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IfNotExistsContext extends ParserRuleContext {
		public TerminalNode IF() { return getToken(MySqlParser.IF, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(MySqlParser.EXISTS, 0); }
		public IfNotExistsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifNotExists; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIfNotExists(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIfNotExists(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIfNotExists(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IfNotExistsContext ifNotExists() throws RecognitionException {
		IfNotExistsContext _localctx = new IfNotExistsContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_ifNotExists);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(424);
			match(IF);
			setState(425);
			match(NOT);
			setState(426);
			match(EXISTS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataTypeContext extends ParserRuleContext {
		public DataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataType; }
	 
		public DataTypeContext() { }
		public void copyFrom(DataTypeContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SpatialDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode GEOMETRYCOLLECTION() { return getToken(MySqlParser.GEOMETRYCOLLECTION, 0); }
		public TerminalNode GEOMCOLLECTION() { return getToken(MySqlParser.GEOMCOLLECTION, 0); }
		public TerminalNode LINESTRING() { return getToken(MySqlParser.LINESTRING, 0); }
		public TerminalNode MULTILINESTRING() { return getToken(MySqlParser.MULTILINESTRING, 0); }
		public TerminalNode MULTIPOINT() { return getToken(MySqlParser.MULTIPOINT, 0); }
		public TerminalNode MULTIPOLYGON() { return getToken(MySqlParser.MULTIPOLYGON, 0); }
		public TerminalNode POINT() { return getToken(MySqlParser.POINT, 0); }
		public TerminalNode POLYGON() { return getToken(MySqlParser.POLYGON, 0); }
		public TerminalNode JSON() { return getToken(MySqlParser.JSON, 0); }
		public TerminalNode GEOMETRY() { return getToken(MySqlParser.GEOMETRY, 0); }
		public SpatialDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSpatialDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSpatialDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSpatialDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LongVarbinaryDataTypeContext extends DataTypeContext {
		public TerminalNode LONG() { return getToken(MySqlParser.LONG, 0); }
		public TerminalNode VARBINARY() { return getToken(MySqlParser.VARBINARY, 0); }
		public LongVarbinaryDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLongVarbinaryDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLongVarbinaryDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLongVarbinaryDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CollectionDataTypeContext extends DataTypeContext {
		public Token typeName;
		public CollectionOptionsContext collectionOptions() {
			return getRuleContext(CollectionOptionsContext.class,0);
		}
		public TerminalNode ENUM() { return getToken(MySqlParser.ENUM, 0); }
		public List<TerminalNode> SET() { return getTokens(MySqlParser.SET); }
		public TerminalNode SET(int i) {
			return getToken(MySqlParser.SET, i);
		}
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public TerminalNode CHARSET() { return getToken(MySqlParser.CHARSET, 0); }
		public CollectionDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCollectionDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCollectionDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCollectionDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NationalVaryingStringDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode NATIONAL() { return getToken(MySqlParser.NATIONAL, 0); }
		public TerminalNode VARYING() { return getToken(MySqlParser.VARYING, 0); }
		public TerminalNode CHAR() { return getToken(MySqlParser.CHAR, 0); }
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public LengthOneDimensionContext lengthOneDimension() {
			return getRuleContext(LengthOneDimensionContext.class,0);
		}
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public NationalVaryingStringDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterNationalVaryingStringDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitNationalVaryingStringDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitNationalVaryingStringDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DimensionDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode TINYINT() { return getToken(MySqlParser.TINYINT, 0); }
		public TerminalNode SMALLINT() { return getToken(MySqlParser.SMALLINT, 0); }
		public TerminalNode MEDIUMINT() { return getToken(MySqlParser.MEDIUMINT, 0); }
		public TerminalNode INT() { return getToken(MySqlParser.INT, 0); }
		public TerminalNode INTEGER() { return getToken(MySqlParser.INTEGER, 0); }
		public TerminalNode BIGINT() { return getToken(MySqlParser.BIGINT, 0); }
		public TerminalNode MIDDLEINT() { return getToken(MySqlParser.MIDDLEINT, 0); }
		public TerminalNode INT1() { return getToken(MySqlParser.INT1, 0); }
		public TerminalNode INT2() { return getToken(MySqlParser.INT2, 0); }
		public TerminalNode INT3() { return getToken(MySqlParser.INT3, 0); }
		public TerminalNode INT4() { return getToken(MySqlParser.INT4, 0); }
		public TerminalNode INT8() { return getToken(MySqlParser.INT8, 0); }
		public LengthOneDimensionContext lengthOneDimension() {
			return getRuleContext(LengthOneDimensionContext.class,0);
		}
		public TerminalNode ZEROFILL() { return getToken(MySqlParser.ZEROFILL, 0); }
		public TerminalNode SIGNED() { return getToken(MySqlParser.SIGNED, 0); }
		public TerminalNode UNSIGNED() { return getToken(MySqlParser.UNSIGNED, 0); }
		public TerminalNode REAL() { return getToken(MySqlParser.REAL, 0); }
		public LengthTwoDimensionContext lengthTwoDimension() {
			return getRuleContext(LengthTwoDimensionContext.class,0);
		}
		public TerminalNode DOUBLE() { return getToken(MySqlParser.DOUBLE, 0); }
		public TerminalNode PRECISION() { return getToken(MySqlParser.PRECISION, 0); }
		public TerminalNode DECIMAL() { return getToken(MySqlParser.DECIMAL, 0); }
		public TerminalNode DEC() { return getToken(MySqlParser.DEC, 0); }
		public TerminalNode FIXED() { return getToken(MySqlParser.FIXED, 0); }
		public TerminalNode NUMERIC() { return getToken(MySqlParser.NUMERIC, 0); }
		public TerminalNode FLOAT() { return getToken(MySqlParser.FLOAT, 0); }
		public TerminalNode FLOAT4() { return getToken(MySqlParser.FLOAT4, 0); }
		public TerminalNode FLOAT8() { return getToken(MySqlParser.FLOAT8, 0); }
		public LengthTwoOptionalDimensionContext lengthTwoOptionalDimension() {
			return getRuleContext(LengthTwoOptionalDimensionContext.class,0);
		}
		public TerminalNode BIT() { return getToken(MySqlParser.BIT, 0); }
		public TerminalNode TIME() { return getToken(MySqlParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(MySqlParser.TIMESTAMP, 0); }
		public TerminalNode DATETIME() { return getToken(MySqlParser.DATETIME, 0); }
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public TerminalNode VARBINARY() { return getToken(MySqlParser.VARBINARY, 0); }
		public TerminalNode BLOB() { return getToken(MySqlParser.BLOB, 0); }
		public TerminalNode YEAR() { return getToken(MySqlParser.YEAR, 0); }
		public DimensionDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDimensionDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDimensionDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDimensionDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class StringDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode CHAR() { return getToken(MySqlParser.CHAR, 0); }
		public List<TerminalNode> CHARACTER() { return getTokens(MySqlParser.CHARACTER); }
		public TerminalNode CHARACTER(int i) {
			return getToken(MySqlParser.CHARACTER, i);
		}
		public TerminalNode VARCHAR() { return getToken(MySqlParser.VARCHAR, 0); }
		public TerminalNode TINYTEXT() { return getToken(MySqlParser.TINYTEXT, 0); }
		public TerminalNode TEXT() { return getToken(MySqlParser.TEXT, 0); }
		public TerminalNode MEDIUMTEXT() { return getToken(MySqlParser.MEDIUMTEXT, 0); }
		public TerminalNode LONGTEXT() { return getToken(MySqlParser.LONGTEXT, 0); }
		public TerminalNode NCHAR() { return getToken(MySqlParser.NCHAR, 0); }
		public TerminalNode NVARCHAR() { return getToken(MySqlParser.NVARCHAR, 0); }
		public TerminalNode LONG() { return getToken(MySqlParser.LONG, 0); }
		public TerminalNode VARYING() { return getToken(MySqlParser.VARYING, 0); }
		public LengthOneDimensionContext lengthOneDimension() {
			return getRuleContext(LengthOneDimensionContext.class,0);
		}
		public List<TerminalNode> BINARY() { return getTokens(MySqlParser.BINARY); }
		public TerminalNode BINARY(int i) {
			return getToken(MySqlParser.BINARY, i);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode CHARSET() { return getToken(MySqlParser.CHARSET, 0); }
		public StringDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterStringDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitStringDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitStringDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LongVarcharDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode LONG() { return getToken(MySqlParser.LONG, 0); }
		public TerminalNode VARCHAR() { return getToken(MySqlParser.VARCHAR, 0); }
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode CHARSET() { return getToken(MySqlParser.CHARSET, 0); }
		public LongVarcharDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLongVarcharDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLongVarcharDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLongVarcharDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NationalStringDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode NATIONAL() { return getToken(MySqlParser.NATIONAL, 0); }
		public TerminalNode VARCHAR() { return getToken(MySqlParser.VARCHAR, 0); }
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public LengthOneDimensionContext lengthOneDimension() {
			return getRuleContext(LengthOneDimensionContext.class,0);
		}
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public TerminalNode NCHAR() { return getToken(MySqlParser.NCHAR, 0); }
		public NationalStringDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterNationalStringDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitNationalStringDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitNationalStringDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode DATE() { return getToken(MySqlParser.DATE, 0); }
		public TerminalNode TINYBLOB() { return getToken(MySqlParser.TINYBLOB, 0); }
		public TerminalNode MEDIUMBLOB() { return getToken(MySqlParser.MEDIUMBLOB, 0); }
		public TerminalNode LONGBLOB() { return getToken(MySqlParser.LONGBLOB, 0); }
		public TerminalNode BOOL() { return getToken(MySqlParser.BOOL, 0); }
		public TerminalNode BOOLEAN() { return getToken(MySqlParser.BOOLEAN, 0); }
		public TerminalNode SERIAL() { return getToken(MySqlParser.SERIAL, 0); }
		public SimpleDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSimpleDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSimpleDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSimpleDataType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataTypeContext dataType() throws RecognitionException {
		DataTypeContext _localctx = new DataTypeContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_dataType);
		int _la;
		try {
			setState(559);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,105,_ctx) ) {
			case 1:
				_localctx = new StringDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(428);
				((StringDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CHARACTER || ((((_la - 205)) & ~0x3f) == 0 && ((1L << (_la - 205)) & ((1L << (CHAR - 205)) | (1L << (VARCHAR - 205)) | (1L << (NVARCHAR - 205)) | (1L << (LONG - 205)) | (1L << (TINYTEXT - 205)) | (1L << (TEXT - 205)) | (1L << (MEDIUMTEXT - 205)) | (1L << (LONGTEXT - 205)))) != 0) || _la==NCHAR) ) {
					((StringDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(430);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VARYING) {
					{
					setState(429);
					match(VARYING);
					}
				}

				setState(433);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(432);
					lengthOneDimension();
					}
				}

				setState(436);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,73,_ctx) ) {
				case 1:
					{
					setState(435);
					match(BINARY);
					}
					break;
				}
				setState(444);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CHARACTER || _la==CHARSET) {
					{
					setState(441);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case CHARACTER:
						{
						setState(438);
						match(CHARACTER);
						setState(439);
						match(SET);
						}
						break;
					case CHARSET:
						{
						setState(440);
						match(CHARSET);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(443);
					charsetName();
					}
				}

				setState(449);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,76,_ctx) ) {
				case 1:
					{
					setState(446);
					match(COLLATE);
					setState(447);
					collationName();
					}
					break;
				case 2:
					{
					setState(448);
					match(BINARY);
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new NationalStringDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(451);
				match(NATIONAL);
				setState(452);
				((NationalStringDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CHARACTER || _la==VARCHAR) ) {
					((NationalStringDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(454);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(453);
					lengthOneDimension();
					}
				}

				setState(457);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BINARY) {
					{
					setState(456);
					match(BINARY);
					}
				}

				}
				break;
			case 3:
				_localctx = new NationalStringDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(459);
				match(NCHAR);
				setState(460);
				((NationalStringDataTypeContext)_localctx).typeName = match(VARCHAR);
				setState(462);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(461);
					lengthOneDimension();
					}
				}

				setState(465);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BINARY) {
					{
					setState(464);
					match(BINARY);
					}
				}

				}
				break;
			case 4:
				_localctx = new NationalVaryingStringDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(467);
				match(NATIONAL);
				setState(468);
				((NationalVaryingStringDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CHARACTER || _la==CHAR) ) {
					((NationalVaryingStringDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(469);
				match(VARYING);
				setState(471);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(470);
					lengthOneDimension();
					}
				}

				setState(474);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BINARY) {
					{
					setState(473);
					match(BINARY);
					}
				}

				}
				break;
			case 5:
				_localctx = new DimensionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(476);
				((DimensionDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 179)) & ~0x3f) == 0 && ((1L << (_la - 179)) & ((1L << (TINYINT - 179)) | (1L << (SMALLINT - 179)) | (1L << (MEDIUMINT - 179)) | (1L << (MIDDLEINT - 179)) | (1L << (INT - 179)) | (1L << (INT1 - 179)) | (1L << (INT2 - 179)) | (1L << (INT3 - 179)) | (1L << (INT4 - 179)) | (1L << (INT8 - 179)) | (1L << (INTEGER - 179)) | (1L << (BIGINT - 179)))) != 0)) ) {
					((DimensionDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(478);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(477);
					lengthOneDimension();
					}
				}

				setState(481);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNSIGNED || _la==SIGNED) {
					{
					setState(480);
					_la = _input.LA(1);
					if ( !(_la==UNSIGNED || _la==SIGNED) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(484);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ZEROFILL) {
					{
					setState(483);
					match(ZEROFILL);
					}
				}

				}
				break;
			case 6:
				_localctx = new DimensionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(486);
				((DimensionDataTypeContext)_localctx).typeName = match(REAL);
				setState(488);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(487);
					lengthTwoDimension();
					}
				}

				setState(491);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNSIGNED || _la==SIGNED) {
					{
					setState(490);
					_la = _input.LA(1);
					if ( !(_la==UNSIGNED || _la==SIGNED) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(494);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ZEROFILL) {
					{
					setState(493);
					match(ZEROFILL);
					}
				}

				}
				break;
			case 7:
				_localctx = new DimensionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(496);
				((DimensionDataTypeContext)_localctx).typeName = match(DOUBLE);
				setState(498);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRECISION) {
					{
					setState(497);
					match(PRECISION);
					}
				}

				setState(501);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(500);
					lengthTwoDimension();
					}
				}

				setState(504);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNSIGNED || _la==SIGNED) {
					{
					setState(503);
					_la = _input.LA(1);
					if ( !(_la==UNSIGNED || _la==SIGNED) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(507);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ZEROFILL) {
					{
					setState(506);
					match(ZEROFILL);
					}
				}

				}
				break;
			case 8:
				_localctx = new DimensionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(509);
				((DimensionDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (FLOAT - 194)) | (1L << (FLOAT4 - 194)) | (1L << (FLOAT8 - 194)) | (1L << (DECIMAL - 194)) | (1L << (DEC - 194)) | (1L << (NUMERIC - 194)))) != 0) || _la==FIXED) ) {
					((DimensionDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(511);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(510);
					lengthTwoOptionalDimension();
					}
				}

				setState(514);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNSIGNED || _la==SIGNED) {
					{
					setState(513);
					_la = _input.LA(1);
					if ( !(_la==UNSIGNED || _la==SIGNED) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(517);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ZEROFILL) {
					{
					setState(516);
					match(ZEROFILL);
					}
				}

				}
				break;
			case 9:
				_localctx = new SimpleDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(519);
				((SimpleDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 200)) & ~0x3f) == 0 && ((1L << (_la - 200)) & ((1L << (DATE - 200)) | (1L << (TINYBLOB - 200)) | (1L << (MEDIUMBLOB - 200)) | (1L << (LONGBLOB - 200)) | (1L << (SERIAL - 200)))) != 0) || _la==BOOL || _la==BOOLEAN) ) {
					((SimpleDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 10:
				_localctx = new DimensionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(520);
				((DimensionDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 201)) & ~0x3f) == 0 && ((1L << (_la - 201)) & ((1L << (TIME - 201)) | (1L << (TIMESTAMP - 201)) | (1L << (DATETIME - 201)) | (1L << (YEAR - 201)) | (1L << (BINARY - 201)) | (1L << (VARBINARY - 201)) | (1L << (BLOB - 201)))) != 0) || _la==BIT) ) {
					((DimensionDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(522);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(521);
					lengthOneDimension();
					}
				}

				}
				break;
			case 11:
				_localctx = new CollectionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(524);
				((CollectionDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==SET || _la==ENUM) ) {
					((CollectionDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(525);
				collectionOptions();
				setState(527);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BINARY) {
					{
					setState(526);
					match(BINARY);
					}
				}

				setState(535);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CHARACTER || _la==CHARSET) {
					{
					setState(532);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case CHARACTER:
						{
						setState(529);
						match(CHARACTER);
						setState(530);
						match(SET);
						}
						break;
					case CHARSET:
						{
						setState(531);
						match(CHARSET);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(534);
					charsetName();
					}
				}

				}
				break;
			case 12:
				_localctx = new SpatialDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(537);
				((SpatialDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==JSON || ((((_la - 736)) & ~0x3f) == 0 && ((1L << (_la - 736)) & ((1L << (GEOMETRYCOLLECTION - 736)) | (1L << (GEOMCOLLECTION - 736)) | (1L << (GEOMETRY - 736)) | (1L << (LINESTRING - 736)) | (1L << (MULTILINESTRING - 736)) | (1L << (MULTIPOINT - 736)) | (1L << (MULTIPOLYGON - 736)) | (1L << (POINT - 736)) | (1L << (POLYGON - 736)))) != 0)) ) {
					((SpatialDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 13:
				_localctx = new LongVarcharDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(538);
				((LongVarcharDataTypeContext)_localctx).typeName = match(LONG);
				setState(540);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VARCHAR) {
					{
					setState(539);
					match(VARCHAR);
					}
				}

				setState(543);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BINARY) {
					{
					setState(542);
					match(BINARY);
					}
				}

				setState(551);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CHARACTER || _la==CHARSET) {
					{
					setState(548);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case CHARACTER:
						{
						setState(545);
						match(CHARACTER);
						setState(546);
						match(SET);
						}
						break;
					case CHARSET:
						{
						setState(547);
						match(CHARSET);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(550);
					charsetName();
					}
				}

				setState(555);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,104,_ctx) ) {
				case 1:
					{
					setState(553);
					match(COLLATE);
					setState(554);
					collationName();
					}
					break;
				}
				}
				break;
			case 14:
				_localctx = new LongVarbinaryDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(557);
				match(LONG);
				setState(558);
				match(VARBINARY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LengthOneDimensionContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public LengthOneDimensionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lengthOneDimension; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLengthOneDimension(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLengthOneDimension(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLengthOneDimension(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LengthOneDimensionContext lengthOneDimension() throws RecognitionException {
		LengthOneDimensionContext _localctx = new LengthOneDimensionContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_lengthOneDimension);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(561);
			match(LR_BRACKET);
			setState(562);
			decimalLiteral();
			setState(563);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LengthTwoDimensionContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(MySqlParser.COMMA, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public LengthTwoDimensionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lengthTwoDimension; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLengthTwoDimension(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLengthTwoDimension(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLengthTwoDimension(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LengthTwoDimensionContext lengthTwoDimension() throws RecognitionException {
		LengthTwoDimensionContext _localctx = new LengthTwoDimensionContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_lengthTwoDimension);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(565);
			match(LR_BRACKET);
			setState(566);
			decimalLiteral();
			setState(567);
			match(COMMA);
			setState(568);
			decimalLiteral();
			setState(569);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LengthTwoOptionalDimensionContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode COMMA() { return getToken(MySqlParser.COMMA, 0); }
		public LengthTwoOptionalDimensionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lengthTwoOptionalDimension; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLengthTwoOptionalDimension(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLengthTwoOptionalDimension(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLengthTwoOptionalDimension(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LengthTwoOptionalDimensionContext lengthTwoOptionalDimension() throws RecognitionException {
		LengthTwoOptionalDimensionContext _localctx = new LengthTwoOptionalDimensionContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_lengthTwoOptionalDimension);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(571);
			match(LR_BRACKET);
			setState(572);
			decimalLiteral();
			setState(575);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(573);
				match(COMMA);
				setState(574);
				decimalLiteral();
				}
			}

			setState(577);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifierContext extends ParserRuleContext {
		public SimpleIdContext simpleId() {
			return getRuleContext(SimpleIdContext.class,0);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdentifierContext identifier() throws RecognitionException {
		IdentifierContext _localctx = new IdentifierContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_identifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(579);
			simpleId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SimpleIdContext extends ParserRuleContext {
		public TerminalNode ID() { return getToken(MySqlParser.ID, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public KeywordsCanBeIdContext keywordsCanBeId() {
			return getRuleContext(KeywordsCanBeIdContext.class,0);
		}
		public FunctionNameBaseContext functionNameBase() {
			return getRuleContext(FunctionNameBaseContext.class,0);
		}
		public SimpleIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleId; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSimpleId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSimpleId(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSimpleId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SimpleIdContext simpleId() throws RecognitionException {
		SimpleIdContext _localctx = new SimpleIdContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_simpleId);
		try {
			setState(585);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,107,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(581);
				match(ID);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(582);
				engineName();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(583);
				keywordsCanBeId();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(584);
				functionNameBase();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FileSizeLiteralContext extends ParserRuleContext {
		public TerminalNode FILESIZE_LITERAL() { return getToken(MySqlParser.FILESIZE_LITERAL, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public FileSizeLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fileSizeLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFileSizeLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFileSizeLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFileSizeLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FileSizeLiteralContext fileSizeLiteral() throws RecognitionException {
		FileSizeLiteralContext _localctx = new FileSizeLiteralContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_fileSizeLiteral);
		try {
			setState(589);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FILESIZE_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(587);
				match(FILESIZE_LITERAL);
				}
				break;
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(588);
				decimalLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReferenceControlTypeContext extends ParserRuleContext {
		public TerminalNode RESTRICT() { return getToken(MySqlParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(MySqlParser.CASCADE, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode NULL_LITERAL() { return getToken(MySqlParser.NULL_LITERAL, 0); }
		public TerminalNode NO() { return getToken(MySqlParser.NO, 0); }
		public TerminalNode ACTION() { return getToken(MySqlParser.ACTION, 0); }
		public ReferenceControlTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referenceControlType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterReferenceControlType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitReferenceControlType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitReferenceControlType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReferenceControlTypeContext referenceControlType() throws RecognitionException {
		ReferenceControlTypeContext _localctx = new ReferenceControlTypeContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_referenceControlType);
		try {
			setState(597);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RESTRICT:
				enterOuterAlt(_localctx, 1);
				{
				setState(591);
				match(RESTRICT);
				}
				break;
			case CASCADE:
				enterOuterAlt(_localctx, 2);
				{
				setState(592);
				match(CASCADE);
				}
				break;
			case SET:
				enterOuterAlt(_localctx, 3);
				{
				setState(593);
				match(SET);
				setState(594);
				match(NULL_LITERAL);
				}
				break;
			case NO:
				enterOuterAlt(_localctx, 4);
				{
				setState(595);
				match(NO);
				setState(596);
				match(ACTION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexTypeContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(MySqlParser.USING, 0); }
		public TerminalNode BTREE() { return getToken(MySqlParser.BTREE, 0); }
		public TerminalNode HASH() { return getToken(MySqlParser.HASH, 0); }
		public IndexTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIndexType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIndexType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIndexType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexTypeContext indexType() throws RecognitionException {
		IndexTypeContext _localctx = new IndexTypeContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_indexType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(599);
			match(USING);
			setState(600);
			_la = _input.LA(1);
			if ( !(_la==BTREE || _la==HASH) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DecimalLiteralContext extends ParserRuleContext {
		public TerminalNode DECIMAL_LITERAL() { return getToken(MySqlParser.DECIMAL_LITERAL, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(MySqlParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(MySqlParser.ONE_DECIMAL, 0); }
		public TerminalNode TWO_DECIMAL() { return getToken(MySqlParser.TWO_DECIMAL, 0); }
		public DecimalLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decimalLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDecimalLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDecimalLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDecimalLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DecimalLiteralContext decimalLiteral() throws RecognitionException {
		DecimalLiteralContext _localctx = new DecimalLiteralContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_decimalLiteral);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(602);
			_la = _input.LA(1);
			if ( !(((((_la - 1068)) & ~0x3f) == 0 && ((1L << (_la - 1068)) & ((1L << (ZERO_DECIMAL - 1068)) | (1L << (ONE_DECIMAL - 1068)) | (1L << (TWO_DECIMAL - 1068)) | (1L << (DECIMAL_LITERAL - 1068)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HexadecimalLiteralContext extends ParserRuleContext {
		public TerminalNode HEXADECIMAL_LITERAL() { return getToken(MySqlParser.HEXADECIMAL_LITERAL, 0); }
		public TerminalNode STRING_CHARSET_NAME() { return getToken(MySqlParser.STRING_CHARSET_NAME, 0); }
		public HexadecimalLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hexadecimalLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHexadecimalLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHexadecimalLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitHexadecimalLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HexadecimalLiteralContext hexadecimalLiteral() throws RecognitionException {
		HexadecimalLiteralContext _localctx = new HexadecimalLiteralContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_hexadecimalLiteral);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(605);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STRING_CHARSET_NAME) {
				{
				setState(604);
				match(STRING_CHARSET_NAME);
				}
			}

			setState(607);
			match(HEXADECIMAL_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BooleanLiteralContext extends ParserRuleContext {
		public TerminalNode TRUE() { return getToken(MySqlParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(MySqlParser.FALSE, 0); }
		public BooleanLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_booleanLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterBooleanLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitBooleanLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitBooleanLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BooleanLiteralContext booleanLiteral() throws RecognitionException {
		BooleanLiteralContext _localctx = new BooleanLiteralContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_booleanLiteral);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(609);
			_la = _input.LA(1);
			if ( !(_la==FALSE || _la==TRUE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CollectionOptionsContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<TerminalNode> STRING_LITERAL() { return getTokens(MySqlParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(MySqlParser.STRING_LITERAL, i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public CollectionOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collectionOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCollectionOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCollectionOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCollectionOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CollectionOptionsContext collectionOptions() throws RecognitionException {
		CollectionOptionsContext _localctx = new CollectionOptionsContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_collectionOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(611);
			match(LR_BRACKET);
			setState(612);
			match(STRING_LITERAL);
			setState(617);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(613);
				match(COMMA);
				setState(614);
				match(STRING_LITERAL);
				}
				}
				setState(619);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(620);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EngineNameContext extends ParserRuleContext {
		public TerminalNode ARCHIVE() { return getToken(MySqlParser.ARCHIVE, 0); }
		public TerminalNode BLACKHOLE() { return getToken(MySqlParser.BLACKHOLE, 0); }
		public TerminalNode CSV() { return getToken(MySqlParser.CSV, 0); }
		public TerminalNode FEDERATED() { return getToken(MySqlParser.FEDERATED, 0); }
		public TerminalNode INNODB() { return getToken(MySqlParser.INNODB, 0); }
		public TerminalNode MEMORY() { return getToken(MySqlParser.MEMORY, 0); }
		public TerminalNode MRG_MYISAM() { return getToken(MySqlParser.MRG_MYISAM, 0); }
		public TerminalNode MYISAM() { return getToken(MySqlParser.MYISAM, 0); }
		public TerminalNode NDB() { return getToken(MySqlParser.NDB, 0); }
		public TerminalNode NDBCLUSTER() { return getToken(MySqlParser.NDBCLUSTER, 0); }
		public TerminalNode PERFORMANCE_SCHEMA() { return getToken(MySqlParser.PERFORMANCE_SCHEMA, 0); }
		public TerminalNode TOKUDB() { return getToken(MySqlParser.TOKUDB, 0); }
		public TerminalNode ID() { return getToken(MySqlParser.ID, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode REVERSE_QUOTE_ID() { return getToken(MySqlParser.REVERSE_QUOTE_ID, 0); }
		public TerminalNode CONNECT() { return getToken(MySqlParser.CONNECT, 0); }
		public EngineNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_engineName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterEngineName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitEngineName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitEngineName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EngineNameContext engineName() throws RecognitionException {
		EngineNameContext _localctx = new EngineNameContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_engineName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(622);
			_la = _input.LA(1);
			if ( !(_la==CONNECT || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & ((1L << (ARCHIVE - 720)) | (1L << (BLACKHOLE - 720)) | (1L << (CSV - 720)) | (1L << (FEDERATED - 720)) | (1L << (INNODB - 720)) | (1L << (MEMORY - 720)) | (1L << (MRG_MYISAM - 720)) | (1L << (MYISAM - 720)) | (1L << (NDB - 720)) | (1L << (NDBCLUSTER - 720)) | (1L << (PERFORMANCE_SCHEMA - 720)) | (1L << (TOKUDB - 720)))) != 0) || ((((_la - 1078)) & ~0x3f) == 0 && ((1L << (_la - 1078)) & ((1L << (STRING_LITERAL - 1078)) | (1L << (ID - 1078)) | (1L << (REVERSE_QUOTE_ID - 1078)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LogicalOperatorContext extends ParserRuleContext {
		public TerminalNode AND() { return getToken(MySqlParser.AND, 0); }
		public List<TerminalNode> BIT_AND_OP() { return getTokens(MySqlParser.BIT_AND_OP); }
		public TerminalNode BIT_AND_OP(int i) {
			return getToken(MySqlParser.BIT_AND_OP, i);
		}
		public TerminalNode XOR() { return getToken(MySqlParser.XOR, 0); }
		public TerminalNode OR() { return getToken(MySqlParser.OR, 0); }
		public List<TerminalNode> BIT_OR_OP() { return getTokens(MySqlParser.BIT_OR_OP); }
		public TerminalNode BIT_OR_OP(int i) {
			return getToken(MySqlParser.BIT_OR_OP, i);
		}
		public LogicalOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logicalOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLogicalOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLogicalOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLogicalOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LogicalOperatorContext logicalOperator() throws RecognitionException {
		LogicalOperatorContext _localctx = new LogicalOperatorContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_logicalOperator);
		try {
			setState(631);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
				enterOuterAlt(_localctx, 1);
				{
				setState(624);
				match(AND);
				}
				break;
			case BIT_AND_OP:
				enterOuterAlt(_localctx, 2);
				{
				setState(625);
				match(BIT_AND_OP);
				setState(626);
				match(BIT_AND_OP);
				}
				break;
			case XOR:
				enterOuterAlt(_localctx, 3);
				{
				setState(627);
				match(XOR);
				}
				break;
			case OR:
				enterOuterAlt(_localctx, 4);
				{
				setState(628);
				match(OR);
				}
				break;
			case BIT_OR_OP:
				enterOuterAlt(_localctx, 5);
				{
				setState(629);
				match(BIT_OR_OP);
				setState(630);
				match(BIT_OR_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NullNotnullContext extends ParserRuleContext {
		public TerminalNode NULL_LITERAL() { return getToken(MySqlParser.NULL_LITERAL, 0); }
		public TerminalNode NULL_SPEC_LITERAL() { return getToken(MySqlParser.NULL_SPEC_LITERAL, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public NullNotnullContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nullNotnull; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterNullNotnull(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitNullNotnull(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitNullNotnull(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NullNotnullContext nullNotnull() throws RecognitionException {
		NullNotnullContext _localctx = new NullNotnullContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_nullNotnull);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(634);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(633);
				match(NOT);
				}
			}

			setState(636);
			_la = _input.LA(1);
			if ( !(_la==NULL_LITERAL || _la==NULL_SPEC_LITERAL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharsetNameBaseContext extends ParserRuleContext {
		public TerminalNode ARMSCII8() { return getToken(MySqlParser.ARMSCII8, 0); }
		public TerminalNode ASCII() { return getToken(MySqlParser.ASCII, 0); }
		public TerminalNode BIG5() { return getToken(MySqlParser.BIG5, 0); }
		public TerminalNode CP1250() { return getToken(MySqlParser.CP1250, 0); }
		public TerminalNode CP1251() { return getToken(MySqlParser.CP1251, 0); }
		public TerminalNode CP1256() { return getToken(MySqlParser.CP1256, 0); }
		public TerminalNode CP1257() { return getToken(MySqlParser.CP1257, 0); }
		public TerminalNode CP850() { return getToken(MySqlParser.CP850, 0); }
		public TerminalNode CP852() { return getToken(MySqlParser.CP852, 0); }
		public TerminalNode CP866() { return getToken(MySqlParser.CP866, 0); }
		public TerminalNode CP932() { return getToken(MySqlParser.CP932, 0); }
		public TerminalNode DEC8() { return getToken(MySqlParser.DEC8, 0); }
		public TerminalNode EUCJPMS() { return getToken(MySqlParser.EUCJPMS, 0); }
		public TerminalNode EUCKR() { return getToken(MySqlParser.EUCKR, 0); }
		public TerminalNode GB2312() { return getToken(MySqlParser.GB2312, 0); }
		public TerminalNode GBK() { return getToken(MySqlParser.GBK, 0); }
		public TerminalNode GEOSTD8() { return getToken(MySqlParser.GEOSTD8, 0); }
		public TerminalNode GREEK() { return getToken(MySqlParser.GREEK, 0); }
		public TerminalNode HEBREW() { return getToken(MySqlParser.HEBREW, 0); }
		public TerminalNode HP8() { return getToken(MySqlParser.HP8, 0); }
		public TerminalNode KEYBCS2() { return getToken(MySqlParser.KEYBCS2, 0); }
		public TerminalNode KOI8R() { return getToken(MySqlParser.KOI8R, 0); }
		public TerminalNode KOI8U() { return getToken(MySqlParser.KOI8U, 0); }
		public TerminalNode LATIN1() { return getToken(MySqlParser.LATIN1, 0); }
		public TerminalNode LATIN2() { return getToken(MySqlParser.LATIN2, 0); }
		public TerminalNode LATIN5() { return getToken(MySqlParser.LATIN5, 0); }
		public TerminalNode LATIN7() { return getToken(MySqlParser.LATIN7, 0); }
		public TerminalNode MACCE() { return getToken(MySqlParser.MACCE, 0); }
		public TerminalNode MACROMAN() { return getToken(MySqlParser.MACROMAN, 0); }
		public TerminalNode SJIS() { return getToken(MySqlParser.SJIS, 0); }
		public TerminalNode SWE7() { return getToken(MySqlParser.SWE7, 0); }
		public TerminalNode TIS620() { return getToken(MySqlParser.TIS620, 0); }
		public TerminalNode UCS2() { return getToken(MySqlParser.UCS2, 0); }
		public TerminalNode UJIS() { return getToken(MySqlParser.UJIS, 0); }
		public TerminalNode UTF16() { return getToken(MySqlParser.UTF16, 0); }
		public TerminalNode UTF16LE() { return getToken(MySqlParser.UTF16LE, 0); }
		public TerminalNode UTF32() { return getToken(MySqlParser.UTF32, 0); }
		public TerminalNode UTF8() { return getToken(MySqlParser.UTF8, 0); }
		public TerminalNode UTF8MB3() { return getToken(MySqlParser.UTF8MB3, 0); }
		public TerminalNode UTF8MB4() { return getToken(MySqlParser.UTF8MB4, 0); }
		public CharsetNameBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_charsetNameBase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCharsetNameBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCharsetNameBase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCharsetNameBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharsetNameBaseContext charsetNameBase() throws RecognitionException {
		CharsetNameBaseContext _localctx = new CharsetNameBaseContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_charsetNameBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(638);
			_la = _input.LA(1);
			if ( !(((((_la - 680)) & ~0x3f) == 0 && ((1L << (_la - 680)) & ((1L << (ARMSCII8 - 680)) | (1L << (ASCII - 680)) | (1L << (BIG5 - 680)) | (1L << (CP1250 - 680)) | (1L << (CP1251 - 680)) | (1L << (CP1256 - 680)) | (1L << (CP1257 - 680)) | (1L << (CP850 - 680)) | (1L << (CP852 - 680)) | (1L << (CP866 - 680)) | (1L << (CP932 - 680)) | (1L << (DEC8 - 680)) | (1L << (EUCJPMS - 680)) | (1L << (EUCKR - 680)) | (1L << (GB2312 - 680)) | (1L << (GBK - 680)) | (1L << (GEOSTD8 - 680)) | (1L << (GREEK - 680)) | (1L << (HEBREW - 680)) | (1L << (HP8 - 680)) | (1L << (KEYBCS2 - 680)) | (1L << (KOI8R - 680)) | (1L << (KOI8U - 680)) | (1L << (LATIN1 - 680)) | (1L << (LATIN2 - 680)) | (1L << (LATIN5 - 680)) | (1L << (LATIN7 - 680)) | (1L << (MACCE - 680)) | (1L << (MACROMAN - 680)) | (1L << (SJIS - 680)) | (1L << (SWE7 - 680)) | (1L << (TIS620 - 680)) | (1L << (UCS2 - 680)) | (1L << (UJIS - 680)) | (1L << (UTF16 - 680)) | (1L << (UTF16LE - 680)) | (1L << (UTF32 - 680)) | (1L << (UTF8 - 680)) | (1L << (UTF8MB3 - 680)) | (1L << (UTF8MB4 - 680)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeywordsCanBeIdContext extends ParserRuleContext {
		public TerminalNode ACCOUNT() { return getToken(MySqlParser.ACCOUNT, 0); }
		public TerminalNode ACTION() { return getToken(MySqlParser.ACTION, 0); }
		public TerminalNode AFTER() { return getToken(MySqlParser.AFTER, 0); }
		public TerminalNode AGGREGATE() { return getToken(MySqlParser.AGGREGATE, 0); }
		public TerminalNode ALGORITHM() { return getToken(MySqlParser.ALGORITHM, 0); }
		public TerminalNode ANY() { return getToken(MySqlParser.ANY, 0); }
		public TerminalNode AT() { return getToken(MySqlParser.AT, 0); }
		public TerminalNode AUDIT_ADMIN() { return getToken(MySqlParser.AUDIT_ADMIN, 0); }
		public TerminalNode AUTHORS() { return getToken(MySqlParser.AUTHORS, 0); }
		public TerminalNode AUTOCOMMIT() { return getToken(MySqlParser.AUTOCOMMIT, 0); }
		public TerminalNode AUTOEXTEND_SIZE() { return getToken(MySqlParser.AUTOEXTEND_SIZE, 0); }
		public TerminalNode AUTO_INCREMENT() { return getToken(MySqlParser.AUTO_INCREMENT, 0); }
		public TerminalNode AVG() { return getToken(MySqlParser.AVG, 0); }
		public TerminalNode AVG_ROW_LENGTH() { return getToken(MySqlParser.AVG_ROW_LENGTH, 0); }
		public TerminalNode BACKUP_ADMIN() { return getToken(MySqlParser.BACKUP_ADMIN, 0); }
		public TerminalNode BEGIN() { return getToken(MySqlParser.BEGIN, 0); }
		public TerminalNode BINLOG() { return getToken(MySqlParser.BINLOG, 0); }
		public TerminalNode BINLOG_ADMIN() { return getToken(MySqlParser.BINLOG_ADMIN, 0); }
		public TerminalNode BINLOG_ENCRYPTION_ADMIN() { return getToken(MySqlParser.BINLOG_ENCRYPTION_ADMIN, 0); }
		public TerminalNode BIT() { return getToken(MySqlParser.BIT, 0); }
		public TerminalNode BIT_AND() { return getToken(MySqlParser.BIT_AND, 0); }
		public TerminalNode BIT_OR() { return getToken(MySqlParser.BIT_OR, 0); }
		public TerminalNode BIT_XOR() { return getToken(MySqlParser.BIT_XOR, 0); }
		public TerminalNode BLOCK() { return getToken(MySqlParser.BLOCK, 0); }
		public TerminalNode BOOL() { return getToken(MySqlParser.BOOL, 0); }
		public TerminalNode BOOLEAN() { return getToken(MySqlParser.BOOLEAN, 0); }
		public TerminalNode BTREE() { return getToken(MySqlParser.BTREE, 0); }
		public TerminalNode CACHE() { return getToken(MySqlParser.CACHE, 0); }
		public TerminalNode CASCADED() { return getToken(MySqlParser.CASCADED, 0); }
		public TerminalNode CHAIN() { return getToken(MySqlParser.CHAIN, 0); }
		public TerminalNode CHANGED() { return getToken(MySqlParser.CHANGED, 0); }
		public TerminalNode CHANNEL() { return getToken(MySqlParser.CHANNEL, 0); }
		public TerminalNode CHECKSUM() { return getToken(MySqlParser.CHECKSUM, 0); }
		public TerminalNode PAGE_CHECKSUM() { return getToken(MySqlParser.PAGE_CHECKSUM, 0); }
		public TerminalNode CATALOG_NAME() { return getToken(MySqlParser.CATALOG_NAME, 0); }
		public TerminalNode CIPHER() { return getToken(MySqlParser.CIPHER, 0); }
		public TerminalNode CLASS_ORIGIN() { return getToken(MySqlParser.CLASS_ORIGIN, 0); }
		public TerminalNode CLIENT() { return getToken(MySqlParser.CLIENT, 0); }
		public TerminalNode CLONE_ADMIN() { return getToken(MySqlParser.CLONE_ADMIN, 0); }
		public TerminalNode CLOSE() { return getToken(MySqlParser.CLOSE, 0); }
		public TerminalNode COALESCE() { return getToken(MySqlParser.COALESCE, 0); }
		public TerminalNode CODE() { return getToken(MySqlParser.CODE, 0); }
		public TerminalNode COLUMNS() { return getToken(MySqlParser.COLUMNS, 0); }
		public TerminalNode COLUMN_FORMAT() { return getToken(MySqlParser.COLUMN_FORMAT, 0); }
		public TerminalNode COLUMN_NAME() { return getToken(MySqlParser.COLUMN_NAME, 0); }
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public TerminalNode COMMIT() { return getToken(MySqlParser.COMMIT, 0); }
		public TerminalNode COMPACT() { return getToken(MySqlParser.COMPACT, 0); }
		public TerminalNode COMPLETION() { return getToken(MySqlParser.COMPLETION, 0); }
		public TerminalNode COMPRESSED() { return getToken(MySqlParser.COMPRESSED, 0); }
		public TerminalNode COMPRESSION() { return getToken(MySqlParser.COMPRESSION, 0); }
		public TerminalNode CONCURRENT() { return getToken(MySqlParser.CONCURRENT, 0); }
		public TerminalNode CONNECT() { return getToken(MySqlParser.CONNECT, 0); }
		public TerminalNode CONNECTION() { return getToken(MySqlParser.CONNECTION, 0); }
		public TerminalNode CONNECTION_ADMIN() { return getToken(MySqlParser.CONNECTION_ADMIN, 0); }
		public TerminalNode CONSISTENT() { return getToken(MySqlParser.CONSISTENT, 0); }
		public TerminalNode CONSTRAINT_CATALOG() { return getToken(MySqlParser.CONSTRAINT_CATALOG, 0); }
		public TerminalNode CONSTRAINT_NAME() { return getToken(MySqlParser.CONSTRAINT_NAME, 0); }
		public TerminalNode CONSTRAINT_SCHEMA() { return getToken(MySqlParser.CONSTRAINT_SCHEMA, 0); }
		public TerminalNode CONTAINS() { return getToken(MySqlParser.CONTAINS, 0); }
		public TerminalNode CONTEXT() { return getToken(MySqlParser.CONTEXT, 0); }
		public TerminalNode CONTRIBUTORS() { return getToken(MySqlParser.CONTRIBUTORS, 0); }
		public TerminalNode COPY() { return getToken(MySqlParser.COPY, 0); }
		public TerminalNode COUNT() { return getToken(MySqlParser.COUNT, 0); }
		public TerminalNode CPU() { return getToken(MySqlParser.CPU, 0); }
		public TerminalNode CURRENT() { return getToken(MySqlParser.CURRENT, 0); }
		public TerminalNode CURSOR_NAME() { return getToken(MySqlParser.CURSOR_NAME, 0); }
		public TerminalNode DATA() { return getToken(MySqlParser.DATA, 0); }
		public TerminalNode DATAFILE() { return getToken(MySqlParser.DATAFILE, 0); }
		public TerminalNode DEALLOCATE() { return getToken(MySqlParser.DEALLOCATE, 0); }
		public TerminalNode DEFAULT_AUTH() { return getToken(MySqlParser.DEFAULT_AUTH, 0); }
		public TerminalNode DEFINER() { return getToken(MySqlParser.DEFINER, 0); }
		public TerminalNode DELAY_KEY_WRITE() { return getToken(MySqlParser.DELAY_KEY_WRITE, 0); }
		public TerminalNode DES_KEY_FILE() { return getToken(MySqlParser.DES_KEY_FILE, 0); }
		public TerminalNode DIAGNOSTICS() { return getToken(MySqlParser.DIAGNOSTICS, 0); }
		public TerminalNode DIRECTORY() { return getToken(MySqlParser.DIRECTORY, 0); }
		public TerminalNode DISABLE() { return getToken(MySqlParser.DISABLE, 0); }
		public TerminalNode DISCARD() { return getToken(MySqlParser.DISCARD, 0); }
		public TerminalNode DISK() { return getToken(MySqlParser.DISK, 0); }
		public TerminalNode DO() { return getToken(MySqlParser.DO, 0); }
		public TerminalNode DUMPFILE() { return getToken(MySqlParser.DUMPFILE, 0); }
		public TerminalNode DUPLICATE() { return getToken(MySqlParser.DUPLICATE, 0); }
		public TerminalNode DYNAMIC() { return getToken(MySqlParser.DYNAMIC, 0); }
		public TerminalNode ENABLE() { return getToken(MySqlParser.ENABLE, 0); }
		public TerminalNode ENCRYPTION() { return getToken(MySqlParser.ENCRYPTION, 0); }
		public TerminalNode ENCRYPTION_KEY_ADMIN() { return getToken(MySqlParser.ENCRYPTION_KEY_ADMIN, 0); }
		public TerminalNode END() { return getToken(MySqlParser.END, 0); }
		public TerminalNode ENDS() { return getToken(MySqlParser.ENDS, 0); }
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public TerminalNode ENGINES() { return getToken(MySqlParser.ENGINES, 0); }
		public TerminalNode ERROR() { return getToken(MySqlParser.ERROR, 0); }
		public TerminalNode ERRORS() { return getToken(MySqlParser.ERRORS, 0); }
		public TerminalNode ESCAPE() { return getToken(MySqlParser.ESCAPE, 0); }
		public TerminalNode EVEN() { return getToken(MySqlParser.EVEN, 0); }
		public TerminalNode EVENT() { return getToken(MySqlParser.EVENT, 0); }
		public TerminalNode EVENTS() { return getToken(MySqlParser.EVENTS, 0); }
		public TerminalNode EVERY() { return getToken(MySqlParser.EVERY, 0); }
		public TerminalNode EXCHANGE() { return getToken(MySqlParser.EXCHANGE, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(MySqlParser.EXCLUSIVE, 0); }
		public TerminalNode EXPIRE() { return getToken(MySqlParser.EXPIRE, 0); }
		public TerminalNode EXPORT() { return getToken(MySqlParser.EXPORT, 0); }
		public TerminalNode EXTENDED() { return getToken(MySqlParser.EXTENDED, 0); }
		public TerminalNode EXTENT_SIZE() { return getToken(MySqlParser.EXTENT_SIZE, 0); }
		public TerminalNode FAST() { return getToken(MySqlParser.FAST, 0); }
		public TerminalNode FAULTS() { return getToken(MySqlParser.FAULTS, 0); }
		public TerminalNode FIELDS() { return getToken(MySqlParser.FIELDS, 0); }
		public TerminalNode FILE_BLOCK_SIZE() { return getToken(MySqlParser.FILE_BLOCK_SIZE, 0); }
		public TerminalNode FILTER() { return getToken(MySqlParser.FILTER, 0); }
		public TerminalNode FIREWALL_ADMIN() { return getToken(MySqlParser.FIREWALL_ADMIN, 0); }
		public TerminalNode FIREWALL_USER() { return getToken(MySqlParser.FIREWALL_USER, 0); }
		public TerminalNode FIRST() { return getToken(MySqlParser.FIRST, 0); }
		public TerminalNode FIXED() { return getToken(MySqlParser.FIXED, 0); }
		public TerminalNode FLUSH() { return getToken(MySqlParser.FLUSH, 0); }
		public TerminalNode FOLLOWS() { return getToken(MySqlParser.FOLLOWS, 0); }
		public TerminalNode FOUND() { return getToken(MySqlParser.FOUND, 0); }
		public TerminalNode FULL() { return getToken(MySqlParser.FULL, 0); }
		public TerminalNode FUNCTION() { return getToken(MySqlParser.FUNCTION, 0); }
		public TerminalNode GENERAL() { return getToken(MySqlParser.GENERAL, 0); }
		public TerminalNode GLOBAL() { return getToken(MySqlParser.GLOBAL, 0); }
		public TerminalNode GRANTS() { return getToken(MySqlParser.GRANTS, 0); }
		public TerminalNode GROUP() { return getToken(MySqlParser.GROUP, 0); }
		public TerminalNode GROUP_CONCAT() { return getToken(MySqlParser.GROUP_CONCAT, 0); }
		public TerminalNode GROUP_REPLICATION() { return getToken(MySqlParser.GROUP_REPLICATION, 0); }
		public TerminalNode GROUP_REPLICATION_ADMIN() { return getToken(MySqlParser.GROUP_REPLICATION_ADMIN, 0); }
		public TerminalNode HANDLER() { return getToken(MySqlParser.HANDLER, 0); }
		public TerminalNode HASH() { return getToken(MySqlParser.HASH, 0); }
		public TerminalNode HELP() { return getToken(MySqlParser.HELP, 0); }
		public TerminalNode HOST() { return getToken(MySqlParser.HOST, 0); }
		public TerminalNode HOSTS() { return getToken(MySqlParser.HOSTS, 0); }
		public TerminalNode IDENTIFIED() { return getToken(MySqlParser.IDENTIFIED, 0); }
		public TerminalNode IGNORE_SERVER_IDS() { return getToken(MySqlParser.IGNORE_SERVER_IDS, 0); }
		public TerminalNode IMPORT() { return getToken(MySqlParser.IMPORT, 0); }
		public TerminalNode INDEXES() { return getToken(MySqlParser.INDEXES, 0); }
		public TerminalNode INITIAL_SIZE() { return getToken(MySqlParser.INITIAL_SIZE, 0); }
		public TerminalNode INNODB_REDO_LOG_ARCHIVE() { return getToken(MySqlParser.INNODB_REDO_LOG_ARCHIVE, 0); }
		public TerminalNode INPLACE() { return getToken(MySqlParser.INPLACE, 0); }
		public TerminalNode INSERT_METHOD() { return getToken(MySqlParser.INSERT_METHOD, 0); }
		public TerminalNode INSTALL() { return getToken(MySqlParser.INSTALL, 0); }
		public TerminalNode INSTANCE() { return getToken(MySqlParser.INSTANCE, 0); }
		public TerminalNode INTERNAL() { return getToken(MySqlParser.INTERNAL, 0); }
		public TerminalNode INVOKER() { return getToken(MySqlParser.INVOKER, 0); }
		public TerminalNode IO() { return getToken(MySqlParser.IO, 0); }
		public TerminalNode IO_THREAD() { return getToken(MySqlParser.IO_THREAD, 0); }
		public TerminalNode IPC() { return getToken(MySqlParser.IPC, 0); }
		public TerminalNode ISOLATION() { return getToken(MySqlParser.ISOLATION, 0); }
		public TerminalNode ISSUER() { return getToken(MySqlParser.ISSUER, 0); }
		public TerminalNode JSON() { return getToken(MySqlParser.JSON, 0); }
		public TerminalNode KEY_BLOCK_SIZE() { return getToken(MySqlParser.KEY_BLOCK_SIZE, 0); }
		public TerminalNode LANGUAGE() { return getToken(MySqlParser.LANGUAGE, 0); }
		public TerminalNode LAST() { return getToken(MySqlParser.LAST, 0); }
		public TerminalNode LEAVES() { return getToken(MySqlParser.LEAVES, 0); }
		public TerminalNode LESS() { return getToken(MySqlParser.LESS, 0); }
		public TerminalNode LEVEL() { return getToken(MySqlParser.LEVEL, 0); }
		public TerminalNode LIST() { return getToken(MySqlParser.LIST, 0); }
		public TerminalNode LOCAL() { return getToken(MySqlParser.LOCAL, 0); }
		public TerminalNode LOGFILE() { return getToken(MySqlParser.LOGFILE, 0); }
		public TerminalNode LOGS() { return getToken(MySqlParser.LOGS, 0); }
		public TerminalNode MASTER() { return getToken(MySqlParser.MASTER, 0); }
		public TerminalNode MASTER_AUTO_POSITION() { return getToken(MySqlParser.MASTER_AUTO_POSITION, 0); }
		public TerminalNode MASTER_CONNECT_RETRY() { return getToken(MySqlParser.MASTER_CONNECT_RETRY, 0); }
		public TerminalNode MASTER_DELAY() { return getToken(MySqlParser.MASTER_DELAY, 0); }
		public TerminalNode MASTER_HEARTBEAT_PERIOD() { return getToken(MySqlParser.MASTER_HEARTBEAT_PERIOD, 0); }
		public TerminalNode MASTER_HOST() { return getToken(MySqlParser.MASTER_HOST, 0); }
		public TerminalNode MASTER_LOG_FILE() { return getToken(MySqlParser.MASTER_LOG_FILE, 0); }
		public TerminalNode MASTER_LOG_POS() { return getToken(MySqlParser.MASTER_LOG_POS, 0); }
		public TerminalNode MASTER_PASSWORD() { return getToken(MySqlParser.MASTER_PASSWORD, 0); }
		public TerminalNode MASTER_PORT() { return getToken(MySqlParser.MASTER_PORT, 0); }
		public TerminalNode MASTER_RETRY_COUNT() { return getToken(MySqlParser.MASTER_RETRY_COUNT, 0); }
		public TerminalNode MASTER_SSL() { return getToken(MySqlParser.MASTER_SSL, 0); }
		public TerminalNode MASTER_SSL_CA() { return getToken(MySqlParser.MASTER_SSL_CA, 0); }
		public TerminalNode MASTER_SSL_CAPATH() { return getToken(MySqlParser.MASTER_SSL_CAPATH, 0); }
		public TerminalNode MASTER_SSL_CERT() { return getToken(MySqlParser.MASTER_SSL_CERT, 0); }
		public TerminalNode MASTER_SSL_CIPHER() { return getToken(MySqlParser.MASTER_SSL_CIPHER, 0); }
		public TerminalNode MASTER_SSL_CRL() { return getToken(MySqlParser.MASTER_SSL_CRL, 0); }
		public TerminalNode MASTER_SSL_CRLPATH() { return getToken(MySqlParser.MASTER_SSL_CRLPATH, 0); }
		public TerminalNode MASTER_SSL_KEY() { return getToken(MySqlParser.MASTER_SSL_KEY, 0); }
		public TerminalNode MASTER_TLS_VERSION() { return getToken(MySqlParser.MASTER_TLS_VERSION, 0); }
		public TerminalNode MASTER_USER() { return getToken(MySqlParser.MASTER_USER, 0); }
		public TerminalNode MAX_CONNECTIONS_PER_HOUR() { return getToken(MySqlParser.MAX_CONNECTIONS_PER_HOUR, 0); }
		public TerminalNode MAX_QUERIES_PER_HOUR() { return getToken(MySqlParser.MAX_QUERIES_PER_HOUR, 0); }
		public TerminalNode MAX() { return getToken(MySqlParser.MAX, 0); }
		public TerminalNode MAX_ROWS() { return getToken(MySqlParser.MAX_ROWS, 0); }
		public TerminalNode MAX_SIZE() { return getToken(MySqlParser.MAX_SIZE, 0); }
		public TerminalNode MAX_UPDATES_PER_HOUR() { return getToken(MySqlParser.MAX_UPDATES_PER_HOUR, 0); }
		public TerminalNode MAX_USER_CONNECTIONS() { return getToken(MySqlParser.MAX_USER_CONNECTIONS, 0); }
		public TerminalNode MEDIUM() { return getToken(MySqlParser.MEDIUM, 0); }
		public TerminalNode MEMBER() { return getToken(MySqlParser.MEMBER, 0); }
		public TerminalNode MEMORY() { return getToken(MySqlParser.MEMORY, 0); }
		public TerminalNode MERGE() { return getToken(MySqlParser.MERGE, 0); }
		public TerminalNode MESSAGE_TEXT() { return getToken(MySqlParser.MESSAGE_TEXT, 0); }
		public TerminalNode MID() { return getToken(MySqlParser.MID, 0); }
		public TerminalNode MIGRATE() { return getToken(MySqlParser.MIGRATE, 0); }
		public TerminalNode MIN() { return getToken(MySqlParser.MIN, 0); }
		public TerminalNode MIN_ROWS() { return getToken(MySqlParser.MIN_ROWS, 0); }
		public TerminalNode MODE() { return getToken(MySqlParser.MODE, 0); }
		public TerminalNode MODIFY() { return getToken(MySqlParser.MODIFY, 0); }
		public TerminalNode MUTEX() { return getToken(MySqlParser.MUTEX, 0); }
		public TerminalNode MYSQL() { return getToken(MySqlParser.MYSQL, 0); }
		public TerminalNode MYSQL_ERRNO() { return getToken(MySqlParser.MYSQL_ERRNO, 0); }
		public TerminalNode NAME() { return getToken(MySqlParser.NAME, 0); }
		public TerminalNode NAMES() { return getToken(MySqlParser.NAMES, 0); }
		public TerminalNode NCHAR() { return getToken(MySqlParser.NCHAR, 0); }
		public TerminalNode NDB_STORED_USER() { return getToken(MySqlParser.NDB_STORED_USER, 0); }
		public TerminalNode NEVER() { return getToken(MySqlParser.NEVER, 0); }
		public TerminalNode NEXT() { return getToken(MySqlParser.NEXT, 0); }
		public TerminalNode NO() { return getToken(MySqlParser.NO, 0); }
		public TerminalNode NODEGROUP() { return getToken(MySqlParser.NODEGROUP, 0); }
		public TerminalNode NONE() { return getToken(MySqlParser.NONE, 0); }
		public TerminalNode NUMBER() { return getToken(MySqlParser.NUMBER, 0); }
		public TerminalNode OFFLINE() { return getToken(MySqlParser.OFFLINE, 0); }
		public TerminalNode ODBC() { return getToken(MySqlParser.ODBC, 0); }
		public TerminalNode OFFSET() { return getToken(MySqlParser.OFFSET, 0); }
		public TerminalNode OF() { return getToken(MySqlParser.OF, 0); }
		public TerminalNode OJ() { return getToken(MySqlParser.OJ, 0); }
		public TerminalNode OLD_PASSWORD() { return getToken(MySqlParser.OLD_PASSWORD, 0); }
		public TerminalNode ONE() { return getToken(MySqlParser.ONE, 0); }
		public TerminalNode ONLINE() { return getToken(MySqlParser.ONLINE, 0); }
		public TerminalNode ONLY() { return getToken(MySqlParser.ONLY, 0); }
		public TerminalNode OPEN() { return getToken(MySqlParser.OPEN, 0); }
		public TerminalNode OPTIMIZER_COSTS() { return getToken(MySqlParser.OPTIMIZER_COSTS, 0); }
		public TerminalNode OPTIONAL() { return getToken(MySqlParser.OPTIONAL, 0); }
		public TerminalNode OPTIONS() { return getToken(MySqlParser.OPTIONS, 0); }
		public TerminalNode ORDER() { return getToken(MySqlParser.ORDER, 0); }
		public TerminalNode OWNER() { return getToken(MySqlParser.OWNER, 0); }
		public TerminalNode PACK_KEYS() { return getToken(MySqlParser.PACK_KEYS, 0); }
		public TerminalNode PAGE() { return getToken(MySqlParser.PAGE, 0); }
		public TerminalNode PARSER() { return getToken(MySqlParser.PARSER, 0); }
		public TerminalNode PARTIAL() { return getToken(MySqlParser.PARTIAL, 0); }
		public TerminalNode PARTITIONING() { return getToken(MySqlParser.PARTITIONING, 0); }
		public TerminalNode PARTITIONS() { return getToken(MySqlParser.PARTITIONS, 0); }
		public TerminalNode PASSWORD() { return getToken(MySqlParser.PASSWORD, 0); }
		public TerminalNode PERSIST_RO_VARIABLES_ADMIN() { return getToken(MySqlParser.PERSIST_RO_VARIABLES_ADMIN, 0); }
		public TerminalNode PHASE() { return getToken(MySqlParser.PHASE, 0); }
		public TerminalNode PLUGINS() { return getToken(MySqlParser.PLUGINS, 0); }
		public TerminalNode PLUGIN_DIR() { return getToken(MySqlParser.PLUGIN_DIR, 0); }
		public TerminalNode PLUGIN() { return getToken(MySqlParser.PLUGIN, 0); }
		public TerminalNode PORT() { return getToken(MySqlParser.PORT, 0); }
		public TerminalNode PRECEDES() { return getToken(MySqlParser.PRECEDES, 0); }
		public TerminalNode PREPARE() { return getToken(MySqlParser.PREPARE, 0); }
		public TerminalNode PRESERVE() { return getToken(MySqlParser.PRESERVE, 0); }
		public TerminalNode PREV() { return getToken(MySqlParser.PREV, 0); }
		public TerminalNode PROCESSLIST() { return getToken(MySqlParser.PROCESSLIST, 0); }
		public TerminalNode PROFILE() { return getToken(MySqlParser.PROFILE, 0); }
		public TerminalNode PROFILES() { return getToken(MySqlParser.PROFILES, 0); }
		public TerminalNode PROXY() { return getToken(MySqlParser.PROXY, 0); }
		public TerminalNode QUERY() { return getToken(MySqlParser.QUERY, 0); }
		public TerminalNode QUICK() { return getToken(MySqlParser.QUICK, 0); }
		public TerminalNode REBUILD() { return getToken(MySqlParser.REBUILD, 0); }
		public TerminalNode RECOVER() { return getToken(MySqlParser.RECOVER, 0); }
		public TerminalNode REDO_BUFFER_SIZE() { return getToken(MySqlParser.REDO_BUFFER_SIZE, 0); }
		public TerminalNode REDUNDANT() { return getToken(MySqlParser.REDUNDANT, 0); }
		public TerminalNode RELAY() { return getToken(MySqlParser.RELAY, 0); }
		public TerminalNode RELAYLOG() { return getToken(MySqlParser.RELAYLOG, 0); }
		public TerminalNode RELAY_LOG_FILE() { return getToken(MySqlParser.RELAY_LOG_FILE, 0); }
		public TerminalNode RELAY_LOG_POS() { return getToken(MySqlParser.RELAY_LOG_POS, 0); }
		public TerminalNode REMOVE() { return getToken(MySqlParser.REMOVE, 0); }
		public TerminalNode REORGANIZE() { return getToken(MySqlParser.REORGANIZE, 0); }
		public TerminalNode REPAIR() { return getToken(MySqlParser.REPAIR, 0); }
		public TerminalNode REPLICATE_DO_DB() { return getToken(MySqlParser.REPLICATE_DO_DB, 0); }
		public TerminalNode REPLICATE_DO_TABLE() { return getToken(MySqlParser.REPLICATE_DO_TABLE, 0); }
		public TerminalNode REPLICATE_IGNORE_DB() { return getToken(MySqlParser.REPLICATE_IGNORE_DB, 0); }
		public TerminalNode REPLICATE_IGNORE_TABLE() { return getToken(MySqlParser.REPLICATE_IGNORE_TABLE, 0); }
		public TerminalNode REPLICATE_REWRITE_DB() { return getToken(MySqlParser.REPLICATE_REWRITE_DB, 0); }
		public TerminalNode REPLICATE_WILD_DO_TABLE() { return getToken(MySqlParser.REPLICATE_WILD_DO_TABLE, 0); }
		public TerminalNode REPLICATE_WILD_IGNORE_TABLE() { return getToken(MySqlParser.REPLICATE_WILD_IGNORE_TABLE, 0); }
		public TerminalNode REPLICATION() { return getToken(MySqlParser.REPLICATION, 0); }
		public TerminalNode REPLICATION_APPLIER() { return getToken(MySqlParser.REPLICATION_APPLIER, 0); }
		public TerminalNode REPLICATION_SLAVE_ADMIN() { return getToken(MySqlParser.REPLICATION_SLAVE_ADMIN, 0); }
		public TerminalNode RESET() { return getToken(MySqlParser.RESET, 0); }
		public TerminalNode RESOURCE_GROUP_ADMIN() { return getToken(MySqlParser.RESOURCE_GROUP_ADMIN, 0); }
		public TerminalNode RESOURCE_GROUP_USER() { return getToken(MySqlParser.RESOURCE_GROUP_USER, 0); }
		public TerminalNode RESUME() { return getToken(MySqlParser.RESUME, 0); }
		public TerminalNode RETURNED_SQLSTATE() { return getToken(MySqlParser.RETURNED_SQLSTATE, 0); }
		public TerminalNode RETURNS() { return getToken(MySqlParser.RETURNS, 0); }
		public TerminalNode ROLE() { return getToken(MySqlParser.ROLE, 0); }
		public TerminalNode ROLE_ADMIN() { return getToken(MySqlParser.ROLE_ADMIN, 0); }
		public TerminalNode ROLLBACK() { return getToken(MySqlParser.ROLLBACK, 0); }
		public TerminalNode ROLLUP() { return getToken(MySqlParser.ROLLUP, 0); }
		public TerminalNode ROTATE() { return getToken(MySqlParser.ROTATE, 0); }
		public TerminalNode ROW() { return getToken(MySqlParser.ROW, 0); }
		public TerminalNode ROWS() { return getToken(MySqlParser.ROWS, 0); }
		public TerminalNode ROW_FORMAT() { return getToken(MySqlParser.ROW_FORMAT, 0); }
		public TerminalNode SAVEPOINT() { return getToken(MySqlParser.SAVEPOINT, 0); }
		public TerminalNode SCHEDULE() { return getToken(MySqlParser.SCHEDULE, 0); }
		public TerminalNode SCHEMA_NAME() { return getToken(MySqlParser.SCHEMA_NAME, 0); }
		public TerminalNode SECURITY() { return getToken(MySqlParser.SECURITY, 0); }
		public TerminalNode SERIAL() { return getToken(MySqlParser.SERIAL, 0); }
		public TerminalNode SERVER() { return getToken(MySqlParser.SERVER, 0); }
		public TerminalNode SESSION() { return getToken(MySqlParser.SESSION, 0); }
		public TerminalNode SESSION_VARIABLES_ADMIN() { return getToken(MySqlParser.SESSION_VARIABLES_ADMIN, 0); }
		public TerminalNode SET_USER_ID() { return getToken(MySqlParser.SET_USER_ID, 0); }
		public TerminalNode SHARE() { return getToken(MySqlParser.SHARE, 0); }
		public TerminalNode SHARED() { return getToken(MySqlParser.SHARED, 0); }
		public TerminalNode SHOW_ROUTINE() { return getToken(MySqlParser.SHOW_ROUTINE, 0); }
		public TerminalNode SIGNED() { return getToken(MySqlParser.SIGNED, 0); }
		public TerminalNode SIMPLE() { return getToken(MySqlParser.SIMPLE, 0); }
		public TerminalNode SLAVE() { return getToken(MySqlParser.SLAVE, 0); }
		public TerminalNode SLOW() { return getToken(MySqlParser.SLOW, 0); }
		public TerminalNode SNAPSHOT() { return getToken(MySqlParser.SNAPSHOT, 0); }
		public TerminalNode SOCKET() { return getToken(MySqlParser.SOCKET, 0); }
		public TerminalNode SOME() { return getToken(MySqlParser.SOME, 0); }
		public TerminalNode SONAME() { return getToken(MySqlParser.SONAME, 0); }
		public TerminalNode SOUNDS() { return getToken(MySqlParser.SOUNDS, 0); }
		public TerminalNode SOURCE() { return getToken(MySqlParser.SOURCE, 0); }
		public TerminalNode SQL_AFTER_GTIDS() { return getToken(MySqlParser.SQL_AFTER_GTIDS, 0); }
		public TerminalNode SQL_AFTER_MTS_GAPS() { return getToken(MySqlParser.SQL_AFTER_MTS_GAPS, 0); }
		public TerminalNode SQL_BEFORE_GTIDS() { return getToken(MySqlParser.SQL_BEFORE_GTIDS, 0); }
		public TerminalNode SQL_BUFFER_RESULT() { return getToken(MySqlParser.SQL_BUFFER_RESULT, 0); }
		public TerminalNode SQL_CACHE() { return getToken(MySqlParser.SQL_CACHE, 0); }
		public TerminalNode SQL_NO_CACHE() { return getToken(MySqlParser.SQL_NO_CACHE, 0); }
		public TerminalNode SQL_THREAD() { return getToken(MySqlParser.SQL_THREAD, 0); }
		public TerminalNode STACKED() { return getToken(MySqlParser.STACKED, 0); }
		public TerminalNode START() { return getToken(MySqlParser.START, 0); }
		public TerminalNode STARTS() { return getToken(MySqlParser.STARTS, 0); }
		public TerminalNode STATS_AUTO_RECALC() { return getToken(MySqlParser.STATS_AUTO_RECALC, 0); }
		public TerminalNode STATS_PERSISTENT() { return getToken(MySqlParser.STATS_PERSISTENT, 0); }
		public TerminalNode STATS_SAMPLE_PAGES() { return getToken(MySqlParser.STATS_SAMPLE_PAGES, 0); }
		public TerminalNode STATUS() { return getToken(MySqlParser.STATUS, 0); }
		public TerminalNode STD() { return getToken(MySqlParser.STD, 0); }
		public TerminalNode STDDEV() { return getToken(MySqlParser.STDDEV, 0); }
		public TerminalNode STDDEV_POP() { return getToken(MySqlParser.STDDEV_POP, 0); }
		public TerminalNode STDDEV_SAMP() { return getToken(MySqlParser.STDDEV_SAMP, 0); }
		public TerminalNode STOP() { return getToken(MySqlParser.STOP, 0); }
		public TerminalNode STORAGE() { return getToken(MySqlParser.STORAGE, 0); }
		public TerminalNode STRING() { return getToken(MySqlParser.STRING, 0); }
		public TerminalNode SUBCLASS_ORIGIN() { return getToken(MySqlParser.SUBCLASS_ORIGIN, 0); }
		public TerminalNode SUBJECT() { return getToken(MySqlParser.SUBJECT, 0); }
		public TerminalNode SUBPARTITION() { return getToken(MySqlParser.SUBPARTITION, 0); }
		public TerminalNode SUBPARTITIONS() { return getToken(MySqlParser.SUBPARTITIONS, 0); }
		public TerminalNode SUM() { return getToken(MySqlParser.SUM, 0); }
		public TerminalNode SUSPEND() { return getToken(MySqlParser.SUSPEND, 0); }
		public TerminalNode SWAPS() { return getToken(MySqlParser.SWAPS, 0); }
		public TerminalNode SWITCHES() { return getToken(MySqlParser.SWITCHES, 0); }
		public TerminalNode SYSTEM_VARIABLES_ADMIN() { return getToken(MySqlParser.SYSTEM_VARIABLES_ADMIN, 0); }
		public TerminalNode TABLE_NAME() { return getToken(MySqlParser.TABLE_NAME, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public TerminalNode TABLE_ENCRYPTION_ADMIN() { return getToken(MySqlParser.TABLE_ENCRYPTION_ADMIN, 0); }
		public TerminalNode TEMPORARY() { return getToken(MySqlParser.TEMPORARY, 0); }
		public TerminalNode TEMPTABLE() { return getToken(MySqlParser.TEMPTABLE, 0); }
		public TerminalNode THAN() { return getToken(MySqlParser.THAN, 0); }
		public TerminalNode TRADITIONAL() { return getToken(MySqlParser.TRADITIONAL, 0); }
		public TerminalNode TRANSACTION() { return getToken(MySqlParser.TRANSACTION, 0); }
		public TerminalNode TRANSACTIONAL() { return getToken(MySqlParser.TRANSACTIONAL, 0); }
		public TerminalNode TRIGGERS() { return getToken(MySqlParser.TRIGGERS, 0); }
		public TerminalNode TRUNCATE() { return getToken(MySqlParser.TRUNCATE, 0); }
		public TerminalNode UNDEFINED() { return getToken(MySqlParser.UNDEFINED, 0); }
		public TerminalNode UNDOFILE() { return getToken(MySqlParser.UNDOFILE, 0); }
		public TerminalNode UNDO_BUFFER_SIZE() { return getToken(MySqlParser.UNDO_BUFFER_SIZE, 0); }
		public TerminalNode UNINSTALL() { return getToken(MySqlParser.UNINSTALL, 0); }
		public TerminalNode UNKNOWN() { return getToken(MySqlParser.UNKNOWN, 0); }
		public TerminalNode UNTIL() { return getToken(MySqlParser.UNTIL, 0); }
		public TerminalNode UPGRADE() { return getToken(MySqlParser.UPGRADE, 0); }
		public TerminalNode USER() { return getToken(MySqlParser.USER, 0); }
		public TerminalNode USE_FRM() { return getToken(MySqlParser.USE_FRM, 0); }
		public TerminalNode USER_RESOURCES() { return getToken(MySqlParser.USER_RESOURCES, 0); }
		public TerminalNode VALIDATION() { return getToken(MySqlParser.VALIDATION, 0); }
		public TerminalNode VALUE() { return getToken(MySqlParser.VALUE, 0); }
		public TerminalNode VAR_POP() { return getToken(MySqlParser.VAR_POP, 0); }
		public TerminalNode VAR_SAMP() { return getToken(MySqlParser.VAR_SAMP, 0); }
		public TerminalNode VARIABLES() { return getToken(MySqlParser.VARIABLES, 0); }
		public TerminalNode VARIANCE() { return getToken(MySqlParser.VARIANCE, 0); }
		public TerminalNode VERSION_TOKEN_ADMIN() { return getToken(MySqlParser.VERSION_TOKEN_ADMIN, 0); }
		public TerminalNode VIEW() { return getToken(MySqlParser.VIEW, 0); }
		public TerminalNode WAIT() { return getToken(MySqlParser.WAIT, 0); }
		public TerminalNode WARNINGS() { return getToken(MySqlParser.WARNINGS, 0); }
		public TerminalNode WITHOUT() { return getToken(MySqlParser.WITHOUT, 0); }
		public TerminalNode WORK() { return getToken(MySqlParser.WORK, 0); }
		public TerminalNode WRAPPER() { return getToken(MySqlParser.WRAPPER, 0); }
		public TerminalNode X509() { return getToken(MySqlParser.X509, 0); }
		public TerminalNode XA() { return getToken(MySqlParser.XA, 0); }
		public TerminalNode XA_RECOVER_ADMIN() { return getToken(MySqlParser.XA_RECOVER_ADMIN, 0); }
		public TerminalNode XML() { return getToken(MySqlParser.XML, 0); }
		public KeywordsCanBeIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keywordsCanBeId; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterKeywordsCanBeId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitKeywordsCanBeId(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitKeywordsCanBeId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KeywordsCanBeIdContext keywordsCanBeId() throws RecognitionException {
		KeywordsCanBeIdContext _localctx = new KeywordsCanBeIdContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_keywordsCanBeId);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(640);
			_la = _input.LA(1);
			if ( !(((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (GROUP - 32)))) != 0) || ((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (NUMBER - 106)) | (1L << (ORDER - 106)) | (1L << (STACKED - 106)))) != 0) || ((((_la - 222)) & ~0x3f) == 0 && ((1L << (_la - 222)) & ((1L << (SERIAL - 222)) | (1L << (AVG - 222)) | (1L << (BIT_AND - 222)) | (1L << (BIT_OR - 222)) | (1L << (BIT_XOR - 222)) | (1L << (COUNT - 222)) | (1L << (GROUP_CONCAT - 222)) | (1L << (MAX - 222)) | (1L << (MIN - 222)) | (1L << (STD - 222)) | (1L << (STDDEV - 222)) | (1L << (STDDEV_POP - 222)) | (1L << (STDDEV_SAMP - 222)) | (1L << (SUM - 222)) | (1L << (VAR_POP - 222)) | (1L << (VAR_SAMP - 222)) | (1L << (VARIANCE - 222)))) != 0) || ((((_la - 301)) & ~0x3f) == 0 && ((1L << (_la - 301)) & ((1L << (ACCOUNT - 301)) | (1L << (ACTION - 301)) | (1L << (AFTER - 301)) | (1L << (AGGREGATE - 301)) | (1L << (ALGORITHM - 301)) | (1L << (ANY - 301)) | (1L << (AT - 301)) | (1L << (AUTHORS - 301)) | (1L << (AUTOCOMMIT - 301)) | (1L << (AUTOEXTEND_SIZE - 301)) | (1L << (AUTO_INCREMENT - 301)) | (1L << (AVG_ROW_LENGTH - 301)) | (1L << (BEGIN - 301)) | (1L << (BINLOG - 301)) | (1L << (BIT - 301)) | (1L << (BLOCK - 301)) | (1L << (BOOL - 301)) | (1L << (BOOLEAN - 301)) | (1L << (BTREE - 301)) | (1L << (CACHE - 301)) | (1L << (CASCADED - 301)) | (1L << (CHAIN - 301)) | (1L << (CHANGED - 301)) | (1L << (CHANNEL - 301)) | (1L << (CHECKSUM - 301)) | (1L << (PAGE_CHECKSUM - 301)) | (1L << (CIPHER - 301)) | (1L << (CLASS_ORIGIN - 301)) | (1L << (CLIENT - 301)) | (1L << (CLOSE - 301)) | (1L << (COALESCE - 301)) | (1L << (CODE - 301)) | (1L << (COLUMNS - 301)) | (1L << (COLUMN_FORMAT - 301)) | (1L << (COLUMN_NAME - 301)) | (1L << (COMMENT - 301)) | (1L << (COMMIT - 301)) | (1L << (COMPACT - 301)) | (1L << (COMPLETION - 301)) | (1L << (COMPRESSED - 301)) | (1L << (COMPRESSION - 301)) | (1L << (CONCURRENT - 301)) | (1L << (CONNECT - 301)) | (1L << (CONNECTION - 301)) | (1L << (CONSISTENT - 301)) | (1L << (CONSTRAINT_CATALOG - 301)) | (1L << (CONSTRAINT_SCHEMA - 301)) | (1L << (CONSTRAINT_NAME - 301)) | (1L << (CONTAINS - 301)) | (1L << (CONTEXT - 301)) | (1L << (CONTRIBUTORS - 301)) | (1L << (COPY - 301)) | (1L << (CPU - 301)) | (1L << (CURSOR_NAME - 301)) | (1L << (DATA - 301)) | (1L << (DATAFILE - 301)) | (1L << (DEALLOCATE - 301)) | (1L << (DEFAULT_AUTH - 301)) | (1L << (DEFINER - 301)) | (1L << (DELAY_KEY_WRITE - 301)) | (1L << (DES_KEY_FILE - 301)) | (1L << (DIRECTORY - 301)) | (1L << (DISABLE - 301)) | (1L << (DISCARD - 301)))) != 0) || ((((_la - 365)) & ~0x3f) == 0 && ((1L << (_la - 365)) & ((1L << (DISK - 365)) | (1L << (DO - 365)) | (1L << (DUMPFILE - 365)) | (1L << (DUPLICATE - 365)) | (1L << (DYNAMIC - 365)) | (1L << (ENABLE - 365)) | (1L << (ENCRYPTION - 365)) | (1L << (END - 365)) | (1L << (ENDS - 365)) | (1L << (ENGINE - 365)) | (1L << (ENGINES - 365)) | (1L << (ERROR - 365)) | (1L << (ERRORS - 365)) | (1L << (ESCAPE - 365)) | (1L << (EVEN - 365)) | (1L << (EVENT - 365)) | (1L << (EVENTS - 365)) | (1L << (EVERY - 365)) | (1L << (EXCHANGE - 365)) | (1L << (EXCLUSIVE - 365)) | (1L << (EXPIRE - 365)) | (1L << (EXPORT - 365)) | (1L << (EXTENDED - 365)) | (1L << (EXTENT_SIZE - 365)) | (1L << (FAST - 365)) | (1L << (FAULTS - 365)) | (1L << (FIELDS - 365)) | (1L << (FILE_BLOCK_SIZE - 365)) | (1L << (FILTER - 365)) | (1L << (FIRST - 365)) | (1L << (FIXED - 365)) | (1L << (FLUSH - 365)) | (1L << (FOLLOWS - 365)) | (1L << (FOUND - 365)) | (1L << (FULL - 365)) | (1L << (FUNCTION - 365)) | (1L << (GENERAL - 365)) | (1L << (GLOBAL - 365)) | (1L << (GRANTS - 365)) | (1L << (GROUP_REPLICATION - 365)) | (1L << (HANDLER - 365)) | (1L << (HASH - 365)) | (1L << (HELP - 365)) | (1L << (HOST - 365)) | (1L << (HOSTS - 365)) | (1L << (IDENTIFIED - 365)) | (1L << (IGNORE_SERVER_IDS - 365)) | (1L << (IMPORT - 365)) | (1L << (INDEXES - 365)) | (1L << (INITIAL_SIZE - 365)) | (1L << (INPLACE - 365)) | (1L << (INSERT_METHOD - 365)) | (1L << (INSTALL - 365)) | (1L << (INSTANCE - 365)) | (1L << (INVOKER - 365)) | (1L << (IO - 365)) | (1L << (IO_THREAD - 365)) | (1L << (IPC - 365)) | (1L << (ISOLATION - 365)) | (1L << (ISSUER - 365)) | (1L << (JSON - 365)) | (1L << (KEY_BLOCK_SIZE - 365)) | (1L << (LANGUAGE - 365)))) != 0) || ((((_la - 429)) & ~0x3f) == 0 && ((1L << (_la - 429)) & ((1L << (LAST - 429)) | (1L << (LEAVES - 429)) | (1L << (LESS - 429)) | (1L << (LEVEL - 429)) | (1L << (LIST - 429)) | (1L << (LOCAL - 429)) | (1L << (LOGFILE - 429)) | (1L << (LOGS - 429)) | (1L << (MASTER - 429)) | (1L << (MASTER_AUTO_POSITION - 429)) | (1L << (MASTER_CONNECT_RETRY - 429)) | (1L << (MASTER_DELAY - 429)) | (1L << (MASTER_HEARTBEAT_PERIOD - 429)) | (1L << (MASTER_HOST - 429)) | (1L << (MASTER_LOG_FILE - 429)) | (1L << (MASTER_LOG_POS - 429)) | (1L << (MASTER_PASSWORD - 429)) | (1L << (MASTER_PORT - 429)) | (1L << (MASTER_RETRY_COUNT - 429)) | (1L << (MASTER_SSL - 429)) | (1L << (MASTER_SSL_CA - 429)) | (1L << (MASTER_SSL_CAPATH - 429)) | (1L << (MASTER_SSL_CERT - 429)) | (1L << (MASTER_SSL_CIPHER - 429)) | (1L << (MASTER_SSL_CRL - 429)) | (1L << (MASTER_SSL_CRLPATH - 429)) | (1L << (MASTER_SSL_KEY - 429)) | (1L << (MASTER_TLS_VERSION - 429)) | (1L << (MASTER_USER - 429)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 429)) | (1L << (MAX_QUERIES_PER_HOUR - 429)) | (1L << (MAX_ROWS - 429)) | (1L << (MAX_SIZE - 429)) | (1L << (MAX_UPDATES_PER_HOUR - 429)) | (1L << (MAX_USER_CONNECTIONS - 429)) | (1L << (MEDIUM - 429)) | (1L << (MEMBER - 429)) | (1L << (MERGE - 429)) | (1L << (MESSAGE_TEXT - 429)) | (1L << (MID - 429)) | (1L << (MIGRATE - 429)) | (1L << (MIN_ROWS - 429)) | (1L << (MODE - 429)) | (1L << (MODIFY - 429)) | (1L << (MUTEX - 429)) | (1L << (MYSQL - 429)) | (1L << (MYSQL_ERRNO - 429)) | (1L << (NAME - 429)) | (1L << (NAMES - 429)) | (1L << (NCHAR - 429)) | (1L << (NEVER - 429)) | (1L << (NEXT - 429)) | (1L << (NO - 429)) | (1L << (NODEGROUP - 429)) | (1L << (NONE - 429)) | (1L << (ODBC - 429)) | (1L << (OFFLINE - 429)) | (1L << (OFFSET - 429)) | (1L << (OF - 429)) | (1L << (OJ - 429)) | (1L << (OLD_PASSWORD - 429)) | (1L << (ONE - 429)) | (1L << (ONLINE - 429)) | (1L << (ONLY - 429)))) != 0) || ((((_la - 493)) & ~0x3f) == 0 && ((1L << (_la - 493)) & ((1L << (OPEN - 493)) | (1L << (OPTIMIZER_COSTS - 493)) | (1L << (OPTIONS - 493)) | (1L << (OWNER - 493)) | (1L << (PACK_KEYS - 493)) | (1L << (PAGE - 493)) | (1L << (PARSER - 493)) | (1L << (PARTIAL - 493)) | (1L << (PARTITIONING - 493)) | (1L << (PARTITIONS - 493)) | (1L << (PASSWORD - 493)) | (1L << (PHASE - 493)) | (1L << (PLUGIN - 493)) | (1L << (PLUGIN_DIR - 493)) | (1L << (PLUGINS - 493)) | (1L << (PORT - 493)) | (1L << (PRECEDES - 493)) | (1L << (PREPARE - 493)) | (1L << (PRESERVE - 493)) | (1L << (PREV - 493)) | (1L << (PROCESSLIST - 493)) | (1L << (PROFILE - 493)) | (1L << (PROFILES - 493)) | (1L << (PROXY - 493)) | (1L << (QUERY - 493)) | (1L << (QUICK - 493)) | (1L << (REBUILD - 493)) | (1L << (RECOVER - 493)) | (1L << (REDO_BUFFER_SIZE - 493)) | (1L << (REDUNDANT - 493)) | (1L << (RELAY - 493)) | (1L << (RELAY_LOG_FILE - 493)) | (1L << (RELAY_LOG_POS - 493)) | (1L << (RELAYLOG - 493)) | (1L << (REMOVE - 493)) | (1L << (REORGANIZE - 493)) | (1L << (REPAIR - 493)) | (1L << (REPLICATE_DO_DB - 493)) | (1L << (REPLICATE_DO_TABLE - 493)) | (1L << (REPLICATE_IGNORE_DB - 493)) | (1L << (REPLICATE_IGNORE_TABLE - 493)) | (1L << (REPLICATE_REWRITE_DB - 493)) | (1L << (REPLICATE_WILD_DO_TABLE - 493)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 493)) | (1L << (REPLICATION - 493)) | (1L << (RESET - 493)) | (1L << (RESUME - 493)) | (1L << (RETURNED_SQLSTATE - 493)) | (1L << (RETURNS - 493)) | (1L << (ROLE - 493)) | (1L << (ROLLBACK - 493)) | (1L << (ROLLUP - 493)) | (1L << (ROTATE - 493)) | (1L << (ROW - 493)) | (1L << (ROWS - 493)) | (1L << (ROW_FORMAT - 493)) | (1L << (SAVEPOINT - 493)) | (1L << (SCHEDULE - 493)) | (1L << (SECURITY - 493)) | (1L << (SERVER - 493)) | (1L << (SESSION - 493)) | (1L << (SHARE - 493)) | (1L << (SHARED - 493)))) != 0) || ((((_la - 557)) & ~0x3f) == 0 && ((1L << (_la - 557)) & ((1L << (SIGNED - 557)) | (1L << (SIMPLE - 557)) | (1L << (SLAVE - 557)) | (1L << (SLOW - 557)) | (1L << (SNAPSHOT - 557)) | (1L << (SOCKET - 557)) | (1L << (SOME - 557)) | (1L << (SONAME - 557)) | (1L << (SOUNDS - 557)) | (1L << (SOURCE - 557)) | (1L << (SQL_AFTER_GTIDS - 557)) | (1L << (SQL_AFTER_MTS_GAPS - 557)) | (1L << (SQL_BEFORE_GTIDS - 557)) | (1L << (SQL_BUFFER_RESULT - 557)) | (1L << (SQL_CACHE - 557)) | (1L << (SQL_NO_CACHE - 557)) | (1L << (SQL_THREAD - 557)) | (1L << (START - 557)) | (1L << (STARTS - 557)) | (1L << (STATS_AUTO_RECALC - 557)) | (1L << (STATS_PERSISTENT - 557)) | (1L << (STATS_SAMPLE_PAGES - 557)) | (1L << (STATUS - 557)) | (1L << (STOP - 557)) | (1L << (STORAGE - 557)) | (1L << (STRING - 557)) | (1L << (SUBCLASS_ORIGIN - 557)) | (1L << (SUBJECT - 557)) | (1L << (SUBPARTITION - 557)) | (1L << (SUBPARTITIONS - 557)) | (1L << (SUSPEND - 557)) | (1L << (SWAPS - 557)) | (1L << (SWITCHES - 557)) | (1L << (TABLE_NAME - 557)) | (1L << (TABLESPACE - 557)) | (1L << (TEMPORARY - 557)) | (1L << (TEMPTABLE - 557)) | (1L << (THAN - 557)) | (1L << (TRADITIONAL - 557)) | (1L << (TRANSACTION - 557)) | (1L << (TRANSACTIONAL - 557)) | (1L << (TRIGGERS - 557)) | (1L << (TRUNCATE - 557)) | (1L << (UNDEFINED - 557)) | (1L << (UNDOFILE - 557)) | (1L << (UNDO_BUFFER_SIZE - 557)) | (1L << (UNINSTALL - 557)) | (1L << (UNKNOWN - 557)) | (1L << (UNTIL - 557)) | (1L << (UPGRADE - 557)) | (1L << (USER - 557)) | (1L << (USE_FRM - 557)) | (1L << (USER_RESOURCES - 557)) | (1L << (VALIDATION - 557)) | (1L << (VALUE - 557)) | (1L << (VARIABLES - 557)) | (1L << (VIEW - 557)) | (1L << (WAIT - 557)) | (1L << (WARNINGS - 557)) | (1L << (WITHOUT - 557)))) != 0) || ((((_la - 621)) & ~0x3f) == 0 && ((1L << (_la - 621)) & ((1L << (WORK - 621)) | (1L << (WRAPPER - 621)) | (1L << (X509 - 621)) | (1L << (XA - 621)) | (1L << (XML - 621)) | (1L << (INTERNAL - 621)) | (1L << (AUDIT_ADMIN - 621)) | (1L << (BACKUP_ADMIN - 621)) | (1L << (BINLOG_ADMIN - 621)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 621)) | (1L << (CLONE_ADMIN - 621)) | (1L << (CONNECTION_ADMIN - 621)) | (1L << (ENCRYPTION_KEY_ADMIN - 621)) | (1L << (FIREWALL_ADMIN - 621)) | (1L << (FIREWALL_USER - 621)) | (1L << (GROUP_REPLICATION_ADMIN - 621)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 621)) | (1L << (NDB_STORED_USER - 621)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 621)) | (1L << (REPLICATION_APPLIER - 621)) | (1L << (REPLICATION_SLAVE_ADMIN - 621)) | (1L << (RESOURCE_GROUP_ADMIN - 621)) | (1L << (RESOURCE_GROUP_USER - 621)) | (1L << (ROLE_ADMIN - 621)) | (1L << (SESSION_VARIABLES_ADMIN - 621)) | (1L << (SET_USER_ID - 621)) | (1L << (SHOW_ROUTINE - 621)) | (1L << (SYSTEM_VARIABLES_ADMIN - 621)) | (1L << (TABLE_ENCRYPTION_ADMIN - 621)) | (1L << (VERSION_TOKEN_ADMIN - 621)) | (1L << (XA_RECOVER_ADMIN - 621)))) != 0) || _la==MEMORY || _la==CATALOG_NAME || _la==SCHEMA_NAME || _la==OPTIONAL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionNameBaseContext extends ParserRuleContext {
		public TerminalNode ABS() { return getToken(MySqlParser.ABS, 0); }
		public TerminalNode ACOS() { return getToken(MySqlParser.ACOS, 0); }
		public TerminalNode ADDDATE() { return getToken(MySqlParser.ADDDATE, 0); }
		public TerminalNode ADDTIME() { return getToken(MySqlParser.ADDTIME, 0); }
		public TerminalNode AES_DECRYPT() { return getToken(MySqlParser.AES_DECRYPT, 0); }
		public TerminalNode AES_ENCRYPT() { return getToken(MySqlParser.AES_ENCRYPT, 0); }
		public TerminalNode AREA() { return getToken(MySqlParser.AREA, 0); }
		public TerminalNode ASBINARY() { return getToken(MySqlParser.ASBINARY, 0); }
		public TerminalNode ASIN() { return getToken(MySqlParser.ASIN, 0); }
		public TerminalNode ASTEXT() { return getToken(MySqlParser.ASTEXT, 0); }
		public TerminalNode ASWKB() { return getToken(MySqlParser.ASWKB, 0); }
		public TerminalNode ASWKT() { return getToken(MySqlParser.ASWKT, 0); }
		public TerminalNode ASYMMETRIC_DECRYPT() { return getToken(MySqlParser.ASYMMETRIC_DECRYPT, 0); }
		public TerminalNode ASYMMETRIC_DERIVE() { return getToken(MySqlParser.ASYMMETRIC_DERIVE, 0); }
		public TerminalNode ASYMMETRIC_ENCRYPT() { return getToken(MySqlParser.ASYMMETRIC_ENCRYPT, 0); }
		public TerminalNode ASYMMETRIC_SIGN() { return getToken(MySqlParser.ASYMMETRIC_SIGN, 0); }
		public TerminalNode ASYMMETRIC_VERIFY() { return getToken(MySqlParser.ASYMMETRIC_VERIFY, 0); }
		public TerminalNode ATAN() { return getToken(MySqlParser.ATAN, 0); }
		public TerminalNode ATAN2() { return getToken(MySqlParser.ATAN2, 0); }
		public TerminalNode BENCHMARK() { return getToken(MySqlParser.BENCHMARK, 0); }
		public TerminalNode BIN() { return getToken(MySqlParser.BIN, 0); }
		public TerminalNode BIT_COUNT() { return getToken(MySqlParser.BIT_COUNT, 0); }
		public TerminalNode BIT_LENGTH() { return getToken(MySqlParser.BIT_LENGTH, 0); }
		public TerminalNode BUFFER() { return getToken(MySqlParser.BUFFER, 0); }
		public TerminalNode CEIL() { return getToken(MySqlParser.CEIL, 0); }
		public TerminalNode CEILING() { return getToken(MySqlParser.CEILING, 0); }
		public TerminalNode CENTROID() { return getToken(MySqlParser.CENTROID, 0); }
		public TerminalNode CHARACTER_LENGTH() { return getToken(MySqlParser.CHARACTER_LENGTH, 0); }
		public TerminalNode CHARSET() { return getToken(MySqlParser.CHARSET, 0); }
		public TerminalNode CHAR_LENGTH() { return getToken(MySqlParser.CHAR_LENGTH, 0); }
		public TerminalNode COERCIBILITY() { return getToken(MySqlParser.COERCIBILITY, 0); }
		public TerminalNode COLLATION() { return getToken(MySqlParser.COLLATION, 0); }
		public TerminalNode COMPRESS() { return getToken(MySqlParser.COMPRESS, 0); }
		public TerminalNode CONCAT() { return getToken(MySqlParser.CONCAT, 0); }
		public TerminalNode CONCAT_WS() { return getToken(MySqlParser.CONCAT_WS, 0); }
		public TerminalNode CONNECTION_ID() { return getToken(MySqlParser.CONNECTION_ID, 0); }
		public TerminalNode CONV() { return getToken(MySqlParser.CONV, 0); }
		public TerminalNode CONVERT_TZ() { return getToken(MySqlParser.CONVERT_TZ, 0); }
		public TerminalNode COS() { return getToken(MySqlParser.COS, 0); }
		public TerminalNode COT() { return getToken(MySqlParser.COT, 0); }
		public TerminalNode COUNT() { return getToken(MySqlParser.COUNT, 0); }
		public TerminalNode CRC32() { return getToken(MySqlParser.CRC32, 0); }
		public TerminalNode CREATE_ASYMMETRIC_PRIV_KEY() { return getToken(MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, 0); }
		public TerminalNode CREATE_ASYMMETRIC_PUB_KEY() { return getToken(MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, 0); }
		public TerminalNode CREATE_DH_PARAMETERS() { return getToken(MySqlParser.CREATE_DH_PARAMETERS, 0); }
		public TerminalNode CREATE_DIGEST() { return getToken(MySqlParser.CREATE_DIGEST, 0); }
		public TerminalNode CROSSES() { return getToken(MySqlParser.CROSSES, 0); }
		public TerminalNode DATABASE() { return getToken(MySqlParser.DATABASE, 0); }
		public TerminalNode DATE() { return getToken(MySqlParser.DATE, 0); }
		public TerminalNode DATEDIFF() { return getToken(MySqlParser.DATEDIFF, 0); }
		public TerminalNode DATE_FORMAT() { return getToken(MySqlParser.DATE_FORMAT, 0); }
		public TerminalNode DAY() { return getToken(MySqlParser.DAY, 0); }
		public TerminalNode DAYNAME() { return getToken(MySqlParser.DAYNAME, 0); }
		public TerminalNode DAYOFMONTH() { return getToken(MySqlParser.DAYOFMONTH, 0); }
		public TerminalNode DAYOFWEEK() { return getToken(MySqlParser.DAYOFWEEK, 0); }
		public TerminalNode DAYOFYEAR() { return getToken(MySqlParser.DAYOFYEAR, 0); }
		public TerminalNode DECODE() { return getToken(MySqlParser.DECODE, 0); }
		public TerminalNode DEGREES() { return getToken(MySqlParser.DEGREES, 0); }
		public TerminalNode DES_DECRYPT() { return getToken(MySqlParser.DES_DECRYPT, 0); }
		public TerminalNode DES_ENCRYPT() { return getToken(MySqlParser.DES_ENCRYPT, 0); }
		public TerminalNode DIMENSION() { return getToken(MySqlParser.DIMENSION, 0); }
		public TerminalNode DISJOINT() { return getToken(MySqlParser.DISJOINT, 0); }
		public TerminalNode ELT() { return getToken(MySqlParser.ELT, 0); }
		public TerminalNode ENCODE() { return getToken(MySqlParser.ENCODE, 0); }
		public TerminalNode ENCRYPT() { return getToken(MySqlParser.ENCRYPT, 0); }
		public TerminalNode ENDPOINT() { return getToken(MySqlParser.ENDPOINT, 0); }
		public TerminalNode ENVELOPE() { return getToken(MySqlParser.ENVELOPE, 0); }
		public TerminalNode EQUALS() { return getToken(MySqlParser.EQUALS, 0); }
		public TerminalNode EXP() { return getToken(MySqlParser.EXP, 0); }
		public TerminalNode EXPORT_SET() { return getToken(MySqlParser.EXPORT_SET, 0); }
		public TerminalNode EXTERIORRING() { return getToken(MySqlParser.EXTERIORRING, 0); }
		public TerminalNode EXTRACTVALUE() { return getToken(MySqlParser.EXTRACTVALUE, 0); }
		public TerminalNode FIELD() { return getToken(MySqlParser.FIELD, 0); }
		public TerminalNode FIND_IN_SET() { return getToken(MySqlParser.FIND_IN_SET, 0); }
		public TerminalNode FLOOR() { return getToken(MySqlParser.FLOOR, 0); }
		public TerminalNode FORMAT() { return getToken(MySqlParser.FORMAT, 0); }
		public TerminalNode FOUND_ROWS() { return getToken(MySqlParser.FOUND_ROWS, 0); }
		public TerminalNode FROM_BASE64() { return getToken(MySqlParser.FROM_BASE64, 0); }
		public TerminalNode FROM_DAYS() { return getToken(MySqlParser.FROM_DAYS, 0); }
		public TerminalNode FROM_UNIXTIME() { return getToken(MySqlParser.FROM_UNIXTIME, 0); }
		public TerminalNode GEOMCOLLFROMTEXT() { return getToken(MySqlParser.GEOMCOLLFROMTEXT, 0); }
		public TerminalNode GEOMCOLLFROMWKB() { return getToken(MySqlParser.GEOMCOLLFROMWKB, 0); }
		public TerminalNode GEOMETRYCOLLECTION() { return getToken(MySqlParser.GEOMETRYCOLLECTION, 0); }
		public TerminalNode GEOMETRYCOLLECTIONFROMTEXT() { return getToken(MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, 0); }
		public TerminalNode GEOMETRYCOLLECTIONFROMWKB() { return getToken(MySqlParser.GEOMETRYCOLLECTIONFROMWKB, 0); }
		public TerminalNode GEOMETRYFROMTEXT() { return getToken(MySqlParser.GEOMETRYFROMTEXT, 0); }
		public TerminalNode GEOMETRYFROMWKB() { return getToken(MySqlParser.GEOMETRYFROMWKB, 0); }
		public TerminalNode GEOMETRYN() { return getToken(MySqlParser.GEOMETRYN, 0); }
		public TerminalNode GEOMETRYTYPE() { return getToken(MySqlParser.GEOMETRYTYPE, 0); }
		public TerminalNode GEOMFROMTEXT() { return getToken(MySqlParser.GEOMFROMTEXT, 0); }
		public TerminalNode GEOMFROMWKB() { return getToken(MySqlParser.GEOMFROMWKB, 0); }
		public TerminalNode GET_FORMAT() { return getToken(MySqlParser.GET_FORMAT, 0); }
		public TerminalNode GET_LOCK() { return getToken(MySqlParser.GET_LOCK, 0); }
		public TerminalNode GLENGTH() { return getToken(MySqlParser.GLENGTH, 0); }
		public TerminalNode GREATEST() { return getToken(MySqlParser.GREATEST, 0); }
		public TerminalNode GTID_SUBSET() { return getToken(MySqlParser.GTID_SUBSET, 0); }
		public TerminalNode GTID_SUBTRACT() { return getToken(MySqlParser.GTID_SUBTRACT, 0); }
		public TerminalNode HEX() { return getToken(MySqlParser.HEX, 0); }
		public TerminalNode HOUR() { return getToken(MySqlParser.HOUR, 0); }
		public TerminalNode IFNULL() { return getToken(MySqlParser.IFNULL, 0); }
		public TerminalNode INET6_ATON() { return getToken(MySqlParser.INET6_ATON, 0); }
		public TerminalNode INET6_NTOA() { return getToken(MySqlParser.INET6_NTOA, 0); }
		public TerminalNode INET_ATON() { return getToken(MySqlParser.INET_ATON, 0); }
		public TerminalNode INET_NTOA() { return getToken(MySqlParser.INET_NTOA, 0); }
		public TerminalNode INSTR() { return getToken(MySqlParser.INSTR, 0); }
		public TerminalNode INTERIORRINGN() { return getToken(MySqlParser.INTERIORRINGN, 0); }
		public TerminalNode INTERSECTS() { return getToken(MySqlParser.INTERSECTS, 0); }
		public TerminalNode INVISIBLE() { return getToken(MySqlParser.INVISIBLE, 0); }
		public TerminalNode ISCLOSED() { return getToken(MySqlParser.ISCLOSED, 0); }
		public TerminalNode ISEMPTY() { return getToken(MySqlParser.ISEMPTY, 0); }
		public TerminalNode ISNULL() { return getToken(MySqlParser.ISNULL, 0); }
		public TerminalNode ISSIMPLE() { return getToken(MySqlParser.ISSIMPLE, 0); }
		public TerminalNode IS_FREE_LOCK() { return getToken(MySqlParser.IS_FREE_LOCK, 0); }
		public TerminalNode IS_IPV4() { return getToken(MySqlParser.IS_IPV4, 0); }
		public TerminalNode IS_IPV4_COMPAT() { return getToken(MySqlParser.IS_IPV4_COMPAT, 0); }
		public TerminalNode IS_IPV4_MAPPED() { return getToken(MySqlParser.IS_IPV4_MAPPED, 0); }
		public TerminalNode IS_IPV6() { return getToken(MySqlParser.IS_IPV6, 0); }
		public TerminalNode IS_USED_LOCK() { return getToken(MySqlParser.IS_USED_LOCK, 0); }
		public TerminalNode LAST_INSERT_ID() { return getToken(MySqlParser.LAST_INSERT_ID, 0); }
		public TerminalNode LCASE() { return getToken(MySqlParser.LCASE, 0); }
		public TerminalNode LEAST() { return getToken(MySqlParser.LEAST, 0); }
		public TerminalNode LEFT() { return getToken(MySqlParser.LEFT, 0); }
		public TerminalNode LENGTH() { return getToken(MySqlParser.LENGTH, 0); }
		public TerminalNode LINEFROMTEXT() { return getToken(MySqlParser.LINEFROMTEXT, 0); }
		public TerminalNode LINEFROMWKB() { return getToken(MySqlParser.LINEFROMWKB, 0); }
		public TerminalNode LINESTRING() { return getToken(MySqlParser.LINESTRING, 0); }
		public TerminalNode LINESTRINGFROMTEXT() { return getToken(MySqlParser.LINESTRINGFROMTEXT, 0); }
		public TerminalNode LINESTRINGFROMWKB() { return getToken(MySqlParser.LINESTRINGFROMWKB, 0); }
		public TerminalNode LN() { return getToken(MySqlParser.LN, 0); }
		public TerminalNode LOAD_FILE() { return getToken(MySqlParser.LOAD_FILE, 0); }
		public TerminalNode LOCATE() { return getToken(MySqlParser.LOCATE, 0); }
		public TerminalNode LOG() { return getToken(MySqlParser.LOG, 0); }
		public TerminalNode LOG10() { return getToken(MySqlParser.LOG10, 0); }
		public TerminalNode LOG2() { return getToken(MySqlParser.LOG2, 0); }
		public TerminalNode LOWER() { return getToken(MySqlParser.LOWER, 0); }
		public TerminalNode LPAD() { return getToken(MySqlParser.LPAD, 0); }
		public TerminalNode LTRIM() { return getToken(MySqlParser.LTRIM, 0); }
		public TerminalNode MAKEDATE() { return getToken(MySqlParser.MAKEDATE, 0); }
		public TerminalNode MAKETIME() { return getToken(MySqlParser.MAKETIME, 0); }
		public TerminalNode MAKE_SET() { return getToken(MySqlParser.MAKE_SET, 0); }
		public TerminalNode MASTER_POS_WAIT() { return getToken(MySqlParser.MASTER_POS_WAIT, 0); }
		public TerminalNode MBRCONTAINS() { return getToken(MySqlParser.MBRCONTAINS, 0); }
		public TerminalNode MBRDISJOINT() { return getToken(MySqlParser.MBRDISJOINT, 0); }
		public TerminalNode MBREQUAL() { return getToken(MySqlParser.MBREQUAL, 0); }
		public TerminalNode MBRINTERSECTS() { return getToken(MySqlParser.MBRINTERSECTS, 0); }
		public TerminalNode MBROVERLAPS() { return getToken(MySqlParser.MBROVERLAPS, 0); }
		public TerminalNode MBRTOUCHES() { return getToken(MySqlParser.MBRTOUCHES, 0); }
		public TerminalNode MBRWITHIN() { return getToken(MySqlParser.MBRWITHIN, 0); }
		public TerminalNode MD5() { return getToken(MySqlParser.MD5, 0); }
		public TerminalNode MICROSECOND() { return getToken(MySqlParser.MICROSECOND, 0); }
		public TerminalNode MINUTE() { return getToken(MySqlParser.MINUTE, 0); }
		public TerminalNode MLINEFROMTEXT() { return getToken(MySqlParser.MLINEFROMTEXT, 0); }
		public TerminalNode MLINEFROMWKB() { return getToken(MySqlParser.MLINEFROMWKB, 0); }
		public TerminalNode MOD() { return getToken(MySqlParser.MOD, 0); }
		public TerminalNode MONTH() { return getToken(MySqlParser.MONTH, 0); }
		public TerminalNode MONTHNAME() { return getToken(MySqlParser.MONTHNAME, 0); }
		public TerminalNode MPOINTFROMTEXT() { return getToken(MySqlParser.MPOINTFROMTEXT, 0); }
		public TerminalNode MPOINTFROMWKB() { return getToken(MySqlParser.MPOINTFROMWKB, 0); }
		public TerminalNode MPOLYFROMTEXT() { return getToken(MySqlParser.MPOLYFROMTEXT, 0); }
		public TerminalNode MPOLYFROMWKB() { return getToken(MySqlParser.MPOLYFROMWKB, 0); }
		public TerminalNode MULTILINESTRING() { return getToken(MySqlParser.MULTILINESTRING, 0); }
		public TerminalNode MULTILINESTRINGFROMTEXT() { return getToken(MySqlParser.MULTILINESTRINGFROMTEXT, 0); }
		public TerminalNode MULTILINESTRINGFROMWKB() { return getToken(MySqlParser.MULTILINESTRINGFROMWKB, 0); }
		public TerminalNode MULTIPOINT() { return getToken(MySqlParser.MULTIPOINT, 0); }
		public TerminalNode MULTIPOINTFROMTEXT() { return getToken(MySqlParser.MULTIPOINTFROMTEXT, 0); }
		public TerminalNode MULTIPOINTFROMWKB() { return getToken(MySqlParser.MULTIPOINTFROMWKB, 0); }
		public TerminalNode MULTIPOLYGON() { return getToken(MySqlParser.MULTIPOLYGON, 0); }
		public TerminalNode MULTIPOLYGONFROMTEXT() { return getToken(MySqlParser.MULTIPOLYGONFROMTEXT, 0); }
		public TerminalNode MULTIPOLYGONFROMWKB() { return getToken(MySqlParser.MULTIPOLYGONFROMWKB, 0); }
		public TerminalNode NAME_CONST() { return getToken(MySqlParser.NAME_CONST, 0); }
		public TerminalNode NULLIF() { return getToken(MySqlParser.NULLIF, 0); }
		public TerminalNode NUMGEOMETRIES() { return getToken(MySqlParser.NUMGEOMETRIES, 0); }
		public TerminalNode NUMINTERIORRINGS() { return getToken(MySqlParser.NUMINTERIORRINGS, 0); }
		public TerminalNode NUMPOINTS() { return getToken(MySqlParser.NUMPOINTS, 0); }
		public TerminalNode OCT() { return getToken(MySqlParser.OCT, 0); }
		public TerminalNode OCTET_LENGTH() { return getToken(MySqlParser.OCTET_LENGTH, 0); }
		public TerminalNode ORD() { return getToken(MySqlParser.ORD, 0); }
		public TerminalNode OVERLAPS() { return getToken(MySqlParser.OVERLAPS, 0); }
		public TerminalNode PERIOD_ADD() { return getToken(MySqlParser.PERIOD_ADD, 0); }
		public TerminalNode PERIOD_DIFF() { return getToken(MySqlParser.PERIOD_DIFF, 0); }
		public TerminalNode PI() { return getToken(MySqlParser.PI, 0); }
		public TerminalNode POINT() { return getToken(MySqlParser.POINT, 0); }
		public TerminalNode POINTFROMTEXT() { return getToken(MySqlParser.POINTFROMTEXT, 0); }
		public TerminalNode POINTFROMWKB() { return getToken(MySqlParser.POINTFROMWKB, 0); }
		public TerminalNode POINTN() { return getToken(MySqlParser.POINTN, 0); }
		public TerminalNode POLYFROMTEXT() { return getToken(MySqlParser.POLYFROMTEXT, 0); }
		public TerminalNode POLYFROMWKB() { return getToken(MySqlParser.POLYFROMWKB, 0); }
		public TerminalNode POLYGON() { return getToken(MySqlParser.POLYGON, 0); }
		public TerminalNode POLYGONFROMTEXT() { return getToken(MySqlParser.POLYGONFROMTEXT, 0); }
		public TerminalNode POLYGONFROMWKB() { return getToken(MySqlParser.POLYGONFROMWKB, 0); }
		public TerminalNode POSITION() { return getToken(MySqlParser.POSITION, 0); }
		public TerminalNode POW() { return getToken(MySqlParser.POW, 0); }
		public TerminalNode POWER() { return getToken(MySqlParser.POWER, 0); }
		public TerminalNode QUARTER() { return getToken(MySqlParser.QUARTER, 0); }
		public TerminalNode QUOTE() { return getToken(MySqlParser.QUOTE, 0); }
		public TerminalNode RADIANS() { return getToken(MySqlParser.RADIANS, 0); }
		public TerminalNode RAND() { return getToken(MySqlParser.RAND, 0); }
		public TerminalNode RANDOM_BYTES() { return getToken(MySqlParser.RANDOM_BYTES, 0); }
		public TerminalNode RELEASE_LOCK() { return getToken(MySqlParser.RELEASE_LOCK, 0); }
		public TerminalNode REVERSE() { return getToken(MySqlParser.REVERSE, 0); }
		public TerminalNode RIGHT() { return getToken(MySqlParser.RIGHT, 0); }
		public TerminalNode ROUND() { return getToken(MySqlParser.ROUND, 0); }
		public TerminalNode ROW_COUNT() { return getToken(MySqlParser.ROW_COUNT, 0); }
		public TerminalNode RPAD() { return getToken(MySqlParser.RPAD, 0); }
		public TerminalNode RTRIM() { return getToken(MySqlParser.RTRIM, 0); }
		public TerminalNode SECOND() { return getToken(MySqlParser.SECOND, 0); }
		public TerminalNode SEC_TO_TIME() { return getToken(MySqlParser.SEC_TO_TIME, 0); }
		public TerminalNode SCHEMA() { return getToken(MySqlParser.SCHEMA, 0); }
		public TerminalNode SESSION_USER() { return getToken(MySqlParser.SESSION_USER, 0); }
		public TerminalNode SESSION_VARIABLES_ADMIN() { return getToken(MySqlParser.SESSION_VARIABLES_ADMIN, 0); }
		public TerminalNode SHA() { return getToken(MySqlParser.SHA, 0); }
		public TerminalNode SHA1() { return getToken(MySqlParser.SHA1, 0); }
		public TerminalNode SHA2() { return getToken(MySqlParser.SHA2, 0); }
		public TerminalNode SIGN() { return getToken(MySqlParser.SIGN, 0); }
		public TerminalNode SIN() { return getToken(MySqlParser.SIN, 0); }
		public TerminalNode SLEEP() { return getToken(MySqlParser.SLEEP, 0); }
		public TerminalNode SOUNDEX() { return getToken(MySqlParser.SOUNDEX, 0); }
		public TerminalNode SQL_THREAD_WAIT_AFTER_GTIDS() { return getToken(MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, 0); }
		public TerminalNode SQRT() { return getToken(MySqlParser.SQRT, 0); }
		public TerminalNode SRID() { return getToken(MySqlParser.SRID, 0); }
		public TerminalNode STARTPOINT() { return getToken(MySqlParser.STARTPOINT, 0); }
		public TerminalNode STRCMP() { return getToken(MySqlParser.STRCMP, 0); }
		public TerminalNode STR_TO_DATE() { return getToken(MySqlParser.STR_TO_DATE, 0); }
		public TerminalNode ST_AREA() { return getToken(MySqlParser.ST_AREA, 0); }
		public TerminalNode ST_ASBINARY() { return getToken(MySqlParser.ST_ASBINARY, 0); }
		public TerminalNode ST_ASTEXT() { return getToken(MySqlParser.ST_ASTEXT, 0); }
		public TerminalNode ST_ASWKB() { return getToken(MySqlParser.ST_ASWKB, 0); }
		public TerminalNode ST_ASWKT() { return getToken(MySqlParser.ST_ASWKT, 0); }
		public TerminalNode ST_BUFFER() { return getToken(MySqlParser.ST_BUFFER, 0); }
		public TerminalNode ST_CENTROID() { return getToken(MySqlParser.ST_CENTROID, 0); }
		public TerminalNode ST_CONTAINS() { return getToken(MySqlParser.ST_CONTAINS, 0); }
		public TerminalNode ST_CROSSES() { return getToken(MySqlParser.ST_CROSSES, 0); }
		public TerminalNode ST_DIFFERENCE() { return getToken(MySqlParser.ST_DIFFERENCE, 0); }
		public TerminalNode ST_DIMENSION() { return getToken(MySqlParser.ST_DIMENSION, 0); }
		public TerminalNode ST_DISJOINT() { return getToken(MySqlParser.ST_DISJOINT, 0); }
		public TerminalNode ST_DISTANCE() { return getToken(MySqlParser.ST_DISTANCE, 0); }
		public TerminalNode ST_ENDPOINT() { return getToken(MySqlParser.ST_ENDPOINT, 0); }
		public TerminalNode ST_ENVELOPE() { return getToken(MySqlParser.ST_ENVELOPE, 0); }
		public TerminalNode ST_EQUALS() { return getToken(MySqlParser.ST_EQUALS, 0); }
		public TerminalNode ST_EXTERIORRING() { return getToken(MySqlParser.ST_EXTERIORRING, 0); }
		public TerminalNode ST_GEOMCOLLFROMTEXT() { return getToken(MySqlParser.ST_GEOMCOLLFROMTEXT, 0); }
		public TerminalNode ST_GEOMCOLLFROMTXT() { return getToken(MySqlParser.ST_GEOMCOLLFROMTXT, 0); }
		public TerminalNode ST_GEOMCOLLFROMWKB() { return getToken(MySqlParser.ST_GEOMCOLLFROMWKB, 0); }
		public TerminalNode ST_GEOMETRYCOLLECTIONFROMTEXT() { return getToken(MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, 0); }
		public TerminalNode ST_GEOMETRYCOLLECTIONFROMWKB() { return getToken(MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, 0); }
		public TerminalNode ST_GEOMETRYFROMTEXT() { return getToken(MySqlParser.ST_GEOMETRYFROMTEXT, 0); }
		public TerminalNode ST_GEOMETRYFROMWKB() { return getToken(MySqlParser.ST_GEOMETRYFROMWKB, 0); }
		public TerminalNode ST_GEOMETRYN() { return getToken(MySqlParser.ST_GEOMETRYN, 0); }
		public TerminalNode ST_GEOMETRYTYPE() { return getToken(MySqlParser.ST_GEOMETRYTYPE, 0); }
		public TerminalNode ST_GEOMFROMTEXT() { return getToken(MySqlParser.ST_GEOMFROMTEXT, 0); }
		public TerminalNode ST_GEOMFROMWKB() { return getToken(MySqlParser.ST_GEOMFROMWKB, 0); }
		public TerminalNode ST_INTERIORRINGN() { return getToken(MySqlParser.ST_INTERIORRINGN, 0); }
		public TerminalNode ST_INTERSECTION() { return getToken(MySqlParser.ST_INTERSECTION, 0); }
		public TerminalNode ST_INTERSECTS() { return getToken(MySqlParser.ST_INTERSECTS, 0); }
		public TerminalNode ST_ISCLOSED() { return getToken(MySqlParser.ST_ISCLOSED, 0); }
		public TerminalNode ST_ISEMPTY() { return getToken(MySqlParser.ST_ISEMPTY, 0); }
		public TerminalNode ST_ISSIMPLE() { return getToken(MySqlParser.ST_ISSIMPLE, 0); }
		public TerminalNode ST_LINEFROMTEXT() { return getToken(MySqlParser.ST_LINEFROMTEXT, 0); }
		public TerminalNode ST_LINEFROMWKB() { return getToken(MySqlParser.ST_LINEFROMWKB, 0); }
		public TerminalNode ST_LINESTRINGFROMTEXT() { return getToken(MySqlParser.ST_LINESTRINGFROMTEXT, 0); }
		public TerminalNode ST_LINESTRINGFROMWKB() { return getToken(MySqlParser.ST_LINESTRINGFROMWKB, 0); }
		public TerminalNode ST_NUMGEOMETRIES() { return getToken(MySqlParser.ST_NUMGEOMETRIES, 0); }
		public TerminalNode ST_NUMINTERIORRING() { return getToken(MySqlParser.ST_NUMINTERIORRING, 0); }
		public TerminalNode ST_NUMINTERIORRINGS() { return getToken(MySqlParser.ST_NUMINTERIORRINGS, 0); }
		public TerminalNode ST_NUMPOINTS() { return getToken(MySqlParser.ST_NUMPOINTS, 0); }
		public TerminalNode ST_OVERLAPS() { return getToken(MySqlParser.ST_OVERLAPS, 0); }
		public TerminalNode ST_POINTFROMTEXT() { return getToken(MySqlParser.ST_POINTFROMTEXT, 0); }
		public TerminalNode ST_POINTFROMWKB() { return getToken(MySqlParser.ST_POINTFROMWKB, 0); }
		public TerminalNode ST_POINTN() { return getToken(MySqlParser.ST_POINTN, 0); }
		public TerminalNode ST_POLYFROMTEXT() { return getToken(MySqlParser.ST_POLYFROMTEXT, 0); }
		public TerminalNode ST_POLYFROMWKB() { return getToken(MySqlParser.ST_POLYFROMWKB, 0); }
		public TerminalNode ST_POLYGONFROMTEXT() { return getToken(MySqlParser.ST_POLYGONFROMTEXT, 0); }
		public TerminalNode ST_POLYGONFROMWKB() { return getToken(MySqlParser.ST_POLYGONFROMWKB, 0); }
		public TerminalNode ST_SRID() { return getToken(MySqlParser.ST_SRID, 0); }
		public TerminalNode ST_STARTPOINT() { return getToken(MySqlParser.ST_STARTPOINT, 0); }
		public TerminalNode ST_SYMDIFFERENCE() { return getToken(MySqlParser.ST_SYMDIFFERENCE, 0); }
		public TerminalNode ST_TOUCHES() { return getToken(MySqlParser.ST_TOUCHES, 0); }
		public TerminalNode ST_UNION() { return getToken(MySqlParser.ST_UNION, 0); }
		public TerminalNode ST_WITHIN() { return getToken(MySqlParser.ST_WITHIN, 0); }
		public TerminalNode ST_X() { return getToken(MySqlParser.ST_X, 0); }
		public TerminalNode ST_Y() { return getToken(MySqlParser.ST_Y, 0); }
		public TerminalNode SUBDATE() { return getToken(MySqlParser.SUBDATE, 0); }
		public TerminalNode SUBSTRING_INDEX() { return getToken(MySqlParser.SUBSTRING_INDEX, 0); }
		public TerminalNode SUBTIME() { return getToken(MySqlParser.SUBTIME, 0); }
		public TerminalNode SYSTEM_USER() { return getToken(MySqlParser.SYSTEM_USER, 0); }
		public TerminalNode TAN() { return getToken(MySqlParser.TAN, 0); }
		public TerminalNode TIME() { return getToken(MySqlParser.TIME, 0); }
		public TerminalNode TIMEDIFF() { return getToken(MySqlParser.TIMEDIFF, 0); }
		public TerminalNode TIMESTAMP() { return getToken(MySqlParser.TIMESTAMP, 0); }
		public TerminalNode TIMESTAMPADD() { return getToken(MySqlParser.TIMESTAMPADD, 0); }
		public TerminalNode TIMESTAMPDIFF() { return getToken(MySqlParser.TIMESTAMPDIFF, 0); }
		public TerminalNode TIME_FORMAT() { return getToken(MySqlParser.TIME_FORMAT, 0); }
		public TerminalNode TIME_TO_SEC() { return getToken(MySqlParser.TIME_TO_SEC, 0); }
		public TerminalNode TOUCHES() { return getToken(MySqlParser.TOUCHES, 0); }
		public TerminalNode TO_BASE64() { return getToken(MySqlParser.TO_BASE64, 0); }
		public TerminalNode TO_DAYS() { return getToken(MySqlParser.TO_DAYS, 0); }
		public TerminalNode TO_SECONDS() { return getToken(MySqlParser.TO_SECONDS, 0); }
		public TerminalNode UCASE() { return getToken(MySqlParser.UCASE, 0); }
		public TerminalNode UNCOMPRESS() { return getToken(MySqlParser.UNCOMPRESS, 0); }
		public TerminalNode UNCOMPRESSED_LENGTH() { return getToken(MySqlParser.UNCOMPRESSED_LENGTH, 0); }
		public TerminalNode UNHEX() { return getToken(MySqlParser.UNHEX, 0); }
		public TerminalNode UNIX_TIMESTAMP() { return getToken(MySqlParser.UNIX_TIMESTAMP, 0); }
		public TerminalNode UPDATEXML() { return getToken(MySqlParser.UPDATEXML, 0); }
		public TerminalNode UPPER() { return getToken(MySqlParser.UPPER, 0); }
		public TerminalNode UUID() { return getToken(MySqlParser.UUID, 0); }
		public TerminalNode UUID_SHORT() { return getToken(MySqlParser.UUID_SHORT, 0); }
		public TerminalNode VALIDATE_PASSWORD_STRENGTH() { return getToken(MySqlParser.VALIDATE_PASSWORD_STRENGTH, 0); }
		public TerminalNode VERSION() { return getToken(MySqlParser.VERSION, 0); }
		public TerminalNode VISIBLE() { return getToken(MySqlParser.VISIBLE, 0); }
		public TerminalNode WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS() { return getToken(MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, 0); }
		public TerminalNode WEEK() { return getToken(MySqlParser.WEEK, 0); }
		public TerminalNode WEEKDAY() { return getToken(MySqlParser.WEEKDAY, 0); }
		public TerminalNode WEEKOFYEAR() { return getToken(MySqlParser.WEEKOFYEAR, 0); }
		public TerminalNode WEIGHT_STRING() { return getToken(MySqlParser.WEIGHT_STRING, 0); }
		public TerminalNode WITHIN() { return getToken(MySqlParser.WITHIN, 0); }
		public TerminalNode YEAR() { return getToken(MySqlParser.YEAR, 0); }
		public TerminalNode YEARWEEK() { return getToken(MySqlParser.YEARWEEK, 0); }
		public TerminalNode Y_FUNCTION() { return getToken(MySqlParser.Y_FUNCTION, 0); }
		public TerminalNode X_FUNCTION() { return getToken(MySqlParser.X_FUNCTION, 0); }
		public TerminalNode JSON_ARRAY() { return getToken(MySqlParser.JSON_ARRAY, 0); }
		public TerminalNode JSON_OBJECT() { return getToken(MySqlParser.JSON_OBJECT, 0); }
		public TerminalNode JSON_QUOTE() { return getToken(MySqlParser.JSON_QUOTE, 0); }
		public TerminalNode JSON_CONTAINS() { return getToken(MySqlParser.JSON_CONTAINS, 0); }
		public TerminalNode JSON_CONTAINS_PATH() { return getToken(MySqlParser.JSON_CONTAINS_PATH, 0); }
		public TerminalNode JSON_EXTRACT() { return getToken(MySqlParser.JSON_EXTRACT, 0); }
		public TerminalNode JSON_KEYS() { return getToken(MySqlParser.JSON_KEYS, 0); }
		public TerminalNode JSON_OVERLAPS() { return getToken(MySqlParser.JSON_OVERLAPS, 0); }
		public TerminalNode JSON_SEARCH() { return getToken(MySqlParser.JSON_SEARCH, 0); }
		public TerminalNode JSON_VALUE() { return getToken(MySqlParser.JSON_VALUE, 0); }
		public TerminalNode JSON_ARRAY_APPEND() { return getToken(MySqlParser.JSON_ARRAY_APPEND, 0); }
		public TerminalNode JSON_ARRAY_INSERT() { return getToken(MySqlParser.JSON_ARRAY_INSERT, 0); }
		public TerminalNode JSON_INSERT() { return getToken(MySqlParser.JSON_INSERT, 0); }
		public TerminalNode JSON_MERGE() { return getToken(MySqlParser.JSON_MERGE, 0); }
		public TerminalNode JSON_MERGE_PATCH() { return getToken(MySqlParser.JSON_MERGE_PATCH, 0); }
		public TerminalNode JSON_MERGE_PRESERVE() { return getToken(MySqlParser.JSON_MERGE_PRESERVE, 0); }
		public TerminalNode JSON_REMOVE() { return getToken(MySqlParser.JSON_REMOVE, 0); }
		public TerminalNode JSON_REPLACE() { return getToken(MySqlParser.JSON_REPLACE, 0); }
		public TerminalNode JSON_SET() { return getToken(MySqlParser.JSON_SET, 0); }
		public TerminalNode JSON_UNQUOTE() { return getToken(MySqlParser.JSON_UNQUOTE, 0); }
		public TerminalNode JSON_DEPTH() { return getToken(MySqlParser.JSON_DEPTH, 0); }
		public TerminalNode JSON_LENGTH() { return getToken(MySqlParser.JSON_LENGTH, 0); }
		public TerminalNode JSON_TYPE() { return getToken(MySqlParser.JSON_TYPE, 0); }
		public TerminalNode JSON_VALID() { return getToken(MySqlParser.JSON_VALID, 0); }
		public TerminalNode JSON_TABLE() { return getToken(MySqlParser.JSON_TABLE, 0); }
		public TerminalNode JSON_SCHEMA_VALID() { return getToken(MySqlParser.JSON_SCHEMA_VALID, 0); }
		public TerminalNode JSON_SCHEMA_VALIDATION_REPORT() { return getToken(MySqlParser.JSON_SCHEMA_VALIDATION_REPORT, 0); }
		public TerminalNode JSON_PRETTY() { return getToken(MySqlParser.JSON_PRETTY, 0); }
		public TerminalNode JSON_STORAGE_FREE() { return getToken(MySqlParser.JSON_STORAGE_FREE, 0); }
		public TerminalNode JSON_STORAGE_SIZE() { return getToken(MySqlParser.JSON_STORAGE_SIZE, 0); }
		public TerminalNode JSON_ARRAYAGG() { return getToken(MySqlParser.JSON_ARRAYAGG, 0); }
		public TerminalNode JSON_OBJECTAGG() { return getToken(MySqlParser.JSON_OBJECTAGG, 0); }
		public FunctionNameBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionNameBase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFunctionNameBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFunctionNameBase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFunctionNameBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionNameBaseContext functionNameBase() throws RecognitionException {
		FunctionNameBaseContext _localctx = new FunctionNameBaseContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_functionNameBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(642);
			_la = _input.LA(1);
			if ( !(_la==DATABASE || ((((_la - 88)) & ~0x3f) == 0 && ((1L << (_la - 88)) & ((1L << (LEFT - 88)) | (1L << (RIGHT - 88)) | (1L << (SCHEMA - 88)))) != 0) || ((((_la - 200)) & ~0x3f) == 0 && ((1L << (_la - 200)) & ((1L << (DATE - 200)) | (1L << (TIME - 200)) | (1L << (TIMESTAMP - 200)) | (1L << (YEAR - 200)) | (1L << (JSON_ARRAY - 200)) | (1L << (JSON_OBJECT - 200)) | (1L << (JSON_QUOTE - 200)) | (1L << (JSON_CONTAINS - 200)) | (1L << (JSON_CONTAINS_PATH - 200)) | (1L << (JSON_EXTRACT - 200)) | (1L << (JSON_KEYS - 200)) | (1L << (JSON_OVERLAPS - 200)) | (1L << (JSON_SEARCH - 200)) | (1L << (JSON_VALUE - 200)) | (1L << (JSON_ARRAY_APPEND - 200)) | (1L << (JSON_ARRAY_INSERT - 200)) | (1L << (JSON_INSERT - 200)) | (1L << (JSON_MERGE - 200)) | (1L << (JSON_MERGE_PATCH - 200)) | (1L << (JSON_MERGE_PRESERVE - 200)) | (1L << (JSON_REMOVE - 200)) | (1L << (JSON_REPLACE - 200)) | (1L << (JSON_SET - 200)) | (1L << (JSON_UNQUOTE - 200)) | (1L << (JSON_DEPTH - 200)) | (1L << (JSON_LENGTH - 200)) | (1L << (JSON_TYPE - 200)) | (1L << (JSON_VALID - 200)) | (1L << (JSON_TABLE - 200)) | (1L << (JSON_SCHEMA_VALID - 200)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 200)) | (1L << (JSON_PRETTY - 200)) | (1L << (JSON_STORAGE_FREE - 200)) | (1L << (JSON_STORAGE_SIZE - 200)))) != 0) || ((((_la - 264)) & ~0x3f) == 0 && ((1L << (_la - 264)) & ((1L << (JSON_ARRAYAGG - 264)) | (1L << (JSON_OBJECTAGG - 264)) | (1L << (COUNT - 264)) | (1L << (POSITION - 264)))) != 0) || _la==INVISIBLE || ((((_la - 617)) & ~0x3f) == 0 && ((1L << (_la - 617)) & ((1L << (VISIBLE - 617)) | (1L << (QUARTER - 617)) | (1L << (MONTH - 617)) | (1L << (DAY - 617)) | (1L << (HOUR - 617)) | (1L << (MINUTE - 617)) | (1L << (WEEK - 617)) | (1L << (SECOND - 617)) | (1L << (MICROSECOND - 617)) | (1L << (SESSION_VARIABLES_ADMIN - 617)))) != 0) || ((((_la - 736)) & ~0x3f) == 0 && ((1L << (_la - 736)) & ((1L << (GEOMETRYCOLLECTION - 736)) | (1L << (LINESTRING - 736)) | (1L << (MULTILINESTRING - 736)) | (1L << (MULTIPOINT - 736)) | (1L << (MULTIPOLYGON - 736)) | (1L << (POINT - 736)) | (1L << (POLYGON - 736)) | (1L << (ABS - 736)) | (1L << (ACOS - 736)) | (1L << (ADDDATE - 736)) | (1L << (ADDTIME - 736)) | (1L << (AES_DECRYPT - 736)) | (1L << (AES_ENCRYPT - 736)) | (1L << (AREA - 736)) | (1L << (ASBINARY - 736)) | (1L << (ASIN - 736)) | (1L << (ASTEXT - 736)) | (1L << (ASWKB - 736)) | (1L << (ASWKT - 736)) | (1L << (ASYMMETRIC_DECRYPT - 736)) | (1L << (ASYMMETRIC_DERIVE - 736)) | (1L << (ASYMMETRIC_ENCRYPT - 736)) | (1L << (ASYMMETRIC_SIGN - 736)) | (1L << (ASYMMETRIC_VERIFY - 736)) | (1L << (ATAN - 736)) | (1L << (ATAN2 - 736)) | (1L << (BENCHMARK - 736)) | (1L << (BIN - 736)) | (1L << (BIT_COUNT - 736)) | (1L << (BIT_LENGTH - 736)) | (1L << (BUFFER - 736)) | (1L << (CEIL - 736)) | (1L << (CEILING - 736)) | (1L << (CENTROID - 736)) | (1L << (CHARACTER_LENGTH - 736)) | (1L << (CHARSET - 736)) | (1L << (CHAR_LENGTH - 736)) | (1L << (COERCIBILITY - 736)) | (1L << (COLLATION - 736)) | (1L << (COMPRESS - 736)) | (1L << (CONCAT - 736)) | (1L << (CONCAT_WS - 736)) | (1L << (CONNECTION_ID - 736)) | (1L << (CONV - 736)) | (1L << (CONVERT_TZ - 736)) | (1L << (COS - 736)) | (1L << (COT - 736)) | (1L << (CRC32 - 736)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 736)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 736)) | (1L << (CREATE_DH_PARAMETERS - 736)) | (1L << (CREATE_DIGEST - 736)) | (1L << (CROSSES - 736)) | (1L << (DATEDIFF - 736)) | (1L << (DATE_FORMAT - 736)) | (1L << (DAYNAME - 736)) | (1L << (DAYOFMONTH - 736)) | (1L << (DAYOFWEEK - 736)) | (1L << (DAYOFYEAR - 736)) | (1L << (DECODE - 736)) | (1L << (DEGREES - 736)))) != 0) || ((((_la - 800)) & ~0x3f) == 0 && ((1L << (_la - 800)) & ((1L << (DES_DECRYPT - 800)) | (1L << (DES_ENCRYPT - 800)) | (1L << (DIMENSION - 800)) | (1L << (DISJOINT - 800)) | (1L << (ELT - 800)) | (1L << (ENCODE - 800)) | (1L << (ENCRYPT - 800)) | (1L << (ENDPOINT - 800)) | (1L << (ENVELOPE - 800)) | (1L << (EQUALS - 800)) | (1L << (EXP - 800)) | (1L << (EXPORT_SET - 800)) | (1L << (EXTERIORRING - 800)) | (1L << (EXTRACTVALUE - 800)) | (1L << (FIELD - 800)) | (1L << (FIND_IN_SET - 800)) | (1L << (FLOOR - 800)) | (1L << (FORMAT - 800)) | (1L << (FOUND_ROWS - 800)) | (1L << (FROM_BASE64 - 800)) | (1L << (FROM_DAYS - 800)) | (1L << (FROM_UNIXTIME - 800)) | (1L << (GEOMCOLLFROMTEXT - 800)) | (1L << (GEOMCOLLFROMWKB - 800)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 800)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 800)) | (1L << (GEOMETRYFROMTEXT - 800)) | (1L << (GEOMETRYFROMWKB - 800)) | (1L << (GEOMETRYN - 800)) | (1L << (GEOMETRYTYPE - 800)) | (1L << (GEOMFROMTEXT - 800)) | (1L << (GEOMFROMWKB - 800)) | (1L << (GET_FORMAT - 800)) | (1L << (GET_LOCK - 800)) | (1L << (GLENGTH - 800)) | (1L << (GREATEST - 800)) | (1L << (GTID_SUBSET - 800)) | (1L << (GTID_SUBTRACT - 800)) | (1L << (HEX - 800)) | (1L << (IFNULL - 800)) | (1L << (INET6_ATON - 800)) | (1L << (INET6_NTOA - 800)) | (1L << (INET_ATON - 800)) | (1L << (INET_NTOA - 800)) | (1L << (INSTR - 800)) | (1L << (INTERIORRINGN - 800)) | (1L << (INTERSECTS - 800)) | (1L << (ISCLOSED - 800)) | (1L << (ISEMPTY - 800)) | (1L << (ISNULL - 800)) | (1L << (ISSIMPLE - 800)) | (1L << (IS_FREE_LOCK - 800)) | (1L << (IS_IPV4 - 800)) | (1L << (IS_IPV4_COMPAT - 800)) | (1L << (IS_IPV4_MAPPED - 800)) | (1L << (IS_IPV6 - 800)) | (1L << (IS_USED_LOCK - 800)) | (1L << (LAST_INSERT_ID - 800)) | (1L << (LCASE - 800)) | (1L << (LEAST - 800)) | (1L << (LENGTH - 800)) | (1L << (LINEFROMTEXT - 800)) | (1L << (LINEFROMWKB - 800)) | (1L << (LINESTRINGFROMTEXT - 800)))) != 0) || ((((_la - 864)) & ~0x3f) == 0 && ((1L << (_la - 864)) & ((1L << (LINESTRINGFROMWKB - 864)) | (1L << (LN - 864)) | (1L << (LOAD_FILE - 864)) | (1L << (LOCATE - 864)) | (1L << (LOG - 864)) | (1L << (LOG10 - 864)) | (1L << (LOG2 - 864)) | (1L << (LOWER - 864)) | (1L << (LPAD - 864)) | (1L << (LTRIM - 864)) | (1L << (MAKEDATE - 864)) | (1L << (MAKETIME - 864)) | (1L << (MAKE_SET - 864)) | (1L << (MASTER_POS_WAIT - 864)) | (1L << (MBRCONTAINS - 864)) | (1L << (MBRDISJOINT - 864)) | (1L << (MBREQUAL - 864)) | (1L << (MBRINTERSECTS - 864)) | (1L << (MBROVERLAPS - 864)) | (1L << (MBRTOUCHES - 864)) | (1L << (MBRWITHIN - 864)) | (1L << (MD5 - 864)) | (1L << (MLINEFROMTEXT - 864)) | (1L << (MLINEFROMWKB - 864)) | (1L << (MONTHNAME - 864)) | (1L << (MPOINTFROMTEXT - 864)) | (1L << (MPOINTFROMWKB - 864)) | (1L << (MPOLYFROMTEXT - 864)) | (1L << (MPOLYFROMWKB - 864)) | (1L << (MULTILINESTRINGFROMTEXT - 864)) | (1L << (MULTILINESTRINGFROMWKB - 864)) | (1L << (MULTIPOINTFROMTEXT - 864)) | (1L << (MULTIPOINTFROMWKB - 864)) | (1L << (MULTIPOLYGONFROMTEXT - 864)) | (1L << (MULTIPOLYGONFROMWKB - 864)) | (1L << (NAME_CONST - 864)) | (1L << (NULLIF - 864)) | (1L << (NUMGEOMETRIES - 864)) | (1L << (NUMINTERIORRINGS - 864)) | (1L << (NUMPOINTS - 864)) | (1L << (OCT - 864)) | (1L << (OCTET_LENGTH - 864)) | (1L << (ORD - 864)) | (1L << (OVERLAPS - 864)) | (1L << (PERIOD_ADD - 864)) | (1L << (PERIOD_DIFF - 864)) | (1L << (PI - 864)) | (1L << (POINTFROMTEXT - 864)) | (1L << (POINTFROMWKB - 864)) | (1L << (POINTN - 864)) | (1L << (POLYFROMTEXT - 864)) | (1L << (POLYFROMWKB - 864)) | (1L << (POLYGONFROMTEXT - 864)) | (1L << (POLYGONFROMWKB - 864)) | (1L << (POW - 864)) | (1L << (POWER - 864)) | (1L << (QUOTE - 864)) | (1L << (RADIANS - 864)) | (1L << (RAND - 864)) | (1L << (RANDOM_BYTES - 864)) | (1L << (RELEASE_LOCK - 864)) | (1L << (REVERSE - 864)) | (1L << (ROUND - 864)) | (1L << (ROW_COUNT - 864)))) != 0) || ((((_la - 928)) & ~0x3f) == 0 && ((1L << (_la - 928)) & ((1L << (RPAD - 928)) | (1L << (RTRIM - 928)) | (1L << (SEC_TO_TIME - 928)) | (1L << (SESSION_USER - 928)) | (1L << (SHA - 928)) | (1L << (SHA1 - 928)) | (1L << (SHA2 - 928)) | (1L << (SIGN - 928)) | (1L << (SIN - 928)) | (1L << (SLEEP - 928)) | (1L << (SOUNDEX - 928)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 928)) | (1L << (SQRT - 928)) | (1L << (SRID - 928)) | (1L << (STARTPOINT - 928)) | (1L << (STRCMP - 928)) | (1L << (STR_TO_DATE - 928)) | (1L << (ST_AREA - 928)) | (1L << (ST_ASBINARY - 928)) | (1L << (ST_ASTEXT - 928)) | (1L << (ST_ASWKB - 928)) | (1L << (ST_ASWKT - 928)) | (1L << (ST_BUFFER - 928)) | (1L << (ST_CENTROID - 928)) | (1L << (ST_CONTAINS - 928)) | (1L << (ST_CROSSES - 928)) | (1L << (ST_DIFFERENCE - 928)) | (1L << (ST_DIMENSION - 928)) | (1L << (ST_DISJOINT - 928)) | (1L << (ST_DISTANCE - 928)) | (1L << (ST_ENDPOINT - 928)) | (1L << (ST_ENVELOPE - 928)) | (1L << (ST_EQUALS - 928)) | (1L << (ST_EXTERIORRING - 928)) | (1L << (ST_GEOMCOLLFROMTEXT - 928)) | (1L << (ST_GEOMCOLLFROMTXT - 928)) | (1L << (ST_GEOMCOLLFROMWKB - 928)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 928)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 928)) | (1L << (ST_GEOMETRYFROMTEXT - 928)) | (1L << (ST_GEOMETRYFROMWKB - 928)) | (1L << (ST_GEOMETRYN - 928)) | (1L << (ST_GEOMETRYTYPE - 928)) | (1L << (ST_GEOMFROMTEXT - 928)) | (1L << (ST_GEOMFROMWKB - 928)) | (1L << (ST_INTERIORRINGN - 928)) | (1L << (ST_INTERSECTION - 928)) | (1L << (ST_INTERSECTS - 928)) | (1L << (ST_ISCLOSED - 928)) | (1L << (ST_ISEMPTY - 928)) | (1L << (ST_ISSIMPLE - 928)) | (1L << (ST_LINEFROMTEXT - 928)) | (1L << (ST_LINEFROMWKB - 928)) | (1L << (ST_LINESTRINGFROMTEXT - 928)) | (1L << (ST_LINESTRINGFROMWKB - 928)) | (1L << (ST_NUMGEOMETRIES - 928)) | (1L << (ST_NUMINTERIORRING - 928)) | (1L << (ST_NUMINTERIORRINGS - 928)) | (1L << (ST_NUMPOINTS - 928)) | (1L << (ST_OVERLAPS - 928)) | (1L << (ST_POINTFROMTEXT - 928)) | (1L << (ST_POINTFROMWKB - 928)) | (1L << (ST_POINTN - 928)))) != 0) || ((((_la - 992)) & ~0x3f) == 0 && ((1L << (_la - 992)) & ((1L << (ST_POLYFROMTEXT - 992)) | (1L << (ST_POLYFROMWKB - 992)) | (1L << (ST_POLYGONFROMTEXT - 992)) | (1L << (ST_POLYGONFROMWKB - 992)) | (1L << (ST_SRID - 992)) | (1L << (ST_STARTPOINT - 992)) | (1L << (ST_SYMDIFFERENCE - 992)) | (1L << (ST_TOUCHES - 992)) | (1L << (ST_UNION - 992)) | (1L << (ST_WITHIN - 992)) | (1L << (ST_X - 992)) | (1L << (ST_Y - 992)) | (1L << (SUBDATE - 992)) | (1L << (SUBSTRING_INDEX - 992)) | (1L << (SUBTIME - 992)) | (1L << (SYSTEM_USER - 992)) | (1L << (TAN - 992)) | (1L << (TIMEDIFF - 992)) | (1L << (TIMESTAMPADD - 992)) | (1L << (TIMESTAMPDIFF - 992)) | (1L << (TIME_FORMAT - 992)) | (1L << (TIME_TO_SEC - 992)) | (1L << (TOUCHES - 992)) | (1L << (TO_BASE64 - 992)) | (1L << (TO_DAYS - 992)) | (1L << (TO_SECONDS - 992)) | (1L << (UCASE - 992)) | (1L << (UNCOMPRESS - 992)) | (1L << (UNCOMPRESSED_LENGTH - 992)) | (1L << (UNHEX - 992)) | (1L << (UNIX_TIMESTAMP - 992)) | (1L << (UPDATEXML - 992)) | (1L << (UPPER - 992)) | (1L << (UUID - 992)) | (1L << (UUID_SHORT - 992)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 992)) | (1L << (VERSION - 992)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 992)) | (1L << (WEEKDAY - 992)) | (1L << (WEEKOFYEAR - 992)) | (1L << (WEIGHT_STRING - 992)) | (1L << (WITHIN - 992)) | (1L << (YEARWEEK - 992)) | (1L << (Y_FUNCTION - 992)) | (1L << (X_FUNCTION - 992)) | (1L << (MOD - 992)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static final String _serializedATN =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0447\u0287\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\3\2\3\2\3\2\3\3\3\3\5\3^\n\3\3\3\3\3\3\4\3\4\3\5\3\5\5\5f\n\5\3\5"+
		"\3\5\5\5j\n\5\3\5\3\5\5\5n\n\5\3\5\3\5\5\5r\n\5\3\5\7\5u\n\5\f\5\16\5"+
		"x\13\5\5\5z\n\5\3\6\3\6\3\6\3\6\5\6\u0080\n\6\3\7\3\7\3\7\3\7\7\7\u0086"+
		"\n\7\f\7\16\7\u0089\13\7\3\7\3\7\3\b\3\b\5\b\u008f\n\b\3\b\5\b\u0092\n"+
		"\b\3\b\3\b\5\b\u0096\n\b\3\b\3\b\5\b\u009a\n\b\3\b\3\b\3\b\5\b\u009f\n"+
		"\b\3\b\5\b\u00a2\n\b\3\b\3\b\5\b\u00a6\n\b\3\b\5\b\u00a9\n\b\3\b\3\b\5"+
		"\b\u00ad\n\b\3\b\3\b\3\b\5\b\u00b2\n\b\3\b\5\b\u00b5\n\b\3\t\3\t\5\t\u00b9"+
		"\n\t\3\n\3\n\5\n\u00bd\n\n\3\13\3\13\5\13\u00c1\n\13\5\13\u00c3\n\13\3"+
		"\13\3\13\3\13\5\13\u00c8\n\13\3\13\5\13\u00cb\n\13\3\13\3\13\7\13\u00cf"+
		"\n\13\f\13\16\13\u00d2\13\13\3\13\3\13\5\13\u00d6\n\13\5\13\u00d8\n\13"+
		"\3\13\3\13\5\13\u00dc\n\13\3\13\5\13\u00df\n\13\3\13\5\13\u00e2\n\13\3"+
		"\13\3\13\7\13\u00e6\n\13\f\13\16\13\u00e9\13\13\3\13\3\13\5\13\u00ed\n"+
		"\13\5\13\u00ef\n\13\3\13\3\13\3\13\5\13\u00f4\n\13\3\13\3\13\3\13\5\13"+
		"\u00f9\n\13\3\f\3\f\3\f\3\f\7\f\u00ff\n\f\f\f\16\f\u0102\13\f\3\f\3\f"+
		"\3\r\3\r\5\r\u0108\n\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\5\r\u0113\n"+
		"\r\3\16\3\16\3\16\5\16\u0118\n\16\3\16\3\16\5\16\u011c\n\16\3\16\5\16"+
		"\u011f\n\16\3\17\3\17\3\17\3\17\3\17\3\17\5\17\u0127\n\17\3\17\3\17\3"+
		"\17\3\17\3\17\3\17\5\17\u012f\n\17\5\17\u0131\n\17\3\20\3\20\3\20\7\20"+
		"\u0136\n\20\f\20\16\20\u0139\13\20\3\21\3\21\5\21\u013d\n\21\3\21\3\21"+
		"\3\21\3\21\5\21\u0143\n\21\3\21\5\21\u0146\n\21\3\22\3\22\3\22\3\22\5"+
		"\22\u014c\n\22\3\23\3\23\3\23\3\23\3\23\3\23\3\23\5\23\u0155\n\23\3\23"+
		"\5\23\u0158\n\23\3\23\3\23\3\23\5\23\u015d\n\23\3\23\3\23\3\23\3\23\5"+
		"\23\u0163\n\23\3\24\3\24\5\24\u0167\n\24\3\24\3\24\5\24\u016b\n\24\3\24"+
		"\3\24\3\24\5\24\u0170\n\24\3\25\3\25\3\26\3\26\3\26\3\26\3\26\3\26\3\26"+
		"\3\26\3\26\5\26\u017d\n\26\3\26\5\26\u0180\n\26\3\27\5\27\u0183\n\27\3"+
		"\27\3\27\5\27\u0187\n\27\3\27\6\27\u018a\n\27\r\27\16\27\u018b\3\27\5"+
		"\27\u018f\n\27\3\27\3\27\5\27\u0193\n\27\3\27\3\27\5\27\u0197\n\27\5\27"+
		"\u0199\n\27\3\30\3\30\3\30\5\30\u019e\n\30\3\30\5\30\u01a1\n\30\3\30\3"+
		"\30\3\30\5\30\u01a6\n\30\3\30\5\30\u01a9\n\30\3\31\3\31\3\31\3\31\3\32"+
		"\3\32\5\32\u01b1\n\32\3\32\5\32\u01b4\n\32\3\32\5\32\u01b7\n\32\3\32\3"+
		"\32\3\32\5\32\u01bc\n\32\3\32\5\32\u01bf\n\32\3\32\3\32\3\32\5\32\u01c4"+
		"\n\32\3\32\3\32\3\32\5\32\u01c9\n\32\3\32\5\32\u01cc\n\32\3\32\3\32\3"+
		"\32\5\32\u01d1\n\32\3\32\5\32\u01d4\n\32\3\32\3\32\3\32\3\32\5\32\u01da"+
		"\n\32\3\32\5\32\u01dd\n\32\3\32\3\32\5\32\u01e1\n\32\3\32\5\32\u01e4\n"+
		"\32\3\32\5\32\u01e7\n\32\3\32\3\32\5\32\u01eb\n\32\3\32\5\32\u01ee\n\32"+
		"\3\32\5\32\u01f1\n\32\3\32\3\32\5\32\u01f5\n\32\3\32\5\32\u01f8\n\32\3"+
		"\32\5\32\u01fb\n\32\3\32\5\32\u01fe\n\32\3\32\3\32\5\32\u0202\n\32\3\32"+
		"\5\32\u0205\n\32\3\32\5\32\u0208\n\32\3\32\3\32\3\32\5\32\u020d\n\32\3"+
		"\32\3\32\3\32\5\32\u0212\n\32\3\32\3\32\3\32\5\32\u0217\n\32\3\32\5\32"+
		"\u021a\n\32\3\32\3\32\3\32\5\32\u021f\n\32\3\32\5\32\u0222\n\32\3\32\3"+
		"\32\3\32\5\32\u0227\n\32\3\32\5\32\u022a\n\32\3\32\3\32\5\32\u022e\n\32"+
		"\3\32\3\32\5\32\u0232\n\32\3\33\3\33\3\33\3\33\3\34\3\34\3\34\3\34\3\34"+
		"\3\34\3\35\3\35\3\35\3\35\5\35\u0242\n\35\3\35\3\35\3\36\3\36\3\37\3\37"+
		"\3\37\3\37\5\37\u024c\n\37\3 \3 \5 \u0250\n \3!\3!\3!\3!\3!\3!\5!\u0258"+
		"\n!\3\"\3\"\3\"\3#\3#\3$\5$\u0260\n$\3$\3$\3%\3%\3&\3&\3&\3&\7&\u026a"+
		"\n&\f&\16&\u026d\13&\3&\3&\3\'\3\'\3(\3(\3(\3(\3(\3(\3(\5(\u027a\n(\3"+
		")\5)\u027d\n)\3)\3)\3*\3*\3+\3+\3,\3,\3,\2\2-\2\4\6\b\n\f\16\20\22\24"+
		"\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTV\2\31\4\2KKUU\5\2"+
		"\u0191\u0191\u01f6\u01f6\u0230\u0230\4\2\16\16++\6\2ii\u041b\u041b\u041d"+
		"\u041d\u0423\u0424\4\2kk\u043c\u043c\4\2\u011e\u011f\u0125\u0125\7\2\30"+
		"\30\u00cf\u00d1\u00d8\u00d8\u00da\u00dd\u01e0\u01e0\4\2\30\30\u00d0\u00d0"+
		"\4\2\30\30\u00cf\u00cf\3\2\u00b5\u00c0\4\2\u00a8\u00a8\u022f\u022f\4\2"+
		"\u00c4\u00c9\u018d\u018d\b\2\u00ca\u00ca\u00d5\u00d5\u00d7\u00d7\u00d9"+
		"\u00d9\u00e0\u00e0\u013f\u0140\6\2\u00cb\u00ce\u00d3\u00d4\u00d6\u00d6"+
		"\u013d\u013d\4\2\u008d\u008d\u00de\u00de\4\2\u01ac\u01ac\u02e2\u02ea\4"+
		"\2\u0141\u0141\u0198\u0198\4\2\u042e\u0430\u0439\u0439\4\2;;\u00a3\u00a3"+
		"\6\2\u0159\u0159\u02d2\u02dd\u0438\u0438\u0440\u0441\3\2\u02aa\u02d1\31"+
		"\2\"\"..EEllrr\u009a\u009a\u00e0\u00e0\u010c\u011b\u012f\u01a4\u01a6\u021e"+
		"\u0220\u0247\u0249\u0252\u0254\u0269\u026c\u0273\u0278\u0278\u028b\u0293"+
		"\u0298\u0299\u029b\u02a1\u02a3\u02a9\u02d7\u02d7\u0303\u0303\u03a9\u03a9"+
		"\u0447\u0447\24\2%%ZZ\u0088\u0088\u008a\u008a\u00ca\u00cc\u00ce\u00ce"+
		"\u00ec\u010b\u0110\u0110\u0127\u0127\u01a5\u01a5\u026b\u026b\u0279\u0280"+
		"\u02a3\u02a3\u02e2\u02e2\u02e5\u0302\u0304\u03a8\u03aa\u040e\u041f\u041f"+
		"\2\u02f8\2X\3\2\2\2\4[\3\2\2\2\6a\3\2\2\2\bc\3\2\2\2\n{\3\2\2\2\f\u0081"+
		"\3\2\2\2\16\u00b4\3\2\2\2\20\u00b8\3\2\2\2\22\u00bc\3\2\2\2\24\u00f8\3"+
		"\2\2\2\26\u00fa\3\2\2\2\30\u0112\3\2\2\2\32\u0114\3\2\2\2\34\u0130\3\2"+
		"\2\2\36\u0132\3\2\2\2 \u013c\3\2\2\2\"\u014b\3\2\2\2$\u0162\3\2\2\2&\u016a"+
		"\3\2\2\2(\u0171\3\2\2\2*\u017f\3\2\2\2,\u0198\3\2\2\2.\u01a8\3\2\2\2\60"+
		"\u01aa\3\2\2\2\62\u0231\3\2\2\2\64\u0233\3\2\2\2\66\u0237\3\2\2\28\u023d"+
		"\3\2\2\2:\u0245\3\2\2\2<\u024b\3\2\2\2>\u024f\3\2\2\2@\u0257\3\2\2\2B"+
		"\u0259\3\2\2\2D\u025c\3\2\2\2F\u025f\3\2\2\2H\u0263\3\2\2\2J\u0265\3\2"+
		"\2\2L\u0270\3\2\2\2N\u0279\3\2\2\2P\u027c\3\2\2\2R\u0280\3\2\2\2T\u0282"+
		"\3\2\2\2V\u0284\3\2\2\2XY\5\4\3\2YZ\7\2\2\3Z\3\3\2\2\2[]\5\6\4\2\\^\7"+
		"\u042c\2\2]\\\3\2\2\2]^\3\2\2\2^_\3\2\2\2_`\7\2\2\3`\5\3\2\2\2ab\5\b\5"+
		"\2b\7\3\2\2\2ce\7 \2\2df\7\u0254\2\2ed\3\2\2\2ef\3\2\2\2fg\3\2\2\2gi\7"+
		"\u009d\2\2hj\5\60\31\2ih\3\2\2\2ij\3\2\2\2jk\3\2\2\2km\5\n\6\2ln\5\f\7"+
		"\2ml\3\2\2\2mn\3\2\2\2ny\3\2\2\2ov\5\16\b\2pr\7\u042b\2\2qp\3\2\2\2qr"+
		"\3\2\2\2rs\3\2\2\2su\5\16\b\2tq\3\2\2\2ux\3\2\2\2vt\3\2\2\2vw\3\2\2\2"+
		"wz\3\2\2\2xv\3\2\2\2yo\3\2\2\2yz\3\2\2\2z\t\3\2\2\2{\177\5:\36\2|\u0080"+
		"\7\u043f\2\2}~\7\u0428\2\2~\u0080\5:\36\2\177|\3\2\2\2\177}\3\2\2\2\177"+
		"\u0080\3\2\2\2\u0080\13\3\2\2\2\u0081\u0082\7\u0429\2\2\u0082\u0087\5"+
		"\22\n\2\u0083\u0084\7\u042b\2\2\u0084\u0086\5\22\n\2\u0085\u0083\3\2\2"+
		"\2\u0086\u0089\3\2\2\2\u0087\u0085\3\2\2\2\u0087\u0088\3\2\2\2\u0088\u008a"+
		"\3\2\2\2\u0089\u0087\3\2\2\2\u008a\u008b\7\u042a\2\2\u008b\r\3\2\2\2\u008c"+
		"\u008e\7\u0178\2\2\u008d\u008f\7\u0420\2\2\u008e\u008d\3\2\2\2\u008e\u008f"+
		"\3\2\2\2\u008f\u0091\3\2\2\2\u0090\u0092\5L\'\2\u0091\u0090\3\2\2\2\u0091"+
		"\u0092\3\2\2\2\u0092\u00b5\3\2\2\2\u0093\u0095\7\u0139\2\2\u0094\u0096"+
		"\7\u0420\2\2\u0095\u0094\3\2\2\2\u0095\u0096\3\2\2\2\u0096\u0097\3\2\2"+
		"\2\u0097\u00b5\5D#\2\u0098\u009a\7(\2\2\u0099\u0098\3\2\2\2\u0099\u009a"+
		"\3\2\2\2\u009a\u009e\3\2\2\2\u009b\u009c\7\30\2\2\u009c\u009f\7\u008d"+
		"\2\2\u009d\u009f\7\u0308\2\2\u009e\u009b\3\2\2\2\u009e\u009d\3\2\2\2\u009f"+
		"\u00a1\3\2\2\2\u00a0\u00a2\7\u0420\2\2\u00a1\u00a0\3\2\2\2\u00a1\u00a2"+
		"\3\2\2\2\u00a2\u00a5\3\2\2\2\u00a3\u00a6\5\"\22\2\u00a4\u00a6\7(\2\2\u00a5"+
		"\u00a3\3\2\2\2\u00a5\u00a4\3\2\2\2\u00a6\u00b5\3\2\2\2\u00a7\u00a9\7("+
		"\2\2\u00a8\u00a7\3\2\2\2\u00a8\u00a9\3\2\2\2\u00a9\u00aa\3\2\2\2\u00aa"+
		"\u00ac\7\32\2\2\u00ab\u00ad\7\u0420\2\2\u00ac\u00ab\3\2\2\2\u00ac\u00ad"+
		"\3\2\2\2\u00ad\u00ae\3\2\2\2\u00ae\u00b5\5\20\t\2\u00af\u00b1\7\u0152"+
		"\2\2\u00b0\u00b2\7\u0420\2\2\u00b1\u00b0\3\2\2\2\u00b1\u00b2\3\2\2\2\u00b2"+
		"\u00b3\3\2\2\2\u00b3\u00b5\7\u0438\2\2\u00b4\u008c\3\2\2\2\u00b4\u0093"+
		"\3\2\2\2\u00b4\u0099\3\2\2\2\u00b4\u00a8\3\2\2\2\u00b4\u00af\3\2\2\2\u00b5"+
		"\17\3\2\2\2\u00b6\u00b9\5:\36\2\u00b7\u00b9\7\u0438\2\2\u00b8\u00b6\3"+
		"\2\2\2\u00b8\u00b7\3\2\2\2\u00b9\21\3\2\2\2\u00ba\u00bd\5\36\20\2\u00bb"+
		"\u00bd\5\24\13\2\u00bc\u00ba\3\2\2\2\u00bc\u00bb\3\2\2\2\u00bd\23\3\2"+
		"\2\2\u00be\u00c0\7\35\2\2\u00bf\u00c1\5:\36\2\u00c0\u00bf\3\2\2\2\u00c0"+
		"\u00c1\3\2\2\2\u00c1\u00c3\3\2\2\2\u00c2\u00be\3\2\2\2\u00c2\u00c3\3\2"+
		"\2\2\u00c3\u00c4\3\2\2\2\u00c4\u00c5\7w\2\2\u00c5\u00c7\7U\2\2\u00c6\u00c8"+
		"\5:\36\2\u00c7\u00c6\3\2\2\2\u00c7\u00c8\3\2\2\2\u00c8\u00ca\3\2\2\2\u00c9"+
		"\u00cb\5B\"\2\u00ca\u00c9\3\2\2\2\u00ca\u00cb\3\2\2\2\u00cb\u00cc\3\2"+
		"\2\2\u00cc\u00d0\5\26\f\2\u00cd\u00cf\5\30\r\2\u00ce\u00cd\3\2\2\2\u00cf"+
		"\u00d2\3\2\2\2\u00d0\u00ce\3\2\2\2\u00d0\u00d1\3\2\2\2\u00d1\u00f9\3\2"+
		"\2\2\u00d2\u00d0\3\2\2\2\u00d3\u00d5\7\35\2\2\u00d4\u00d6\5:\36\2\u00d5"+
		"\u00d4\3\2\2\2\u00d5\u00d6\3\2\2\2\u00d6\u00d8\3\2\2\2\u00d7\u00d3\3\2"+
		"\2\2\u00d7\u00d8\3\2\2\2\u00d8\u00d9\3\2\2\2\u00d9\u00db\7\u00a6\2\2\u00da"+
		"\u00dc\t\2\2\2\u00db\u00da\3\2\2\2\u00db\u00dc\3\2\2\2\u00dc\u00de\3\2"+
		"\2\2\u00dd\u00df\5:\36\2\u00de\u00dd\3\2\2\2\u00de\u00df\3\2\2\2\u00df"+
		"\u00e1\3\2\2\2\u00e0\u00e2\5B\"\2\u00e1\u00e0\3\2\2\2\u00e1\u00e2\3\2"+
		"\2\2\u00e2\u00e3\3\2\2\2\u00e3\u00e7\5\26\f\2\u00e4\u00e6\5\30\r\2\u00e5"+
		"\u00e4\3\2\2\2\u00e6\u00e9\3\2\2\2\u00e7\u00e5\3\2\2\2\u00e7\u00e8\3\2"+
		"\2\2\u00e8\u00f9\3\2\2\2\u00e9\u00e7\3\2\2\2\u00ea\u00ec\7\35\2\2\u00eb"+
		"\u00ed\5:\36\2\u00ec\u00eb\3\2\2\2\u00ec\u00ed\3\2\2\2\u00ed\u00ef\3\2"+
		"\2\2\u00ee\u00ea\3\2\2\2\u00ee\u00ef\3\2\2\2\u00ef\u00f0\3\2\2\2\u00f0"+
		"\u00f1\7?\2\2\u00f1\u00f3\7U\2\2\u00f2\u00f4\5:\36\2\u00f3\u00f2\3\2\2"+
		"\2\u00f3\u00f4\3\2\2\2\u00f4\u00f5\3\2\2\2\u00f5\u00f6\5\26\f\2\u00f6"+
		"\u00f7\5\32\16\2\u00f7\u00f9\3\2\2\2\u00f8\u00c2\3\2\2\2\u00f8\u00d7\3"+
		"\2\2\2\u00f8\u00ee\3\2\2\2\u00f9\25\3\2\2\2\u00fa\u00fb\7\u0429\2\2\u00fb"+
		"\u0100\5 \21\2\u00fc\u00fd\7\u042b\2\2\u00fd\u00ff\5 \21\2\u00fe\u00fc"+
		"\3\2\2\2\u00ff\u0102\3\2\2\2\u0100\u00fe\3\2\2\2\u0100\u0101\3\2\2\2\u0101"+
		"\u0103\3\2\2\2\u0102\u0100\3\2\2\2\u0103\u0104\7\u042a\2\2\u0104\27\3"+
		"\2\2\2\u0105\u0107\7\u01ad\2\2\u0106\u0108\7\u0420\2\2\u0107\u0106\3\2"+
		"\2\2\u0107\u0108\3\2\2\2\u0108\u0109\3\2\2\2\u0109\u0113\5> \2\u010a\u0113"+
		"\5B\"\2\u010b\u010c\7\u00b1\2\2\u010c\u010d\7\u01f5\2\2\u010d\u0113\5"+
		":\36\2\u010e\u010f\7\u0152\2\2\u010f\u0113\7\u0438\2\2\u0110\u0113\7\u01a5"+
		"\2\2\u0111\u0113\7\u026b\2\2\u0112\u0105\3\2\2\2\u0112\u010a\3\2\2\2\u0112"+
		"\u010b\3\2\2\2\u0112\u010e\3\2\2\2\u0112\u0110\3\2\2\2\u0112\u0111\3\2"+
		"\2\2\u0113\31\3\2\2\2\u0114\u0115\7}\2\2\u0115\u0117\5\n\6\2\u0116\u0118"+
		"\5\26\f\2\u0117\u0116\3\2\2\2\u0117\u0118\3\2\2\2\u0118\u011b\3\2\2\2"+
		"\u0119\u011a\7e\2\2\u011a\u011c\t\3\2\2\u011b\u0119\3\2\2\2\u011b\u011c"+
		"\3\2\2\2\u011c\u011e\3\2\2\2\u011d\u011f\5\34\17\2\u011e\u011d\3\2\2\2"+
		"\u011e\u011f\3\2\2\2\u011f\33\3\2\2\2\u0120\u0121\7m\2\2\u0121\u0122\7"+
		"*\2\2\u0122\u0126\5@!\2\u0123\u0124\7m\2\2\u0124\u0125\7\u00a9\2\2\u0125"+
		"\u0127\5@!\2\u0126\u0123\3\2\2\2\u0126\u0127\3\2\2\2\u0127\u0131\3\2\2"+
		"\2\u0128\u0129\7m\2\2\u0129\u012a\7\u00a9\2\2\u012a\u012e\5@!\2\u012b"+
		"\u012c\7m\2\2\u012c\u012d\7*\2\2\u012d\u012f\5@!\2\u012e\u012b\3\2\2\2"+
		"\u012e\u012f\3\2\2\2\u012f\u0131\3\2\2\2\u0130\u0120\3\2\2\2\u0130\u0128"+
		"\3\2\2\2\u0131\35\3\2\2\2\u0132\u0133\5:\36\2\u0133\u0137\5\62\32\2\u0134"+
		"\u0136\5$\23\2\u0135\u0134\3\2\2\2\u0136\u0139\3\2\2\2\u0137\u0135\3\2"+
		"\2\2\u0137\u0138\3\2\2\2\u0138\37\3\2\2\2\u0139\u0137\3\2\2\2\u013a\u013d"+
		"\5:\36\2\u013b\u013d\7\u0438\2\2\u013c\u013a\3\2\2\2\u013c\u013b\3\2\2"+
		"\2\u013d\u0142\3\2\2\2\u013e\u013f\7\u0429\2\2\u013f\u0140\5D#\2\u0140"+
		"\u0141\7\u042a\2\2\u0141\u0143\3\2\2\2\u0142\u013e\3\2\2\2\u0142\u0143"+
		"\3\2\2\2\u0143\u0145\3\2\2\2\u0144\u0146\t\4\2\2\u0145\u0144\3\2\2\2\u0145"+
		"\u0146\3\2\2\2\u0146!\3\2\2\2\u0147\u014c\7\u00d3\2\2\u0148\u014c\5R*"+
		"\2\u0149\u014c\7\u0438\2\2\u014a\u014c\7\u0435\2\2\u014b\u0147\3\2\2\2"+
		"\u014b\u0148\3\2\2\2\u014b\u0149\3\2\2\2\u014b\u014a\3\2\2\2\u014c#\3"+
		"\2\2\2\u014d\u0163\5P)\2\u014e\u014f\7(\2\2\u014f\u0163\5&\24\2\u0150"+
		"\u0155\7\u0139\2\2\u0151\u0152\7m\2\2\u0152\u0153\7\u00a9\2\2\u0153\u0155"+
		"\5.\30\2\u0154\u0150\3\2\2\2\u0154\u0151\3\2\2\2\u0155\u0163\3\2\2\2\u0156"+
		"\u0158\7w\2\2\u0157\u0156\3\2\2\2\u0157\u0158\3\2\2\2\u0158\u0159\3\2"+
		"\2\2\u0159\u0163\7U\2\2\u015a\u015c\7\u00a6\2\2\u015b\u015d\7U\2\2\u015c"+
		"\u015b\3\2\2\2\u015c\u015d\3\2\2\2\u015d\u0163\3\2\2\2\u015e\u015f\7\u0152"+
		"\2\2\u015f\u0163\7\u0438\2\2\u0160\u0161\7\32\2\2\u0161\u0163\5\20\t\2"+
		"\u0162\u014d\3\2\2\2\u0162\u014e\3\2\2\2\u0162\u0154\3\2\2\2\u0162\u0157"+
		"\3\2\2\2\u0162\u015a\3\2\2\2\u0162\u015e\3\2\2\2\u0162\u0160\3\2\2\2\u0163"+
		"%\3\2\2\2\u0164\u016b\7k\2\2\u0165\u0167\5(\25\2\u0166\u0165\3\2\2\2\u0166"+
		"\u0167\3\2\2\2\u0167\u0168\3\2\2\2\u0168\u016b\5*\26\2\u0169\u016b\5."+
		"\30\2\u016a\u0164\3\2\2\2\u016a\u0166\3\2\2\2\u016a\u0169\3\2\2\2\u016b"+
		"\u016f\3\2\2\2\u016c\u016d\7m\2\2\u016d\u016e\7\u00a9\2\2\u016e\u0170"+
		"\5.\30\2\u016f\u016c\3\2\2\2\u016f\u0170\3\2\2\2\u0170\'\3\2\2\2\u0171"+
		"\u0172\t\5\2\2\u0172)\3\2\2\2\u0173\u0180\5,\27\2\u0174\u0180\5D#\2\u0175"+
		"\u0176\7\u041d\2\2\u0176\u0180\5D#\2\u0177\u0180\5F$\2\u0178\u0180\5H"+
		"%\2\u0179\u0180\7\u043b\2\2\u017a\u0180\7\u043d\2\2\u017b\u017d\7i\2\2"+
		"\u017c\u017b\3\2\2\2\u017c\u017d\3\2\2\2\u017d\u017e\3\2\2\2\u017e\u0180"+
		"\t\6\2\2\u017f\u0173\3\2\2\2\u017f\u0174\3\2\2\2\u017f\u0175\3\2\2\2\u017f"+
		"\u0177\3\2\2\2\u017f\u0178\3\2\2\2\u017f\u0179\3\2\2\2\u017f\u017a\3\2"+
		"\2\2\u017f\u017c\3\2\2\2\u0180+\3\2\2\2\u0181\u0183\7\u043e\2\2\u0182"+
		"\u0181\3\2\2\2\u0182\u0183\3\2\2\2\u0183\u0184\3\2\2\2\u0184\u0187\7\u0438"+
		"\2\2\u0185\u0187\7\u0437\2\2\u0186\u0182\3\2\2\2\u0186\u0185\3\2\2\2\u0187"+
		"\u0189\3\2\2\2\u0188\u018a\7\u0438\2\2\u0189\u0188\3\2\2\2\u018a\u018b"+
		"\3\2\2\2\u018b\u0189\3\2\2\2\u018b\u018c\3\2\2\2\u018c\u0199\3\2\2\2\u018d"+
		"\u018f\7\u043e\2\2\u018e\u018d\3\2\2\2\u018e\u018f\3\2\2\2\u018f\u0190"+
		"\3\2\2\2\u0190\u0193\7\u0438\2\2\u0191\u0193\7\u0437\2\2\u0192\u018e\3"+
		"\2\2\2\u0192\u0191\3\2\2\2\u0193\u0196\3\2\2\2\u0194\u0195\7\32\2\2\u0195"+
		"\u0197\5\20\t\2\u0196\u0194\3\2\2\2\u0196\u0197\3\2\2\2\u0197\u0199\3"+
		"\2\2\2\u0198\u0186\3\2\2\2\u0198\u0192\3\2\2\2\u0199-\3\2\2\2\u019a\u01a0"+
		"\t\7\2\2\u019b\u019d\7\u0429\2\2\u019c\u019e\5D#\2\u019d\u019c\3\2\2\2"+
		"\u019d\u019e\3\2\2\2\u019e\u019f\3\2\2\2\u019f\u01a1\7\u042a\2\2\u01a0"+
		"\u019b\3\2\2\2\u01a0\u01a1\3\2\2\2\u01a1\u01a9\3\2\2\2\u01a2\u01a3\7\u0126"+
		"\2\2\u01a3\u01a5\7\u0429\2\2\u01a4\u01a6\5D#\2\u01a5\u01a4\3\2\2\2\u01a5"+
		"\u01a6\3\2\2\2\u01a6\u01a7\3\2\2\2\u01a7\u01a9\7\u042a\2\2\u01a8\u019a"+
		"\3\2\2\2\u01a8\u01a2\3\2\2\2\u01a9/\3\2\2\2\u01aa\u01ab\7H\2\2\u01ab\u01ac"+
		"\7i\2\2\u01ac\u01ad\78\2\2\u01ad\61\3\2\2\2\u01ae\u01b0\t\b\2\2\u01af"+
		"\u01b1\7\u00df\2\2\u01b0\u01af\3\2\2\2\u01b0\u01b1\3\2\2\2\u01b1\u01b3"+
		"\3\2\2\2\u01b2\u01b4\5\64\33\2\u01b3\u01b2\3\2\2\2\u01b3\u01b4\3\2\2\2"+
		"\u01b4\u01b6\3\2\2\2\u01b5\u01b7\7\u00d3\2\2\u01b6\u01b5\3\2\2\2\u01b6"+
		"\u01b7\3\2\2\2\u01b7\u01be\3\2\2\2\u01b8\u01b9\7\30\2\2\u01b9\u01bc\7"+
		"\u008d\2\2\u01ba\u01bc\7\u0308\2\2\u01bb\u01b8\3\2\2\2\u01bb\u01ba\3\2"+
		"\2\2\u01bc\u01bd\3\2\2\2\u01bd\u01bf\5\"\22\2\u01be\u01bb\3\2\2\2\u01be"+
		"\u01bf\3\2\2\2\u01bf\u01c3\3\2\2\2\u01c0\u01c1\7\32\2\2\u01c1\u01c4\5"+
		"\20\t\2\u01c2\u01c4\7\u00d3\2\2\u01c3\u01c0\3\2\2\2\u01c3\u01c2\3\2\2"+
		"\2\u01c3\u01c4\3\2\2\2\u01c4\u0232\3\2\2\2\u01c5\u01c6\7\u00d2\2\2\u01c6"+
		"\u01c8\t\t\2\2\u01c7\u01c9\5\64\33\2\u01c8\u01c7\3\2\2\2\u01c8\u01c9\3"+
		"\2\2\2\u01c9\u01cb\3\2\2\2\u01ca\u01cc\7\u00d3\2\2\u01cb\u01ca\3\2\2\2"+
		"\u01cb\u01cc\3\2\2\2\u01cc\u0232\3\2\2\2\u01cd\u01ce\7\u01e0\2\2\u01ce"+
		"\u01d0\7\u00d0\2\2\u01cf\u01d1\5\64\33\2\u01d0\u01cf\3\2\2\2\u01d0\u01d1"+
		"\3\2\2\2\u01d1\u01d3\3\2\2\2\u01d2\u01d4\7\u00d3\2\2\u01d3\u01d2\3\2\2"+
		"\2\u01d3\u01d4\3\2\2\2\u01d4\u0232\3\2\2\2\u01d5\u01d6\7\u00d2\2\2\u01d6"+
		"\u01d7\t\n\2\2\u01d7\u01d9\7\u00df\2\2\u01d8\u01da\5\64\33\2\u01d9\u01d8"+
		"\3\2\2\2\u01d9\u01da\3\2\2\2\u01da\u01dc\3\2\2\2\u01db\u01dd\7\u00d3\2"+
		"\2\u01dc\u01db\3\2\2\2\u01dc\u01dd\3\2\2\2\u01dd\u0232\3\2\2\2\u01de\u01e0"+
		"\t\13\2\2\u01df\u01e1\5\64\33\2\u01e0\u01df\3\2\2\2\u01e0\u01e1\3\2\2"+
		"\2\u01e1\u01e3\3\2\2\2\u01e2\u01e4\t\f\2\2\u01e3\u01e2\3\2\2\2\u01e3\u01e4"+
		"\3\2\2\2\u01e4\u01e6\3\2\2\2\u01e5\u01e7\7\u00b4\2\2\u01e6\u01e5\3\2\2"+
		"\2\u01e6\u01e7\3\2\2\2\u01e7\u0232\3\2\2\2\u01e8\u01ea\7\u00c1\2\2\u01e9"+
		"\u01eb\5\66\34\2\u01ea\u01e9\3\2\2\2\u01ea\u01eb\3\2\2\2\u01eb\u01ed\3"+
		"\2\2\2\u01ec\u01ee\t\f\2\2\u01ed\u01ec\3\2\2\2\u01ed\u01ee\3\2\2\2\u01ee"+
		"\u01f0\3\2\2\2\u01ef\u01f1\7\u00b4\2\2\u01f0\u01ef\3\2\2\2\u01f0\u01f1"+
		"\3\2\2\2\u01f1\u0232\3\2\2\2\u01f2\u01f4\7\u00c2\2\2\u01f3\u01f5\7\u00c3"+
		"\2\2\u01f4\u01f3\3\2\2\2\u01f4\u01f5\3\2\2\2\u01f5\u01f7\3\2\2\2\u01f6"+
		"\u01f8\5\66\34\2\u01f7\u01f6\3\2\2\2\u01f7\u01f8\3\2\2\2\u01f8\u01fa\3"+
		"\2\2\2\u01f9\u01fb\t\f\2\2\u01fa\u01f9\3\2\2\2\u01fa\u01fb\3\2\2\2\u01fb"+
		"\u01fd\3\2\2\2\u01fc\u01fe\7\u00b4\2\2\u01fd\u01fc\3\2\2\2\u01fd\u01fe"+
		"\3\2\2\2\u01fe\u0232\3\2\2\2\u01ff\u0201\t\r\2\2\u0200\u0202\58\35\2\u0201"+
		"\u0200\3\2\2\2\u0201\u0202\3\2\2\2\u0202\u0204\3\2\2\2\u0203\u0205\t\f"+
		"\2\2\u0204\u0203\3\2\2\2\u0204\u0205\3\2\2\2\u0205\u0207\3\2\2\2\u0206"+
		"\u0208\7\u00b4\2\2\u0207\u0206\3\2\2\2\u0207\u0208\3\2\2\2\u0208\u0232"+
		"\3\2\2\2\u0209\u0232\t\16\2\2\u020a\u020c\t\17\2\2\u020b\u020d\5\64\33"+
		"\2\u020c\u020b\3\2\2\2\u020c\u020d\3\2\2\2\u020d\u0232\3\2\2\2\u020e\u020f"+
		"\t\20\2\2\u020f\u0211\5J&\2\u0210\u0212\7\u00d3\2\2\u0211\u0210\3\2\2"+
		"\2\u0211\u0212\3\2\2\2\u0212\u0219\3\2\2\2\u0213\u0214\7\30\2\2\u0214"+
		"\u0217\7\u008d\2\2\u0215\u0217\7\u0308\2\2\u0216\u0213\3\2\2\2\u0216\u0215"+
		"\3\2\2\2\u0217\u0218\3\2\2\2\u0218\u021a\5\"\22\2\u0219\u0216\3\2\2\2"+
		"\u0219\u021a\3\2\2\2\u021a\u0232\3\2\2\2\u021b\u0232\t\21\2\2\u021c\u021e"+
		"\7\u00d8\2\2\u021d\u021f\7\u00d0\2\2\u021e\u021d\3\2\2\2\u021e\u021f\3"+
		"\2\2\2\u021f\u0221\3\2\2\2\u0220\u0222\7\u00d3\2\2\u0221\u0220\3\2\2\2"+
		"\u0221\u0222\3\2\2\2\u0222\u0229\3\2\2\2\u0223\u0224\7\30\2\2\u0224\u0227"+
		"\7\u008d\2\2\u0225\u0227\7\u0308\2\2\u0226\u0223\3\2\2\2\u0226\u0225\3"+
		"\2\2\2\u0227\u0228\3\2\2\2\u0228\u022a\5\"\22\2\u0229\u0226\3\2\2\2\u0229"+
		"\u022a\3\2\2\2\u022a\u022d\3\2\2\2\u022b\u022c\7\32\2\2\u022c\u022e\5"+
		"\20\t\2\u022d\u022b\3\2\2\2\u022d\u022e\3\2\2\2\u022e\u0232\3\2\2\2\u022f"+
		"\u0230\7\u00d8\2\2\u0230\u0232\7\u00d4\2\2\u0231\u01ae\3\2\2\2\u0231\u01c5"+
		"\3\2\2\2\u0231\u01cd\3\2\2\2\u0231\u01d5\3\2\2\2\u0231\u01de\3\2\2\2\u0231"+
		"\u01e8\3\2\2\2\u0231\u01f2\3\2\2\2\u0231\u01ff\3\2\2\2\u0231\u0209\3\2"+
		"\2\2\u0231\u020a\3\2\2\2\u0231\u020e\3\2\2\2\u0231\u021b\3\2\2\2\u0231"+
		"\u021c\3\2\2\2\u0231\u022f\3\2\2\2\u0232\63\3\2\2\2\u0233\u0234\7\u0429"+
		"\2\2\u0234\u0235\5D#\2\u0235\u0236\7\u042a\2\2\u0236\65\3\2\2\2\u0237"+
		"\u0238\7\u0429\2\2\u0238\u0239\5D#\2\u0239\u023a\7\u042b\2\2\u023a\u023b"+
		"\5D#\2\u023b\u023c\7\u042a\2\2\u023c\67\3\2\2\2\u023d\u023e\7\u0429\2"+
		"\2\u023e\u0241\5D#\2\u023f\u0240\7\u042b\2\2\u0240\u0242\5D#\2\u0241\u023f"+
		"\3\2\2\2\u0241\u0242\3\2\2\2\u0242\u0243\3\2\2\2\u0243\u0244\7\u042a\2"+
		"\2\u02449\3\2\2\2\u0245\u0246\5<\37\2\u0246;\3\2\2\2\u0247\u024c\7\u0440"+
		"\2\2\u0248\u024c\5L\'\2\u0249\u024c\5T+\2\u024a\u024c\5V,\2\u024b\u0247"+
		"\3\2\2\2\u024b\u0248\3\2\2\2\u024b\u0249\3\2\2\2\u024b\u024a\3\2\2\2\u024c"+
		"=\3\2\2\2\u024d\u0250\7\u0436\2\2\u024e\u0250\5D#\2\u024f\u024d\3\2\2"+
		"\2\u024f\u024e\3\2\2\2\u0250?\3\2\2\2\u0251\u0258\7\u0085\2\2\u0252\u0258"+
		"\7\24\2\2\u0253\u0254\7\u008d\2\2\u0254\u0258\7k\2\2\u0255\u0256\7\u01e3"+
		"\2\2\u0256\u0258\7\u0130\2\2\u0257\u0251\3\2\2\2\u0257\u0252\3\2\2\2\u0257"+
		"\u0253\3\2\2\2\u0257\u0255\3\2\2\2\u0258A\3\2\2\2\u0259\u025a\7\u00ac"+
		"\2\2\u025a\u025b\t\22\2\2\u025bC\3\2\2\2\u025c\u025d\t\23\2\2\u025dE\3"+
		"\2\2\2\u025e\u0260\7\u043e\2\2\u025f\u025e\3\2\2\2\u025f\u0260\3\2\2\2"+
		"\u0260\u0261\3\2\2\2\u0261\u0262\7\u043a\2\2\u0262G\3\2\2\2\u0263\u0264"+
		"\t\24\2\2\u0264I\3\2\2\2\u0265\u0266\7\u0429\2\2\u0266\u026b\7\u0438\2"+
		"\2\u0267\u0268\7\u042b\2\2\u0268\u026a\7\u0438\2\2\u0269\u0267\3\2\2\2"+
		"\u026a\u026d\3\2\2\2\u026b\u0269\3\2\2\2\u026b\u026c\3\2\2\2\u026c\u026e"+
		"\3\2\2\2\u026d\u026b\3\2\2\2\u026e\u026f\7\u042a\2\2\u026fK\3\2\2\2\u0270"+
		"\u0271\t\25\2\2\u0271M\3\2\2\2\u0272\u027a\7\f\2\2\u0273\u0274\7\u0426"+
		"\2\2\u0274\u027a\7\u0426\2\2\u0275\u027a\7\u00b3\2\2\u0276\u027a\7q\2"+
		"\2\u0277\u0278\7\u0425\2\2\u0278\u027a\7\u0425\2\2\u0279\u0272\3\2\2\2"+
		"\u0279\u0273\3\2\2\2\u0279\u0275\3\2\2\2\u0279\u0276\3\2\2\2\u0279\u0277"+
		"\3\2\2\2\u027aO\3\2\2\2\u027b\u027d\7i\2\2\u027c\u027b\3\2\2\2\u027c\u027d"+
		"\3\2\2\2\u027d\u027e\3\2\2\2\u027e\u027f\t\6\2\2\u027fQ\3\2\2\2\u0280"+
		"\u0281\t\26\2\2\u0281S\3\2\2\2\u0282\u0283\t\27\2\2\u0283U\3\2\2\2\u0284"+
		"\u0285\t\30\2\2\u0285W\3\2\2\2t]eimqvy\177\u0087\u008e\u0091\u0095\u0099"+
		"\u009e\u00a1\u00a5\u00a8\u00ac\u00b1\u00b4\u00b8\u00bc\u00c0\u00c2\u00c7"+
		"\u00ca\u00d0\u00d5\u00d7\u00db\u00de\u00e1\u00e7\u00ec\u00ee\u00f3\u00f8"+
		"\u0100\u0107\u0112\u0117\u011b\u011e\u0126\u012e\u0130\u0137\u013c\u0142"+
		"\u0145\u014b\u0154\u0157\u015c\u0162\u0166\u016a\u016f\u017c\u017f\u0182"+
		"\u0186\u018b\u018e\u0192\u0196\u0198\u019d\u01a0\u01a5\u01a8\u01b0\u01b3"+
		"\u01b6\u01bb\u01be\u01c3\u01c8\u01cb\u01d0\u01d3\u01d9\u01dc\u01e0\u01e3"+
		"\u01e6\u01ea\u01ed\u01f0\u01f4\u01f7\u01fa\u01fd\u0201\u0204\u0207\u020c"+
		"\u0211\u0216\u0219\u021e\u0221\u0226\u0229\u022d\u0231\u0241\u024b\u024f"+
		"\u0257\u025f\u026b\u0279\u027c";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}